// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infra/accounts/account.proto

package improbable_accounts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_GroupId_Name = regexp.MustCompile(`^[a-z0-9/_]{5,64}$`)

func (this *GroupId) Validate() error {
	if !_regex_GroupId_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-z0-9/_]{5,64}$"`, this.Name))
	}
	return nil
}

var _regex_Grant_Verbs = regexp.MustCompile(`^[rwg*]$`)

func (this *Grant) Validate() error {
	for _, item := range this.Verbs {
		if !_regex_Grant_Verbs.MatchString(item) {
			return github_com_mwitkow_go_proto_validators.FieldError("Verbs", fmt.Errorf(`value '%v' must be a string conforming to regex "^[rwg*]$"`, item))
		}
	}
	return nil
}
func (this *GroupPermPair) Validate() error {
	return nil
}
func (this *AccountPermPair) Validate() error {
	return nil
}
func (this *CreateAccountRequest) Validate() error {
	if nil == this.AccountEmail {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", fmt.Errorf("message must exist"))
	}
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	return nil
}

var _regex_CreateBetaAccountRequest_Email = regexp.MustCompile(`^[^[:cntrl:] ,:;<>@"'()\[\]{}]{0,63}@[[:alnum:].-]{2,63}$`)
var _regex_CreateBetaAccountRequest_FirstName = regexp.MustCompile(`^.{1,255}$`)
var _regex_CreateBetaAccountRequest_LastName = regexp.MustCompile(`^.{1,255}$`)
var _regex_CreateBetaAccountRequest_Source = regexp.MustCompile(`^.{0,255}$`)

func (this *CreateBetaAccountRequest) Validate() error {
	if !_regex_CreateBetaAccountRequest_Email.MatchString(this.Email) {
		return github_com_mwitkow_go_proto_validators.FieldError("Email", fmt.Errorf(`value '%v' must be a string conforming to regex "^[^[:cntrl:] ,:;<>@\"'()\\[\\]{}]{0,63}@[[:alnum:].-]{2,63}$"`, this.Email))
	}
	if !_regex_CreateBetaAccountRequest_FirstName.MatchString(this.FirstName) {
		return github_com_mwitkow_go_proto_validators.FieldError("FirstName", fmt.Errorf(`value '%v' must be a string conforming to regex "^.{1,255}$"`, this.FirstName))
	}
	if !_regex_CreateBetaAccountRequest_LastName.MatchString(this.LastName) {
		return github_com_mwitkow_go_proto_validators.FieldError("LastName", fmt.Errorf(`value '%v' must be a string conforming to regex "^.{1,255}$"`, this.LastName))
	}
	if !_regex_CreateBetaAccountRequest_Source.MatchString(this.Source) {
		return github_com_mwitkow_go_proto_validators.FieldError("Source", fmt.Errorf(`value '%v' must be a string conforming to regex "^.{0,255}$"`, this.Source))
	}
	return nil
}
func (this *CreateBetaAccountResponse) Validate() error {
	if this.OrganisationId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OrganisationId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", err)
		}
	}
	if this.AccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountId", err)
		}
	}
	return nil
}
func (this *CreateGroupRequest) Validate() error {
	if nil == this.GroupId {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupId", fmt.Errorf("message must exist"))
	}
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	return nil
}
func (this *RemoveGroupRequest) Validate() error {
	if nil == this.GroupId {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupId", fmt.Errorf("message must exist"))
	}
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	return nil
}
func (this *GroupModifyAccountRequest) Validate() error {
	if nil == this.GroupId {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupId", fmt.Errorf("message must exist"))
	}
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	if nil == this.AccountEmail {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", fmt.Errorf("message must exist"))
	}
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	return nil
}

var _regex_SetGroupPermissionRequest_Verbs = regexp.MustCompile(`^[rwg*]$`)

func (this *SetGroupPermissionRequest) Validate() error {
	if nil == this.GroupId {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupId", fmt.Errorf("message must exist"))
	}
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	for _, item := range this.Verbs {
		if !_regex_SetGroupPermissionRequest_Verbs.MatchString(item) {
			return github_com_mwitkow_go_proto_validators.FieldError("Verbs", fmt.Errorf(`value '%v' must be a string conforming to regex "^[rwg*]$"`, item))
		}
	}
	return nil
}
func (this *ListAccountsRequest) Validate() error {
	for _, item := range this.GroupIds {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupIds", err)
			}
		}
	}
	return nil
}
func (this *ListAccountsResponse) Validate() error {
	for _, item := range this.Groups {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Groups", err)
			}
		}
	}
	return nil
}
func (this *ListAccountsByGroupRequest) Validate() error {
	for _, item := range this.GroupIds {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupIds", err)
			}
		}
	}
	return nil
}
func (this *ListAccountsByGroupResponse) Validate() error {
	for _, item := range this.Groups {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Groups", err)
			}
		}
	}
	return nil
}
func (this *Account) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Email != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Email); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Email", err)
		}
	}
	if this.OrganisationId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OrganisationId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", err)
		}
	}
	return nil
}
func (this *ListAllAccountsRequest) Validate() error {
	if this.OrganisationId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OrganisationId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", err)
		}
	}
	return nil
}
func (this *ListAllAccountsResponse) Validate() error {
	for _, item := range this.Accounts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Accounts", err)
			}
		}
	}
	return nil
}
func (this *GroupMembers) Validate() error {
	if nil == this.GroupId {
		return github_com_mwitkow_go_proto_validators.FieldError("GroupId", fmt.Errorf("message must exist"))
	}
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	for _, item := range this.AccountEmails {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AccountEmails", err)
			}
		}
	}
	return nil
}
func (this *AccountMembership) Validate() error {
	if nil == this.AccountEmail {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", fmt.Errorf("message must exist"))
	}
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	for _, item := range this.GroupIds {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupIds", err)
			}
		}
	}
	return nil
}
func (this *DeleteAccountRequest) Validate() error {
	for _, item := range this.AccountEmails {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AccountEmails", err)
			}
		}
	}
	for _, item := range this.AccountIds {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AccountIds", err)
			}
		}
	}
	return nil
}
func (this *ListMembershipRequest) Validate() error {
	for _, item := range this.AccountEmails {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AccountEmails", err)
			}
		}
	}
	return nil
}
func (this *ListMembershipResponse) Validate() error {
	for _, item := range this.Accounts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Accounts", err)
			}
		}
	}
	return nil
}
func (this *ListAccountPermissionRequest) Validate() error {
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	return nil
}
func (this *ListAccountPermissionResponse) Validate() error {
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	for _, item := range this.Grants {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Grants", err)
			}
		}
	}
	return nil
}
func (this *ListGroupsRequest) Validate() error {
	return nil
}
func (this *ListGroupsResponse) Validate() error {
	for _, item := range this.GroupIds {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupIds", err)
			}
		}
	}
	return nil
}
func (this *ListGroupPermissionRequest) Validate() error {
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	return nil
}
func (this *ListGroupPermissionResponse) Validate() error {
	if this.GroupId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.GroupId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("GroupId", err)
		}
	}
	for _, item := range this.Grants {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Grants", err)
			}
		}
	}
	return nil
}
func (this *SetBlacklistStatusRequest) Validate() error {
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	return nil
}
func (this *SetBlacklistStatusResponse) Validate() error {
	return nil
}
func (this *GetAccountRequest) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	return nil
}
func (this *GetAccountResponse) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	if this.Email != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Email); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Email", err)
		}
	}
	if this.OrganisationId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OrganisationId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", err)
		}
	}
	return nil
}
func (this *ListGroupsByPermissionRequest) Validate() error {
	if this.Grant != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Grant); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Grant", err)
		}
	}
	return nil
}
func (this *ListGroupsByPermissionResponse) Validate() error {
	for _, item := range this.GroupPerms {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("GroupPerms", err)
			}
		}
	}
	return nil
}
func (this *ListAccountsByPermissionRequest) Validate() error {
	if this.Grant != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Grant); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Grant", err)
		}
	}
	return nil
}
func (this *ListAccountsByPermissionResponse) Validate() error {
	for _, item := range this.AccountPerms {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AccountPerms", err)
			}
		}
	}
	return nil
}
