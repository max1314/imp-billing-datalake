// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infra/experimentz/config.proto

package improbable_infra_experimentz

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Config) Validate() error {
	for _, item := range this.Experiments {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Experiments", err)
			}
		}
	}
	return nil
}

var _regex_Experiment_ExperimentName = regexp.MustCompile(`^[a-zA-Z0-9_]{5,64}$`)

func (this *Experiment) Validate() error {
	if !_regex_Experiment_ExperimentName.MatchString(this.ExperimentName) {
		return github_com_mwitkow_go_proto_validators.FieldError("ExperimentName", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{5,64}$"`, this.ExperimentName))
	}
	if this.Conditional != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Conditional); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Conditional", err)
		}
	}
	return nil
}
func (this *Conditional) Validate() error {
	if oneOfNester, ok := this.GetCondition().(*Conditional_Bool); ok {
		if oneOfNester.Bool != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Bool); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Bool", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_Not); ok {
		if oneOfNester.Not != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Not); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Not", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_Or); ok {
		if oneOfNester.Or != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Or); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Or", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_And); ok {
		if oneOfNester.And != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.And); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("And", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_Equals); ok {
		if oneOfNester.Equals != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Equals); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Equals", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_Suffix); ok {
		if oneOfNester.Suffix != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Suffix); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Suffix", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_StablePercentage); ok {
		if oneOfNester.StablePercentage != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.StablePercentage); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("StablePercentage", err)
			}
		}
	}
	if oneOfNester, ok := this.GetCondition().(*Conditional_Prefix); ok {
		if oneOfNester.Prefix != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Prefix); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Prefix", err)
			}
		}
	}
	return nil
}
func (this *ConditionalBool) Validate() error {
	return nil
}
func (this *ConditionalNot) Validate() error {
	if this.Condition != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Condition); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Condition", err)
		}
	}
	return nil
}
func (this *ConditionalOr) Validate() error {
	for _, item := range this.Condition {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Condition", err)
			}
		}
	}
	return nil
}
func (this *ConditionalAnd) Validate() error {
	for _, item := range this.Condition {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Condition", err)
			}
		}
	}
	return nil
}

var _regex_ConditionalEquals_FieldName = regexp.MustCompile(`^[a-zA-Z0-9_]{3,64}$`)

func (this *ConditionalEquals) Validate() error {
	if !_regex_ConditionalEquals_FieldName.MatchString(this.FieldName) {
		return github_com_mwitkow_go_proto_validators.FieldError("FieldName", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{3,64}$"`, this.FieldName))
	}
	return nil
}

var _regex_ConditionalPrefix_FieldName = regexp.MustCompile(`^[a-zA-Z0-9_]{3,64}$`)

func (this *ConditionalPrefix) Validate() error {
	if !_regex_ConditionalPrefix_FieldName.MatchString(this.FieldName) {
		return github_com_mwitkow_go_proto_validators.FieldError("FieldName", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{3,64}$"`, this.FieldName))
	}
	return nil
}

var _regex_ConditionalSuffix_FieldName = regexp.MustCompile(`^[a-zA-Z0-9_]{3,64}$`)

func (this *ConditionalSuffix) Validate() error {
	if !_regex_ConditionalSuffix_FieldName.MatchString(this.FieldName) {
		return github_com_mwitkow_go_proto_validators.FieldError("FieldName", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{3,64}$"`, this.FieldName))
	}
	return nil
}

var _regex_ConditionalStablePercentage_FieldName = regexp.MustCompile(`^[a-zA-Z0-9_]{3,64}$`)

func (this *ConditionalStablePercentage) Validate() error {
	if !_regex_ConditionalStablePercentage_FieldName.MatchString(this.FieldName) {
		return github_com_mwitkow_go_proto_validators.FieldError("FieldName", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{3,64}$"`, this.FieldName))
	}
	if !(this.Percentage < 101) {
		return github_com_mwitkow_go_proto_validators.FieldError("Percentage", fmt.Errorf(`value '%v' must be less than '101'`, this.Percentage))
	}
	return nil
}
