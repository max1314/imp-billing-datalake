// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/experimentz/config.proto

package improbable_infra_experimentz

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	Experiments          []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetExperiments() []*Experiment {
	if m != nil {
		return m.Experiments
	}
	return nil
}

type Experiment struct {
	ExperimentName       string       `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName,proto3" json:"experiment_name,omitempty"`
	RequiredFieldNames   []string     `protobuf:"bytes,2,rep,name=required_field_names,json=requiredFieldNames,proto3" json:"required_field_names,omitempty"`
	Conditional          *Conditional `protobuf:"bytes,3,opt,name=conditional,proto3" json:"conditional,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{1}
}

func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Experiment.Unmarshal(m, b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
}
func (m *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(m, src)
}
func (m *Experiment) XXX_Size() int {
	return xxx_messageInfo_Experiment.Size(m)
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *Experiment) GetRequiredFieldNames() []string {
	if m != nil {
		return m.RequiredFieldNames
	}
	return nil
}

func (m *Experiment) GetConditional() *Conditional {
	if m != nil {
		return m.Conditional
	}
	return nil
}

type Conditional struct {
	// Types that are valid to be assigned to Condition:
	//	*Conditional_Bool
	//	*Conditional_Not
	//	*Conditional_Or
	//	*Conditional_And
	//	*Conditional_Equals
	//	*Conditional_Suffix
	//	*Conditional_StablePercentage
	//	*Conditional_Prefix
	Condition            isConditional_Condition `protobuf_oneof:"condition"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Conditional) Reset()         { *m = Conditional{} }
func (m *Conditional) String() string { return proto.CompactTextString(m) }
func (*Conditional) ProtoMessage()    {}
func (*Conditional) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{2}
}

func (m *Conditional) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Conditional.Unmarshal(m, b)
}
func (m *Conditional) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Conditional.Marshal(b, m, deterministic)
}
func (m *Conditional) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conditional.Merge(m, src)
}
func (m *Conditional) XXX_Size() int {
	return xxx_messageInfo_Conditional.Size(m)
}
func (m *Conditional) XXX_DiscardUnknown() {
	xxx_messageInfo_Conditional.DiscardUnknown(m)
}

var xxx_messageInfo_Conditional proto.InternalMessageInfo

type isConditional_Condition interface {
	isConditional_Condition()
}

type Conditional_Bool struct {
	Bool *ConditionalBool `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type Conditional_Not struct {
	Not *ConditionalNot `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

type Conditional_Or struct {
	Or *ConditionalOr `protobuf:"bytes,3,opt,name=or,proto3,oneof"`
}

type Conditional_And struct {
	And *ConditionalAnd `protobuf:"bytes,4,opt,name=and,proto3,oneof"`
}

type Conditional_Equals struct {
	Equals *ConditionalEquals `protobuf:"bytes,5,opt,name=equals,proto3,oneof"`
}

type Conditional_Suffix struct {
	Suffix *ConditionalSuffix `protobuf:"bytes,6,opt,name=suffix,proto3,oneof"`
}

type Conditional_StablePercentage struct {
	StablePercentage *ConditionalStablePercentage `protobuf:"bytes,7,opt,name=stable_percentage,json=stablePercentage,proto3,oneof"`
}

type Conditional_Prefix struct {
	Prefix *ConditionalPrefix `protobuf:"bytes,8,opt,name=prefix,proto3,oneof"`
}

func (*Conditional_Bool) isConditional_Condition() {}

func (*Conditional_Not) isConditional_Condition() {}

func (*Conditional_Or) isConditional_Condition() {}

func (*Conditional_And) isConditional_Condition() {}

func (*Conditional_Equals) isConditional_Condition() {}

func (*Conditional_Suffix) isConditional_Condition() {}

func (*Conditional_StablePercentage) isConditional_Condition() {}

func (*Conditional_Prefix) isConditional_Condition() {}

func (m *Conditional) GetCondition() isConditional_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Conditional) GetBool() *ConditionalBool {
	if x, ok := m.GetCondition().(*Conditional_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *Conditional) GetNot() *ConditionalNot {
	if x, ok := m.GetCondition().(*Conditional_Not); ok {
		return x.Not
	}
	return nil
}

func (m *Conditional) GetOr() *ConditionalOr {
	if x, ok := m.GetCondition().(*Conditional_Or); ok {
		return x.Or
	}
	return nil
}

func (m *Conditional) GetAnd() *ConditionalAnd {
	if x, ok := m.GetCondition().(*Conditional_And); ok {
		return x.And
	}
	return nil
}

func (m *Conditional) GetEquals() *ConditionalEquals {
	if x, ok := m.GetCondition().(*Conditional_Equals); ok {
		return x.Equals
	}
	return nil
}

func (m *Conditional) GetSuffix() *ConditionalSuffix {
	if x, ok := m.GetCondition().(*Conditional_Suffix); ok {
		return x.Suffix
	}
	return nil
}

func (m *Conditional) GetStablePercentage() *ConditionalStablePercentage {
	if x, ok := m.GetCondition().(*Conditional_StablePercentage); ok {
		return x.StablePercentage
	}
	return nil
}

func (m *Conditional) GetPrefix() *ConditionalPrefix {
	if x, ok := m.GetCondition().(*Conditional_Prefix); ok {
		return x.Prefix
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Conditional) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Conditional_Bool)(nil),
		(*Conditional_Not)(nil),
		(*Conditional_Or)(nil),
		(*Conditional_And)(nil),
		(*Conditional_Equals)(nil),
		(*Conditional_Suffix)(nil),
		(*Conditional_StablePercentage)(nil),
		(*Conditional_Prefix)(nil),
	}
}

type ConditionalBool struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConditionalBool) Reset()         { *m = ConditionalBool{} }
func (m *ConditionalBool) String() string { return proto.CompactTextString(m) }
func (*ConditionalBool) ProtoMessage()    {}
func (*ConditionalBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{3}
}

func (m *ConditionalBool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalBool.Unmarshal(m, b)
}
func (m *ConditionalBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalBool.Marshal(b, m, deterministic)
}
func (m *ConditionalBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalBool.Merge(m, src)
}
func (m *ConditionalBool) XXX_Size() int {
	return xxx_messageInfo_ConditionalBool.Size(m)
}
func (m *ConditionalBool) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalBool.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalBool proto.InternalMessageInfo

func (m *ConditionalBool) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ConditionalNot struct {
	Condition            *Conditional `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConditionalNot) Reset()         { *m = ConditionalNot{} }
func (m *ConditionalNot) String() string { return proto.CompactTextString(m) }
func (*ConditionalNot) ProtoMessage()    {}
func (*ConditionalNot) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{4}
}

func (m *ConditionalNot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalNot.Unmarshal(m, b)
}
func (m *ConditionalNot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalNot.Marshal(b, m, deterministic)
}
func (m *ConditionalNot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalNot.Merge(m, src)
}
func (m *ConditionalNot) XXX_Size() int {
	return xxx_messageInfo_ConditionalNot.Size(m)
}
func (m *ConditionalNot) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalNot.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalNot proto.InternalMessageInfo

func (m *ConditionalNot) GetCondition() *Conditional {
	if m != nil {
		return m.Condition
	}
	return nil
}

type ConditionalOr struct {
	Condition            []*Conditional `protobuf:"bytes,1,rep,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConditionalOr) Reset()         { *m = ConditionalOr{} }
func (m *ConditionalOr) String() string { return proto.CompactTextString(m) }
func (*ConditionalOr) ProtoMessage()    {}
func (*ConditionalOr) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{5}
}

func (m *ConditionalOr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalOr.Unmarshal(m, b)
}
func (m *ConditionalOr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalOr.Marshal(b, m, deterministic)
}
func (m *ConditionalOr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalOr.Merge(m, src)
}
func (m *ConditionalOr) XXX_Size() int {
	return xxx_messageInfo_ConditionalOr.Size(m)
}
func (m *ConditionalOr) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalOr.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalOr proto.InternalMessageInfo

func (m *ConditionalOr) GetCondition() []*Conditional {
	if m != nil {
		return m.Condition
	}
	return nil
}

type ConditionalAnd struct {
	Condition            []*Conditional `protobuf:"bytes,1,rep,name=condition,proto3" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConditionalAnd) Reset()         { *m = ConditionalAnd{} }
func (m *ConditionalAnd) String() string { return proto.CompactTextString(m) }
func (*ConditionalAnd) ProtoMessage()    {}
func (*ConditionalAnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{6}
}

func (m *ConditionalAnd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalAnd.Unmarshal(m, b)
}
func (m *ConditionalAnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalAnd.Marshal(b, m, deterministic)
}
func (m *ConditionalAnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalAnd.Merge(m, src)
}
func (m *ConditionalAnd) XXX_Size() int {
	return xxx_messageInfo_ConditionalAnd.Size(m)
}
func (m *ConditionalAnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalAnd.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalAnd proto.InternalMessageInfo

func (m *ConditionalAnd) GetCondition() []*Conditional {
	if m != nil {
		return m.Condition
	}
	return nil
}

type ConditionalEquals struct {
	FieldName            string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConditionalEquals) Reset()         { *m = ConditionalEquals{} }
func (m *ConditionalEquals) String() string { return proto.CompactTextString(m) }
func (*ConditionalEquals) ProtoMessage()    {}
func (*ConditionalEquals) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{7}
}

func (m *ConditionalEquals) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalEquals.Unmarshal(m, b)
}
func (m *ConditionalEquals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalEquals.Marshal(b, m, deterministic)
}
func (m *ConditionalEquals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalEquals.Merge(m, src)
}
func (m *ConditionalEquals) XXX_Size() int {
	return xxx_messageInfo_ConditionalEquals.Size(m)
}
func (m *ConditionalEquals) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalEquals.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalEquals proto.InternalMessageInfo

func (m *ConditionalEquals) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ConditionalEquals) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ConditionalPrefix struct {
	FieldName            string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	PrefixMatch          string   `protobuf:"bytes,2,opt,name=prefix_match,json=prefixMatch,proto3" json:"prefix_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConditionalPrefix) Reset()         { *m = ConditionalPrefix{} }
func (m *ConditionalPrefix) String() string { return proto.CompactTextString(m) }
func (*ConditionalPrefix) ProtoMessage()    {}
func (*ConditionalPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{8}
}

func (m *ConditionalPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalPrefix.Unmarshal(m, b)
}
func (m *ConditionalPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalPrefix.Marshal(b, m, deterministic)
}
func (m *ConditionalPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalPrefix.Merge(m, src)
}
func (m *ConditionalPrefix) XXX_Size() int {
	return xxx_messageInfo_ConditionalPrefix.Size(m)
}
func (m *ConditionalPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalPrefix proto.InternalMessageInfo

func (m *ConditionalPrefix) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ConditionalPrefix) GetPrefixMatch() string {
	if m != nil {
		return m.PrefixMatch
	}
	return ""
}

type ConditionalSuffix struct {
	FieldName            string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	SuffixMatch          string   `protobuf:"bytes,2,opt,name=suffix_match,json=suffixMatch,proto3" json:"suffix_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConditionalSuffix) Reset()         { *m = ConditionalSuffix{} }
func (m *ConditionalSuffix) String() string { return proto.CompactTextString(m) }
func (*ConditionalSuffix) ProtoMessage()    {}
func (*ConditionalSuffix) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{9}
}

func (m *ConditionalSuffix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalSuffix.Unmarshal(m, b)
}
func (m *ConditionalSuffix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalSuffix.Marshal(b, m, deterministic)
}
func (m *ConditionalSuffix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalSuffix.Merge(m, src)
}
func (m *ConditionalSuffix) XXX_Size() int {
	return xxx_messageInfo_ConditionalSuffix.Size(m)
}
func (m *ConditionalSuffix) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalSuffix.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalSuffix proto.InternalMessageInfo

func (m *ConditionalSuffix) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ConditionalSuffix) GetSuffixMatch() string {
	if m != nil {
		return m.SuffixMatch
	}
	return ""
}

type ConditionalStablePercentage struct {
	FieldName            string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Percentage           uint32   `protobuf:"varint,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConditionalStablePercentage) Reset()         { *m = ConditionalStablePercentage{} }
func (m *ConditionalStablePercentage) String() string { return proto.CompactTextString(m) }
func (*ConditionalStablePercentage) ProtoMessage()    {}
func (*ConditionalStablePercentage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6266c19241df585, []int{10}
}

func (m *ConditionalStablePercentage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConditionalStablePercentage.Unmarshal(m, b)
}
func (m *ConditionalStablePercentage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConditionalStablePercentage.Marshal(b, m, deterministic)
}
func (m *ConditionalStablePercentage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConditionalStablePercentage.Merge(m, src)
}
func (m *ConditionalStablePercentage) XXX_Size() int {
	return xxx_messageInfo_ConditionalStablePercentage.Size(m)
}
func (m *ConditionalStablePercentage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConditionalStablePercentage.DiscardUnknown(m)
}

var xxx_messageInfo_ConditionalStablePercentage proto.InternalMessageInfo

func (m *ConditionalStablePercentage) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ConditionalStablePercentage) GetPercentage() uint32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "improbable.infra.experimentz.Config")
	proto.RegisterType((*Experiment)(nil), "improbable.infra.experimentz.Experiment")
	proto.RegisterType((*Conditional)(nil), "improbable.infra.experimentz.Conditional")
	proto.RegisterType((*ConditionalBool)(nil), "improbable.infra.experimentz.ConditionalBool")
	proto.RegisterType((*ConditionalNot)(nil), "improbable.infra.experimentz.ConditionalNot")
	proto.RegisterType((*ConditionalOr)(nil), "improbable.infra.experimentz.ConditionalOr")
	proto.RegisterType((*ConditionalAnd)(nil), "improbable.infra.experimentz.ConditionalAnd")
	proto.RegisterType((*ConditionalEquals)(nil), "improbable.infra.experimentz.ConditionalEquals")
	proto.RegisterType((*ConditionalPrefix)(nil), "improbable.infra.experimentz.ConditionalPrefix")
	proto.RegisterType((*ConditionalSuffix)(nil), "improbable.infra.experimentz.ConditionalSuffix")
	proto.RegisterType((*ConditionalStablePercentage)(nil), "improbable.infra.experimentz.ConditionalStablePercentage")
}

func init() {
	proto.RegisterFile("infra/experimentz/config.proto", fileDescriptor_a6266c19241df585)
}

var fileDescriptor_a6266c19241df585 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x5d, 0x4f, 0x13, 0x4d,
	0x1c, 0xc5, 0xfb, 0x02, 0x85, 0xfe, 0xf7, 0x01, 0x1e, 0x26, 0xc4, 0x6c, 0xd0, 0x48, 0x6d, 0x8c,
	0xa9, 0x81, 0xee, 0x12, 0x50, 0x12, 0x2e, 0x4c, 0xa4, 0x0d, 0x5a, 0x35, 0x22, 0x19, 0xbd, 0xf0,
	0x25, 0xda, 0x4c, 0xbb, 0xb3, 0x65, 0xe2, 0xee, 0x4c, 0x99, 0xdd, 0x02, 0xc1, 0x98, 0xf8, 0x11,
	0xfd, 0x06, 0x24, 0xdc, 0xfb, 0x1d, 0xcc, 0xcc, 0x94, 0xee, 0xb6, 0x26, 0x4d, 0x6b, 0xbd, 0xdb,
	0x9d, 0xff, 0x9e, 0xdf, 0x39, 0x93, 0x9e, 0x99, 0xc2, 0x5d, 0xc6, 0x7d, 0x49, 0x5c, 0x7a, 0xd1,
	0xa5, 0x92, 0x85, 0x94, 0xc7, 0x97, 0x6e, 0x5b, 0x70, 0x9f, 0x75, 0x9c, 0xae, 0x14, 0xb1, 0x40,
	0x77, 0x58, 0xd8, 0x95, 0xa2, 0x45, 0x5a, 0x01, 0x75, 0xf4, 0xa7, 0x4e, 0xea, 0xd3, 0xf5, 0xbd,
	0x0e, 0x8b, 0x4f, 0x7a, 0x2d, 0xa7, 0x2d, 0x42, 0x37, 0x3c, 0x67, 0xf1, 0x57, 0x71, 0xee, 0x76,
	0x44, 0x55, 0x4b, 0xab, 0x67, 0x24, 0x60, 0x1e, 0x89, 0x85, 0x8c, 0xdc, 0xc1, 0xa3, 0xa1, 0x96,
	0xdf, 0x41, 0xa1, 0xae, 0x5d, 0xd0, 0x4b, 0xb0, 0x12, 0x60, 0x64, 0x67, 0x4b, 0xf9, 0x8a, 0xb5,
	0x53, 0x71, 0xc6, 0xb9, 0x3a, 0x87, 0x83, 0x67, 0x9c, 0x16, 0x97, 0x7f, 0x66, 0x01, 0x92, 0x19,
	0xaa, 0xc3, 0x4a, 0x32, 0x6d, 0x72, 0x12, 0x52, 0x3b, 0x5b, 0xca, 0x56, 0x8a, 0xb5, 0xf5, 0xeb,
	0xab, 0x8d, 0x5b, 0xb0, 0xf6, 0xe5, 0x13, 0xa9, 0x5e, 0x1e, 0x54, 0x3f, 0x6e, 0x57, 0xf7, 0x9b,
	0x9f, 0xbf, 0x3d, 0xde, 0xda, 0x7b, 0xf4, 0xfd, 0x3e, 0x5e, 0x4e, 0x24, 0x47, 0x24, 0xa4, 0x68,
	0x1b, 0xd6, 0x24, 0x3d, 0xed, 0x31, 0x49, 0xbd, 0xa6, 0xcf, 0x68, 0xe0, 0x69, 0x50, 0x64, 0xe7,
	0x4a, 0xf9, 0x4a, 0x11, 0xa3, 0x9b, 0xd9, 0x33, 0x35, 0x52, 0x82, 0x08, 0xbd, 0x02, 0xab, 0x2d,
	0xb8, 0xc7, 0x62, 0x26, 0x38, 0x09, 0xec, 0x7c, 0x29, 0x5b, 0xb1, 0x76, 0x1e, 0x8e, 0xdf, 0x51,
	0x3d, 0x11, 0xe0, 0xb4, 0xba, 0xfc, 0x6b, 0x0e, 0xac, 0xd4, 0x10, 0xd5, 0x61, 0xae, 0x25, 0x44,
	0xa0, 0x37, 0x62, 0xed, 0x54, 0x27, 0xa6, 0xd6, 0x84, 0x08, 0x1a, 0x19, 0xac, 0xc5, 0xe8, 0x29,
	0xe4, 0xb9, 0x88, 0xed, 0x9c, 0x66, 0x6c, 0x4d, 0xcc, 0x38, 0x12, 0x71, 0x23, 0x83, 0x95, 0x14,
	0x3d, 0x81, 0x9c, 0x90, 0xfd, 0xad, 0x6d, 0x4e, 0x0c, 0x78, 0x23, 0x1b, 0x19, 0x9c, 0x13, 0x52,
	0x05, 0x20, 0xdc, 0xb3, 0xe7, 0xa6, 0x0c, 0x70, 0xc0, 0x3d, 0x15, 0x80, 0x70, 0x0f, 0xbd, 0x80,
	0x02, 0x3d, 0xed, 0x91, 0x20, 0xb2, 0xe7, 0x35, 0xc4, 0x9d, 0x18, 0x72, 0xa8, 0x65, 0x8d, 0x0c,
	0xee, 0x03, 0x14, 0x2a, 0xea, 0xf9, 0x3e, 0xbb, 0xb0, 0x0b, 0x53, 0xa2, 0xde, 0x6a, 0x99, 0x42,
	0x19, 0x00, 0x3a, 0x81, 0xd5, 0x28, 0x56, 0xba, 0x66, 0x97, 0xca, 0x36, 0xe5, 0x31, 0xe9, 0x50,
	0x7b, 0x41, 0x53, 0xf7, 0x27, 0xa7, 0x6a, 0xc2, 0xf1, 0x00, 0xd0, 0xc8, 0xe0, 0xff, 0xa3, 0x91,
	0x35, 0x15, 0xba, 0x2b, 0xa9, 0x0a, 0xbd, 0x38, 0x65, 0xe8, 0x63, 0x2d, 0x53, 0xa1, 0x0d, 0xa0,
	0x66, 0x41, 0x71, 0xd0, 0xb8, 0xf2, 0x26, 0xac, 0x8c, 0xb4, 0x06, 0xd9, 0xb0, 0x40, 0xb9, 0xe2,
	0x7a, 0xba, 0x75, 0x8b, 0xf8, 0xe6, 0xb5, 0xfc, 0x01, 0x96, 0x87, 0xeb, 0x81, 0x9e, 0xa7, 0x58,
	0xfd, 0x8e, 0x4e, 0xd1, 0xfc, 0x54, 0x8e, 0xf7, 0xb0, 0x34, 0x54, 0x9c, 0x51, 0x72, 0xfe, 0xaf,
	0xc9, 0xc3, 0xa1, 0x0f, 0xb8, 0xf7, 0xef, 0xd0, 0x1e, 0xac, 0xfe, 0x51, 0x34, 0xb4, 0x0f, 0x90,
	0xdc, 0x1b, 0xe3, 0x2e, 0xa0, 0x5d, 0x73, 0x01, 0x15, 0xfd, 0x9b, 0xab, 0x04, 0xad, 0xc1, 0xfc,
	0x19, 0x09, 0x7a, 0x54, 0x9f, 0xd4, 0x22, 0x36, 0x2f, 0xe5, 0xd3, 0x21, 0x17, 0xf3, 0x73, 0xce,
	0xe2, 0x72, 0x0f, 0xfe, 0x33, 0x4d, 0x68, 0x86, 0x24, 0x6e, 0x9f, 0xf4, 0xcd, 0x2c, 0xb3, 0xf6,
	0x5a, 0x2d, 0x8d, 0x58, 0x9a, 0xda, 0xcf, 0x68, 0x69, 0x4e, 0xcc, 0xb0, 0xa5, 0x59, 0x33, 0x96,
	0x3f, 0xb2, 0x70, 0x7b, 0xcc, 0xa1, 0x98, 0xc5, 0xfd, 0x01, 0x40, 0xea, 0x78, 0x2a, 0xef, 0xa5,
	0x5a, 0xe1, 0xfa, 0x6a, 0x23, 0x67, 0x53, 0x9c, 0x9a, 0xb4, 0x0a, 0xfa, 0xbf, 0x6a, 0xf7, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x1f, 0x48, 0xd2, 0x23, 0x07, 0x00, 0x00,
}
