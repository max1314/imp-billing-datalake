// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: infra/experimentz/config.proto

package improbable_infra_experimentz

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	github_com_improbable_io_go_proto_logfields "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Config) LogFields() map[string]string {
	return map[string]string{}
}

func (this *Config) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *Experiment) LogFields() map[string]string {
	// Handle being called on nil message.
	if this == nil {
		return map[string]string{}
	}
	// Gather fields from oneofs and child messages.
	var hasInner bool
	conditionalFields := github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(this.Conditional)
	hasInner = hasInner || len(conditionalFields) > 0
	if !hasInner {
		// If no inner messages added any fields, avoid merging maps.
		return map[string]string{}
	}
	// Merge all the field maps.
	res := map[string]string{}
	for k, v := range conditionalFields {
		res[k] = v
	}
	return res
}

func (this *Experiment) ExtractRequestFields(dst map[string]interface{}) {
	// Handle being called on nil message.
	if this == nil {
		return
	}

	github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(this.Conditional, dst)
}

func (this *Conditional) LogFields() map[string]string {
	// Handle being called on nil message.
	if this == nil {
		return map[string]string{}
	}
	// Gather fields from oneofs and child messages.
	var hasInner bool
	var conditionFields map[string]string
	switch f := this.Condition.(type) {
	case *Conditional_Bool:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Bool)
	case *Conditional_Not:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Not)
	case *Conditional_Or:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Or)
	case *Conditional_And:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.And)
	case *Conditional_Equals:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Equals)
	case *Conditional_Suffix:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Suffix)
	case *Conditional_StablePercentage:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.StablePercentage)
	case *Conditional_Prefix:
		conditionFields = github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(f.Prefix)
	default:
		conditionFields = map[string]string{}
	}
	hasInner = hasInner || len(conditionFields) > 0
	if !hasInner {
		// If no inner messages added any fields, avoid merging maps.
		return map[string]string{}
	}
	// Merge all the field maps.
	res := map[string]string{}
	for k, v := range conditionFields {
		res[k] = v
	}
	return res
}

func (this *Conditional) ExtractRequestFields(dst map[string]interface{}) {
	// Handle being called on nil message.
	if this == nil {
		return
	}

	if f, ok := this.Condition.(*Conditional_Bool); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Bool, dst)
	}
	if f, ok := this.Condition.(*Conditional_Not); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Not, dst)
	}
	if f, ok := this.Condition.(*Conditional_Or); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Or, dst)
	}
	if f, ok := this.Condition.(*Conditional_And); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.And, dst)
	}
	if f, ok := this.Condition.(*Conditional_Equals); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Equals, dst)
	}
	if f, ok := this.Condition.(*Conditional_Suffix); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Suffix, dst)
	}
	if f, ok := this.Condition.(*Conditional_StablePercentage); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.StablePercentage, dst)
	}
	if f, ok := this.Condition.(*Conditional_Prefix); ok {
		github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(f.Prefix, dst)
	}
}

func (this *ConditionalBool) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalBool) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalNot) LogFields() map[string]string {
	// Handle being called on nil message.
	if this == nil {
		return map[string]string{}
	}
	// Gather fields from oneofs and child messages.
	var hasInner bool
	conditionFields := github_com_improbable_io_go_proto_logfields.ExtractLogFieldsFromMessage(this.Condition)
	hasInner = hasInner || len(conditionFields) > 0
	if !hasInner {
		// If no inner messages added any fields, avoid merging maps.
		return map[string]string{}
	}
	// Merge all the field maps.
	res := map[string]string{}
	for k, v := range conditionFields {
		res[k] = v
	}
	return res
}

func (this *ConditionalNot) ExtractRequestFields(dst map[string]interface{}) {
	// Handle being called on nil message.
	if this == nil {
		return
	}

	github_com_improbable_io_go_proto_logfields.ExtractRequestFieldsFromMessage(this.Condition, dst)
}

func (this *ConditionalOr) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalOr) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalAnd) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalAnd) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalEquals) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalEquals) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalPrefix) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalPrefix) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalSuffix) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalSuffix) ExtractRequestFields(dst map[string]interface{}) {
}

func (this *ConditionalStablePercentage) LogFields() map[string]string {
	return map[string]string{}
}

func (this *ConditionalStablePercentage) ExtractRequestFields(dst map[string]interface{}) {
}
