// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infra/logging/logging.proto

package improbable_infra_logging

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("infra/logging/logging.proto", fileDescriptor_c79adbea9858a439)
}

var fileDescriptor_c79adbea9858a439 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8e, 0x31, 0x4b, 0xc4, 0x40,
	0x10, 0x85, 0x49, 0x23, 0x98, 0xc2, 0x22, 0x85, 0x4a, 0x62, 0x75, 0x85, 0x58, 0xc8, 0x2e, 0x68,
	0x67, 0xad, 0x95, 0x01, 0x8b, 0x14, 0x16, 0x62, 0xb1, 0xc9, 0x4d, 0xc6, 0x3d, 0x76, 0x33, 0xc3,
	0x64, 0xa2, 0x1e, 0x72, 0xbf, 0xc1, 0xde, 0x46, 0xf0, 0x97, 0x8a, 0x49, 0x4e, 0xc1, 0xab, 0x16,
	0xf6, 0x7b, 0x6f, 0xbe, 0x97, 0x16, 0xbe, 0x6b, 0xc5, 0xd9, 0x40, 0x88, 0xbe, 0xc3, 0xed, 0x6b,
	0x58, 0x48, 0x29, 0x3b, 0xf6, 0x91, 0x85, 0x6a, 0x57, 0x07, 0x30, 0x63, 0xce, 0xcc, 0x3c, 0x2f,
	0x90, 0x08, 0x03, 0xd8, 0x31, 0x57, 0x0f, 0xad, 0x85, 0xc8, 0xba, 0x9e, 0x6a, 0xf9, 0xc9, 0x7f,
	0xd8, 0xab, 0x0c, 0x8d, 0xce, 0xf4, 0xf4, 0xef, 0xa8, 0x85, 0x57, 0xb5, 0x1c, 0x06, 0xf4, 0x9d,
	0x75, 0x83, 0x3e, 0x59, 0x06, 0x89, 0xfd, 0x94, 0xbb, 0xf8, 0x4a, 0xd2, 0x83, 0x72, 0xd2, 0x55,
	0x20, 0xcf, 0xbe, 0x81, 0xec, 0x3d, 0x49, 0xf7, 0x4b, 0xc2, 0x4a, 0x05, 0x5c, 0xcc, 0x8e, 0xcc,
	0xe4, 0x31, 0x5b, 0x8f, 0xa9, 0x46, 0x4f, 0x7e, 0xb8, 0x03, 0x6e, 0x7e, 0xd6, 0x2d, 0xee, 0x3e,
	0x3e, 0x17, 0xb7, 0x69, 0xc1, 0xc1, 0x69, 0x4b, 0x12, 0xaf, 0x81, 0x03, 0xad, 0x23, 0x74, 0x5a,
	0x12, 0xf6, 0xf7, 0xe2, 0x15, 0xb2, 0xf3, 0x87, 0x97, 0xc7, 0x2b, 0x96, 0x95, 0x7d, 0x73, 0x82,
	0xe3, 0x92, 0x15, 0x34, 0xba, 0xb1, 0x4b, 0x0e, 0xf3, 0xd7, 0xf2, 0xb7, 0xb5, 0x39, 0x4b, 0xea,
	0xbd, 0x51, 0x71, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x46, 0xaa, 0xad, 0x68, 0x47, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggingServiceClient is the client API for LoggingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingServiceClient interface {
	LogStream(ctx context.Context, opts ...grpc.CallOption) (LoggingService_LogStreamClient, error)
}

type loggingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingServiceClient(cc grpc.ClientConnInterface) LoggingServiceClient {
	return &loggingServiceClient{cc}
}

func (c *loggingServiceClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (LoggingService_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoggingService_serviceDesc.Streams[0], "/improbable.infra.logging.LoggingService/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggingServiceLogStreamClient{stream}
	return x, nil
}

type LoggingService_LogStreamClient interface {
	Send(*_struct.Struct) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type loggingServiceLogStreamClient struct {
	grpc.ClientStream
}

func (x *loggingServiceLogStreamClient) Send(m *_struct.Struct) error {
	return x.ClientStream.SendMsg(m)
}

func (x *loggingServiceLogStreamClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggingServiceServer is the server API for LoggingService service.
type LoggingServiceServer interface {
	LogStream(LoggingService_LogStreamServer) error
}

// UnimplementedLoggingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoggingServiceServer struct {
}

func (*UnimplementedLoggingServiceServer) LogStream(srv LoggingService_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}

func RegisterLoggingServiceServer(s *grpc.Server, srv LoggingServiceServer) {
	s.RegisterService(&_LoggingService_serviceDesc, srv)
}

func _LoggingService_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggingServiceServer).LogStream(&loggingServiceLogStreamServer{stream})
}

type LoggingService_LogStreamServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*_struct.Struct, error)
	grpc.ServerStream
}

type loggingServiceLogStreamServer struct {
	grpc.ServerStream
}

func (x *loggingServiceLogStreamServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *loggingServiceLogStreamServer) Recv() (*_struct.Struct, error) {
	m := new(_struct.Struct)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LoggingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.infra.logging.LoggingService",
	HandlerType: (*LoggingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogStream",
			Handler:       _LoggingService_LogStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "infra/logging/logging.proto",
}
