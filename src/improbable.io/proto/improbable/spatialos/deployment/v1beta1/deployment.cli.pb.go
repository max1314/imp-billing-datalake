// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/spatialos/deployment/v1beta1/deployment.proto

package deployment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/improbable/protoc-gen-gocli"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_spf13_cobra "github.com/spf13/cobra"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	google_golang_org_grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NewDeploymentService_CreateDeploymentCommand creates a *cobra.Command stub which will call GRPC service as defined
// in .proto file using protoc-gen-gocli annotations.
func NewDeploymentService_CreateDeploymentCommand(
	connectionFactory func() (*google_golang_org_grpc.ClientConn, error),
	ctxFactory func() context.Context,
	callOptionsFactory func() []google_golang_org_grpc.CallOption,
	responseHandler func(*github_com_spf13_cobra.Command, *longrunning.Operation) error,
) *github_com_spf13_cobra.Command {
	cmd := &github_com_spf13_cobra.Command{
		Use:        "create",
		Short:      "Start a deployment.",
		Long:       "",
		Example:    "",
		Deprecated: "",
		Hidden:     false,
	}
	cmd.RunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		conn, err := connectionFactory()
		if err != nil {
			return err
		}
		c := NewDeploymentServiceClient(conn)
		response, err := c.CreateDeployment(ctxFactory(), CreateDeploymentRequest_createCliRequest(cmd), callOptionsFactory()...)
		if err != nil {
			return err
		}
		return responseHandler(cmd, response)
	}
	CreateDeploymentRequest_addCliFlags(cmd)
	return cmd
}

// NewDeploymentService_DeleteDeploymentCommand creates a *cobra.Command stub which will call GRPC service as defined
// in .proto file using protoc-gen-gocli annotations.
func NewDeploymentService_DeleteDeploymentCommand(
	connectionFactory func() (*google_golang_org_grpc.ClientConn, error),
	ctxFactory func() context.Context,
	callOptionsFactory func() []google_golang_org_grpc.CallOption,
	responseHandler func(*github_com_spf13_cobra.Command, *longrunning.Operation) error,
) *github_com_spf13_cobra.Command {
	cmd := &github_com_spf13_cobra.Command{
		Use:        "delete",
		Short:      "Stop and delete a running deployment. You can call this at any point after you've called 'deployment create'.",
		Long:       "",
		Example:    "",
		Deprecated: "",
		Hidden:     false,
	}
	cmd.RunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		conn, err := connectionFactory()
		if err != nil {
			return err
		}
		c := NewDeploymentServiceClient(conn)
		response, err := c.DeleteDeployment(ctxFactory(), DeleteDeploymentRequest_createCliRequest(cmd), callOptionsFactory()...)
		if err != nil {
			return err
		}
		return responseHandler(cmd, response)
	}
	DeleteDeploymentRequest_addCliFlags(cmd)
	return cmd
}

// NewDeploymentService_ListDeploymentsCommand creates a *cobra.Command stub which will call GRPC service as defined
// in .proto file using protoc-gen-gocli annotations.
func NewDeploymentService_ListDeploymentsCommand(
	connectionFactory func() (*google_golang_org_grpc.ClientConn, error),
	ctxFactory func() context.Context,
	callOptionsFactory func() []google_golang_org_grpc.CallOption,
	responseHandler func(*github_com_spf13_cobra.Command, *ListDeploymentsResponse) error,
) *github_com_spf13_cobra.Command {
	cmd := &github_com_spf13_cobra.Command{
		Use:        "list",
		Short:      "Lists deployments under a given project.",
		Long:       "",
		Example:    "",
		Deprecated: "",
		Hidden:     false,
	}
	cmd.RunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		conn, err := connectionFactory()
		if err != nil {
			return err
		}
		c := NewDeploymentServiceClient(conn)
		response, err := c.ListDeployments(ctxFactory(), ListDeploymentsRequest_createCliRequest(cmd), callOptionsFactory()...)
		if err != nil {
			return err
		}
		return responseHandler(cmd, response)
	}
	ListDeploymentsRequest_addCliFlags(cmd)
	return cmd
}

// Deployment_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on Deployment message.
func Deployment_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// Deployment_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the Deployment message.
func Deployment_createCliRequest(cmd *github_com_spf13_cobra.Command) *Deployment {
	req := &Deployment{}
	return req
}

// WorkerCapacity_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on WorkerCapacity message.
func WorkerCapacity_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// WorkerCapacity_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the WorkerCapacity message.
func WorkerCapacity_createCliRequest(cmd *github_com_spf13_cobra.Command) *WorkerCapacity {
	req := &WorkerCapacity{}
	return req
}

// WorkerRateLimit_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on WorkerRateLimit message.
func WorkerRateLimit_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// WorkerRateLimit_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the WorkerRateLimit message.
func WorkerRateLimit_createCliRequest(cmd *github_com_spf13_cobra.Command) *WorkerRateLimit {
	req := &WorkerRateLimit{}
	return req
}

// addCliFlag_LaunchConfig_ConfigJson adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field ConfigJson in LaunchConfig message.
func addCliFlag_LaunchConfig_ConfigJson(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("launch-config", "c", "", "The deployment launch configuration, supplied as JSON. For information about the launch configuration, see the SpatialOS documentation.")
	cmd.MarkFlagRequired("launch-config")
}

// setFlagValue_LaunchConfig_ConfigJson sets the 'String' type flag value corresponding to ConfigJson field in
// LaunchConfig message.
func setFlagValue_LaunchConfig_ConfigJson(cmd *github_com_spf13_cobra.Command, req *LaunchConfig) {
	v, err := cmd.Flags().GetString("launch-config")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_LaunchConfig_ConfigJson: " + err.Error())
	}
	req.ConfigJson = v
}

// LaunchConfig_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on LaunchConfig message.
func LaunchConfig_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_LaunchConfig_ConfigJson(cmd)
}

// LaunchConfig_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the LaunchConfig message.
func LaunchConfig_createCliRequest(cmd *github_com_spf13_cobra.Command) *LaunchConfig {
	req := &LaunchConfig{}
	setFlagValue_LaunchConfig_ConfigJson(cmd, req)
	return req
}

// WorkerFlag_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on WorkerFlag message.
func WorkerFlag_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// WorkerFlag_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the WorkerFlag message.
func WorkerFlag_createCliRequest(cmd *github_com_spf13_cobra.Command) *WorkerFlag {
	req := &WorkerFlag{}
	return req
}

// SetDeploymentWorkerFlagsRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerFlagsRequest message.
func SetDeploymentWorkerFlagsRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerFlagsRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerFlagsRequest message.
func SetDeploymentWorkerFlagsRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerFlagsRequest {
	req := &SetDeploymentWorkerFlagsRequest{}
	return req
}

// SetDeploymentWorkerFlagsResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerFlagsResponse message.
func SetDeploymentWorkerFlagsResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerFlagsResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerFlagsResponse message.
func SetDeploymentWorkerFlagsResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerFlagsResponse {
	req := &SetDeploymentWorkerFlagsResponse{}
	return req
}

// SetDeploymentTagsRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentTagsRequest message.
func SetDeploymentTagsRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentTagsRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentTagsRequest message.
func SetDeploymentTagsRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentTagsRequest {
	req := &SetDeploymentTagsRequest{}
	return req
}

// SetDeploymentTagsResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentTagsResponse message.
func SetDeploymentTagsResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentTagsResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentTagsResponse message.
func SetDeploymentTagsResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentTagsResponse {
	req := &SetDeploymentTagsResponse{}
	return req
}

// SetDeploymentWorkerCapacitiesRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerCapacitiesRequest message.
func SetDeploymentWorkerCapacitiesRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerCapacitiesRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerCapacitiesRequest message.
func SetDeploymentWorkerCapacitiesRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerCapacitiesRequest {
	req := &SetDeploymentWorkerCapacitiesRequest{}
	return req
}

// SetDeploymentWorkerCapacitiesResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerCapacitiesResponse message.
func SetDeploymentWorkerCapacitiesResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerCapacitiesResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerCapacitiesResponse message.
func SetDeploymentWorkerCapacitiesResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerCapacitiesResponse {
	req := &SetDeploymentWorkerCapacitiesResponse{}
	return req
}

// SetDeploymentWorkerRateLimitsRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerRateLimitsRequest message.
func SetDeploymentWorkerRateLimitsRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerRateLimitsRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerRateLimitsRequest message.
func SetDeploymentWorkerRateLimitsRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerRateLimitsRequest {
	req := &SetDeploymentWorkerRateLimitsRequest{}
	return req
}

// SetDeploymentWorkerRateLimitsResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on SetDeploymentWorkerRateLimitsResponse message.
func SetDeploymentWorkerRateLimitsResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// SetDeploymentWorkerRateLimitsResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the SetDeploymentWorkerRateLimitsResponse message.
func SetDeploymentWorkerRateLimitsResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *SetDeploymentWorkerRateLimitsResponse {
	req := &SetDeploymentWorkerRateLimitsResponse{}
	return req
}

// addCliFlag_ListDeploymentsRequest_ProjectName adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field ProjectName in ListDeploymentsRequest message.
func addCliFlag_ListDeploymentsRequest_ProjectName(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("project_name", "p", "", "The project to list all deployments for. It must be lower case letters or numbers or underscores and 3-32 characters in length.")
	cmd.MarkFlagRequired("project_name")
}

// setFlagValue_ListDeploymentsRequest_ProjectName sets the 'String' type flag value corresponding to ProjectName field in
// ListDeploymentsRequest message.
func setFlagValue_ListDeploymentsRequest_ProjectName(cmd *github_com_spf13_cobra.Command, req *ListDeploymentsRequest) {
	v, err := cmd.Flags().GetString("project_name")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_ListDeploymentsRequest_ProjectName: " + err.Error())
	}
	req.ProjectName = v
}

// addCliFlag_ListDeploymentsRequest_PageSize adds CLI flag to provided 'cmd' of type 'Int32' which corresponds to
// flag defined for field PageSize in ListDeploymentsRequest message.
func addCliFlag_ListDeploymentsRequest_PageSize(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().Int32P("page_size", "", 20, "The maximum number of deployments to return in the response. It should be non-negative and smaller than 51.")

}

// setFlagValue_ListDeploymentsRequest_PageSize sets the 'Int32' type flag value corresponding to PageSize field in
// ListDeploymentsRequest message.
func setFlagValue_ListDeploymentsRequest_PageSize(cmd *github_com_spf13_cobra.Command, req *ListDeploymentsRequest) {
	v, err := cmd.Flags().GetInt32("page_size")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_ListDeploymentsRequest_PageSize: " + err.Error())
	}
	req.PageSize = v
}

// addCliFlag_ListDeploymentsRequest_PageToken adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field PageToken in ListDeploymentsRequest message.
func addCliFlag_ListDeploymentsRequest_PageToken(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("page_token", "", "", "The token to identify the starting point of the request.")

}

// setFlagValue_ListDeploymentsRequest_PageToken sets the 'String' type flag value corresponding to PageToken field in
// ListDeploymentsRequest message.
func setFlagValue_ListDeploymentsRequest_PageToken(cmd *github_com_spf13_cobra.Command, req *ListDeploymentsRequest) {
	v, err := cmd.Flags().GetString("page_token")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_ListDeploymentsRequest_PageToken: " + err.Error())
	}
	req.PageToken = v
}

// ListDeploymentsRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ListDeploymentsRequest message.
func ListDeploymentsRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_ListDeploymentsRequest_ProjectName(cmd)
	addCliFlag_ListDeploymentsRequest_PageSize(cmd)
	addCliFlag_ListDeploymentsRequest_PageToken(cmd)
}

// ListDeploymentsRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ListDeploymentsRequest message.
func ListDeploymentsRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *ListDeploymentsRequest {
	req := &ListDeploymentsRequest{}
	setFlagValue_ListDeploymentsRequest_ProjectName(cmd, req)
	setFlagValue_ListDeploymentsRequest_PageSize(cmd, req)
	setFlagValue_ListDeploymentsRequest_PageToken(cmd, req)
	return req
}

// ListDeploymentsResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ListDeploymentsResponse message.
func ListDeploymentsResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// ListDeploymentsResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ListDeploymentsResponse message.
func ListDeploymentsResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *ListDeploymentsResponse {
	req := &ListDeploymentsResponse{}
	return req
}

// addCliFlag_GetDeploymentRequest_View adds CLI flag to provided 'cmd' for enum type which corresponds to
// flag defined for field View in GetDeploymentRequest message.
func addCliFlag_GetDeploymentRequest_View(cmd *github_com_spf13_cobra.Command) {
	// Add pre-run validation of the flag value.
	originalPreRun := cmd.PreRunE
	cmd.PreRunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		flag, err := cmd.Flags().GetString("view")
		if err != nil {
			panic("Fatal error in generated CLI code in addCliFlag_GetDeploymentRequest_View: " + err.Error())
		}
		if flag != "" {
			if _, ok := ViewType_value[flag]; !ok {
				keys := make([]string, len(ViewType_value))
				i := 0
				for k := range ViewType_value {
					keys[i] = k
					i++
				}
				return fmt.Errorf("Invalid enum flag value: '%v'. Please use one of: %v", flag, keys)
			}
		}
		// Call the original pre run.
		if originalPreRun != nil {
			return originalPreRun(cmd, args)
		}
		return nil
	}

	// Add the flag as a string.
	cmd.Flags().StringP("view", "v", "BASIC", "The amount of information to be retrieved for the deployment. Use one of: BASIC or FULL. BASIC is quicker as it does not include WorkerFlags, WorkerConnectionCapacities, or WorkerConnectionRateLimits. FULL returns the complete deployment data.")

}

// setFlagValue_GetDeploymentRequest_View sets the enum type flag value corresponding to View field in
// GetDeploymentRequest message.
func setFlagValue_GetDeploymentRequest_View(cmd *github_com_spf13_cobra.Command, req *GetDeploymentRequest) {
	v, err := cmd.Flags().GetString("view")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_GetDeploymentRequest_View - missing flag: " + err.Error())
	}
	enumVal := int32(0)
	if v != "" {
		foundEnum, ok := ViewType_value[v]
		if !ok {
			panic(fmt.Errorf("Invalid enum flag value: '%v' - this should have been caught by pre-run validation."+
				"Was the pre-run check removed?", v))
		}
		enumVal = foundEnum
	}
	req.View = ViewType(enumVal)
}

// GetDeploymentRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on GetDeploymentRequest message.
func GetDeploymentRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_GetDeploymentRequest_View(cmd)
}

// GetDeploymentRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the GetDeploymentRequest message.
func GetDeploymentRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *GetDeploymentRequest {
	req := &GetDeploymentRequest{}
	setFlagValue_GetDeploymentRequest_View(cmd, req)
	return req
}

// GetDeploymentResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on GetDeploymentResponse message.
func GetDeploymentResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// GetDeploymentResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the GetDeploymentResponse message.
func GetDeploymentResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *GetDeploymentResponse {
	req := &GetDeploymentResponse{}
	return req
}

// addCliFlag_GetRunningDeploymentByNameRequest_View adds CLI flag to provided 'cmd' for enum type which corresponds to
// flag defined for field View in GetRunningDeploymentByNameRequest message.
func addCliFlag_GetRunningDeploymentByNameRequest_View(cmd *github_com_spf13_cobra.Command) {
	// Add pre-run validation of the flag value.
	originalPreRun := cmd.PreRunE
	cmd.PreRunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		flag, err := cmd.Flags().GetString("view")
		if err != nil {
			panic("Fatal error in generated CLI code in addCliFlag_GetRunningDeploymentByNameRequest_View: " + err.Error())
		}
		if flag != "" {
			if _, ok := ViewType_value[flag]; !ok {
				keys := make([]string, len(ViewType_value))
				i := 0
				for k := range ViewType_value {
					keys[i] = k
					i++
				}
				return fmt.Errorf("Invalid enum flag value: '%v'. Please use one of: %v", flag, keys)
			}
		}
		// Call the original pre run.
		if originalPreRun != nil {
			return originalPreRun(cmd, args)
		}
		return nil
	}

	// Add the flag as a string.
	cmd.Flags().StringP("view", "v", "BASIC", "The amount of information to be retrieved for the deployment. Use one of: BASIC or FULL. BASIC is quicker as it does not include WorkerFlags, WorkerConnectionCapacities, or WorkerConnectionRateLimits. FULL returns the complete deployment data.")

}

// setFlagValue_GetRunningDeploymentByNameRequest_View sets the enum type flag value corresponding to View field in
// GetRunningDeploymentByNameRequest message.
func setFlagValue_GetRunningDeploymentByNameRequest_View(cmd *github_com_spf13_cobra.Command, req *GetRunningDeploymentByNameRequest) {
	v, err := cmd.Flags().GetString("view")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_GetRunningDeploymentByNameRequest_View - missing flag: " + err.Error())
	}
	enumVal := int32(0)
	if v != "" {
		foundEnum, ok := ViewType_value[v]
		if !ok {
			panic(fmt.Errorf("Invalid enum flag value: '%v' - this should have been caught by pre-run validation."+
				"Was the pre-run check removed?", v))
		}
		enumVal = foundEnum
	}
	req.View = ViewType(enumVal)
}

// GetRunningDeploymentByNameRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on GetRunningDeploymentByNameRequest message.
func GetRunningDeploymentByNameRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_GetRunningDeploymentByNameRequest_View(cmd)
}

// GetRunningDeploymentByNameRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the GetRunningDeploymentByNameRequest message.
func GetRunningDeploymentByNameRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *GetRunningDeploymentByNameRequest {
	req := &GetRunningDeploymentByNameRequest{}
	setFlagValue_GetRunningDeploymentByNameRequest_View(cmd, req)
	return req
}

// addCliFlag_CreateDeploymentRequest_ProjectName adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field ProjectName in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_ProjectName(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("project_name", "p", "", "The name of the project this deployment belongs to. Read-only once created. It must be lower case letters or numbers or underscores and 3-32 characters in length.")
	cmd.MarkFlagRequired("project_name")
}

// setFlagValue_CreateDeploymentRequest_ProjectName sets the 'String' type flag value corresponding to ProjectName field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_ProjectName(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetString("project_name")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_ProjectName: " + err.Error())
	}
	req.ProjectName = v
}

// addCliFlag_CreateDeploymentRequest_DeploymentName adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field DeploymentName in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_DeploymentName(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("deployment_name", "n", "", "The name of the deployment. Read-only once created. You choose the deployment's name. It must be lower case letters or numbers or underscores and 3-32 characters in length.")
	cmd.MarkFlagRequired("deployment_name")
}

// setFlagValue_CreateDeploymentRequest_DeploymentName sets the 'String' type flag value corresponding to DeploymentName field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_DeploymentName(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetString("deployment_name")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_DeploymentName: " + err.Error())
	}
	req.DeploymentName = v
}

// addCliFlag_CreateDeploymentRequest_AssemblyName adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field AssemblyName in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_AssemblyName(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("assembly_name", "a", "", "The assembly to use for the deployment. Read-only once created. This parameter needs to be specified for the cloud and left empty locally.")

}

// setFlagValue_CreateDeploymentRequest_AssemblyName sets the 'String' type flag value corresponding to AssemblyName field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_AssemblyName(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetString("assembly_name")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_AssemblyName: " + err.Error())
	}
	req.AssemblyName = v
}

// addCliFlag_CreateDeploymentRequest_StartingSnapshotId adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field StartingSnapshotId in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_StartingSnapshotId(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("starting_snapshot_id", "s", "", "The starting snapshot for the deployment. Read-only once created. For cloud deployments, you must provide a starting snapshot. For local deployments, if you don't provide a starting snapshot, it uses the default.")

}

// setFlagValue_CreateDeploymentRequest_StartingSnapshotId sets the 'String' type flag value corresponding to StartingSnapshotId field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_StartingSnapshotId(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetString("starting_snapshot_id")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_StartingSnapshotId: " + err.Error())
	}
	req.StartingSnapshotId = v
}

// addCliFlag_CreateDeploymentRequest_Tags adds CLI flag to provided 'cmd' of type 'StringSlice' which corresponds to
// flag defined for field Tags in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_Tags(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringSliceP("tags", "", []string{}, "Comma separated list of strings associated with the deployment. A tag must be upper or lower case letters or numbers or underscores and 3-32 characters in length.")

}

// setFlagValue_CreateDeploymentRequest_Tags sets the 'StringSlice' type flag value corresponding to Tags field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_Tags(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetStringSlice("tags")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_Tags: " + err.Error())
	}
	req.Tags = v
}

// addCliFlag_CreateDeploymentRequest_RuntimeVersion adds CLI flag to provided 'cmd' of type 'String' which corresponds to
// flag defined for field RuntimeVersion in CreateDeploymentRequest message.
func addCliFlag_CreateDeploymentRequest_RuntimeVersion(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().StringP("runtime-version", "", "", "Specify a runtime version to start a deployment with. Defaults to using the latest stable released version.")

}

// setFlagValue_CreateDeploymentRequest_RuntimeVersion sets the 'String' type flag value corresponding to RuntimeVersion field in
// CreateDeploymentRequest message.
func setFlagValue_CreateDeploymentRequest_RuntimeVersion(cmd *github_com_spf13_cobra.Command, req *CreateDeploymentRequest) {
	v, err := cmd.Flags().GetString("runtime-version")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_CreateDeploymentRequest_RuntimeVersion: " + err.Error())
	}
	req.RuntimeVersion = v
}

// CreateDeploymentRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on CreateDeploymentRequest message.
func CreateDeploymentRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_CreateDeploymentRequest_ProjectName(cmd)
	addCliFlag_CreateDeploymentRequest_DeploymentName(cmd)
	addCliFlag_CreateDeploymentRequest_AssemblyName(cmd)
	addCliFlag_CreateDeploymentRequest_StartingSnapshotId(cmd)
	addCliFlag_CreateDeploymentRequest_Tags(cmd)
	addCliFlag_CreateDeploymentRequest_RuntimeVersion(cmd)
}

// CreateDeploymentRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the CreateDeploymentRequest message.
func CreateDeploymentRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *CreateDeploymentRequest {
	req := &CreateDeploymentRequest{}
	setFlagValue_CreateDeploymentRequest_ProjectName(cmd, req)
	setFlagValue_CreateDeploymentRequest_DeploymentName(cmd, req)
	setFlagValue_CreateDeploymentRequest_AssemblyName(cmd, req)
	setFlagValue_CreateDeploymentRequest_StartingSnapshotId(cmd, req)
	setFlagValue_CreateDeploymentRequest_Tags(cmd, req)
	setFlagValue_CreateDeploymentRequest_RuntimeVersion(cmd, req)
	return req
}

// CreateDeploymentMetadata_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on CreateDeploymentMetadata message.
func CreateDeploymentMetadata_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// CreateDeploymentMetadata_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the CreateDeploymentMetadata message.
func CreateDeploymentMetadata_createCliRequest(cmd *github_com_spf13_cobra.Command) *CreateDeploymentMetadata {
	req := &CreateDeploymentMetadata{}
	return req
}

// RestartDeploymentRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on RestartDeploymentRequest message.
func RestartDeploymentRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// RestartDeploymentRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the RestartDeploymentRequest message.
func RestartDeploymentRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *RestartDeploymentRequest {
	req := &RestartDeploymentRequest{}
	return req
}

// RestartDeploymentMetadata_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on RestartDeploymentMetadata message.
func RestartDeploymentMetadata_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// RestartDeploymentMetadata_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the RestartDeploymentMetadata message.
func RestartDeploymentMetadata_createCliRequest(cmd *github_com_spf13_cobra.Command) *RestartDeploymentMetadata {
	req := &RestartDeploymentMetadata{}
	return req
}

// addCliFlag_DeleteDeploymentRequest_Id adds CLI flag to provided 'cmd' of type 'Int64' which corresponds to
// flag defined for field Id in DeleteDeploymentRequest message.
func addCliFlag_DeleteDeploymentRequest_Id(cmd *github_com_spf13_cobra.Command) {
	cmd.Flags().Int64P("id", "i", 0, "ID of the deployment to stop.")
	cmd.MarkFlagRequired("id")
}

// setFlagValue_DeleteDeploymentRequest_Id sets the 'Int64' type flag value corresponding to Id field in
// DeleteDeploymentRequest message.
func setFlagValue_DeleteDeploymentRequest_Id(cmd *github_com_spf13_cobra.Command, req *DeleteDeploymentRequest) {
	v, err := cmd.Flags().GetInt64("id")
	if err != nil {
		panic("Fatal error in generated CLI code in setFlagValue_DeleteDeploymentRequest_Id: " + err.Error())
	}
	req.Id = v
}

// DeleteDeploymentRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on DeleteDeploymentRequest message.
func DeleteDeploymentRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {
	addCliFlag_DeleteDeploymentRequest_Id(cmd)
}

// DeleteDeploymentRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the DeleteDeploymentRequest message.
func DeleteDeploymentRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *DeleteDeploymentRequest {
	req := &DeleteDeploymentRequest{}
	setFlagValue_DeleteDeploymentRequest_Id(cmd, req)
	return req
}

// DeleteDeploymentMetadata_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on DeleteDeploymentMetadata message.
func DeleteDeploymentMetadata_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// DeleteDeploymentMetadata_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the DeleteDeploymentMetadata message.
func DeleteDeploymentMetadata_createCliRequest(cmd *github_com_spf13_cobra.Command) *DeleteDeploymentMetadata {
	req := &DeleteDeploymentMetadata{}
	return req
}

// Filter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on Filter message.
func Filter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// Filter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the Filter message.
func Filter_createCliRequest(cmd *github_com_spf13_cobra.Command) *Filter {
	req := &Filter{}
	return req
}

// StoppedStatusPropertyFilter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on StoppedStatusPropertyFilter message.
func StoppedStatusPropertyFilter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// StoppedStatusPropertyFilter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the StoppedStatusPropertyFilter message.
func StoppedStatusPropertyFilter_createCliRequest(cmd *github_com_spf13_cobra.Command) *StoppedStatusPropertyFilter {
	req := &StoppedStatusPropertyFilter{}
	return req
}

// DeploymentNamePropertyFilter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on DeploymentNamePropertyFilter message.
func DeploymentNamePropertyFilter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// DeploymentNamePropertyFilter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the DeploymentNamePropertyFilter message.
func DeploymentNamePropertyFilter_createCliRequest(cmd *github_com_spf13_cobra.Command) *DeploymentNamePropertyFilter {
	req := &DeploymentNamePropertyFilter{}
	return req
}

// TagsPropertyFilter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on TagsPropertyFilter message.
func TagsPropertyFilter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// TagsPropertyFilter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the TagsPropertyFilter message.
func TagsPropertyFilter_createCliRequest(cmd *github_com_spf13_cobra.Command) *TagsPropertyFilter {
	req := &TagsPropertyFilter{}
	return req
}

// CreateTimePropertyFilter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on CreateTimePropertyFilter message.
func CreateTimePropertyFilter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// CreateTimePropertyFilter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the CreateTimePropertyFilter message.
func CreateTimePropertyFilter_createCliRequest(cmd *github_com_spf13_cobra.Command) *CreateTimePropertyFilter {
	req := &CreateTimePropertyFilter{}
	return req
}

// StoppedTimePropertyFilter_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on StoppedTimePropertyFilter message.
func StoppedTimePropertyFilter_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// StoppedTimePropertyFilter_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the StoppedTimePropertyFilter message.
func StoppedTimePropertyFilter_createCliRequest(cmd *github_com_spf13_cobra.Command) *StoppedTimePropertyFilter {
	req := &StoppedTimePropertyFilter{}
	return req
}
