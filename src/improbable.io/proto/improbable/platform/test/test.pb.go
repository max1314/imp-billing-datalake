// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/test/test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ComplexNameValue     string   `protobuf:"bytes,2,opt,name=complex_name_value,json=complexNameValue,proto3" json:"complex_name_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca23ba4f70acc737, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PingRequest) GetComplexNameValue() string {
	if m != nil {
		return m.ComplexNameValue
	}
	return ""
}

type PongResponse struct {
	Value                string               `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ComplexNameValue     string               `protobuf:"bytes,4,opt,name=complex_name_value,json=complexNameValue,proto3" json:"complex_name_value,omitempty"`
	SomethingRandom      int32                `protobuf:"varint,2,opt,name=something_random,json=somethingRandom,proto3" json:"something_random,omitempty"`
	Now                  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=now,proto3" json:"now,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PongResponse) Reset()         { *m = PongResponse{} }
func (m *PongResponse) String() string { return proto.CompactTextString(m) }
func (*PongResponse) ProtoMessage()    {}
func (*PongResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca23ba4f70acc737, []int{1}
}

func (m *PongResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PongResponse.Unmarshal(m, b)
}
func (m *PongResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PongResponse.Marshal(b, m, deterministic)
}
func (m *PongResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongResponse.Merge(m, src)
}
func (m *PongResponse) XXX_Size() int {
	return xxx_messageInfo_PongResponse.Size(m)
}
func (m *PongResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PongResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PongResponse proto.InternalMessageInfo

func (m *PongResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PongResponse) GetComplexNameValue() string {
	if m != nil {
		return m.ComplexNameValue
	}
	return ""
}

func (m *PongResponse) GetSomethingRandom() int32 {
	if m != nil {
		return m.SomethingRandom
	}
	return 0
}

func (m *PongResponse) GetNow() *timestamp.Timestamp {
	if m != nil {
		return m.Now
	}
	return nil
}

type SyncRequest struct {
	Block                bool     `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	Notify               bool     `protobuf:"varint,2,opt,name=notify,proto3" json:"notify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca23ba4f70acc737, []int{2}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

func (m *SyncRequest) GetBlock() bool {
	if m != nil {
		return m.Block
	}
	return false
}

func (m *SyncRequest) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*PongResponse)(nil), "PongResponse")
	proto.RegisterType((*SyncRequest)(nil), "SyncRequest")
}

func init() {
	proto.RegisterFile("improbable/platform/test/test.proto", fileDescriptor_ca23ba4f70acc737)
}

var fileDescriptor_ca23ba4f70acc737 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0xcf, 0xf6, 0x5f, 0xe8, 0x40, 0x03, 0x4e, 0x84, 0x10, 0x34, 0xda, 0xe0, 0xa5, 0x51, 0xd8,
	0xa1, 0x98, 0xd4, 0xc4, 0x1e, 0x6a, 0x9a, 0x68, 0x62, 0xd2, 0x18, 0x5c, 0x9a, 0x1e, 0xbc, 0x90,
	0xd9, 0x65, 0xd8, 0x4e, 0xba, 0x33, 0x6f, 0xdd, 0x19, 0x40, 0x62, 0xbc, 0x78, 0xf6, 0xe6, 0xc1,
	0xbb, 0x57, 0xbf, 0x85, 0x5f, 0xc1, 0xaf, 0xe0, 0x07, 0x31, 0x33, 0xbb, 0xc0, 0x82, 0x62, 0xd2,
	0x0b, 0xd9, 0xf7, 0x7e, 0x7f, 0x78, 0xef, 0xf7, 0x60, 0xd1, 0x23, 0x2e, 0xe2, 0x04, 0x7c, 0xea,
	0x47, 0x8c, 0xc4, 0x11, 0xd5, 0x23, 0x48, 0x04, 0xd1, 0x4c, 0x69, 0xfb, 0xe1, 0xc6, 0x09, 0x68,
	0x68, 0x9c, 0x84, 0x5c, 0x5f, 0x8f, 0x7d, 0x37, 0x00, 0x41, 0xc4, 0x94, 0xeb, 0x1b, 0x98, 0x92,
	0x10, 0xda, 0x16, 0x6c, 0x4f, 0x68, 0xc4, 0x87, 0x54, 0x43, 0xa2, 0xc8, 0xe2, 0x31, 0xd3, 0xdd,
	0x0f, 0x01, 0xc2, 0x88, 0x11, 0x1a, 0x73, 0x42, 0xa5, 0x04, 0x4d, 0x35, 0x07, 0xa9, 0x32, 0xf4,
	0x5e, 0x86, 0xda, 0xca, 0x1f, 0x8f, 0x08, 0x13, 0xb1, 0x9e, 0x65, 0xe0, 0xc3, 0x75, 0x50, 0x73,
	0xc1, 0x94, 0xa6, 0x22, 0xce, 0x08, 0xa7, 0xb9, 0x99, 0x96, 0x3b, 0xb4, 0x39, 0x2c, 0x27, 0x8b,
	0x20, 0x1c, 0x71, 0x16, 0x0d, 0x15, 0x59, 0x3c, 0xa5, 0xe2, 0xe6, 0x5b, 0x54, 0xec, 0x71, 0x19,
	0x7a, 0xec, 0xfd, 0x98, 0x29, 0x8d, 0xef, 0xa2, 0xdd, 0x09, 0x8d, 0xc6, 0xac, 0xee, 0x1c, 0x3a,
	0x47, 0xfb, 0x5e, 0x5a, 0xe0, 0x16, 0xc2, 0x01, 0x88, 0x38, 0x62, 0x1f, 0x06, 0x92, 0x0a, 0x36,
	0x48, 0x29, 0x5b, 0x96, 0x52, 0xc9, 0x90, 0x37, 0x54, 0xb0, 0x2b, 0xd3, 0x6f, 0xfe, 0x74, 0x50,
	0xa9, 0x07, 0xc6, 0x53, 0xc5, 0x20, 0x15, 0xbb, 0x95, 0xe9, 0xce, 0xbf, 0x4d, 0xf1, 0x0b, 0x54,
	0x51, 0x20, 0x98, 0xbe, 0xe6, 0x32, 0x1c, 0x24, 0x54, 0x0e, 0x41, 0xd8, 0x01, 0x76, 0xcf, 0xab,
	0xdf, 0x7f, 0x3c, 0xb8, 0x83, 0xca, 0x06, 0xbd, 0x80, 0x30, 0x64, 0xc3, 0x57, 0x66, 0x3f, 0xaf,
	0xbc, 0xa0, 0x7b, 0x96, 0x8d, 0x5b, 0x68, 0x5b, 0xc2, 0xb4, 0xbe, 0x7d, 0xe8, 0x1c, 0x15, 0xbb,
	0x0d, 0x37, 0x4d, 0xd5, 0x9d, 0xa7, 0xea, 0x5e, 0xce, 0x53, 0xf5, 0x0c, 0xad, 0x79, 0x8a, 0x8a,
	0xfd, 0x99, 0x0c, 0x72, 0xb9, 0xf8, 0x11, 0x04, 0x37, 0x76, 0x85, 0x82, 0x97, 0x16, 0xb8, 0x86,
	0xf6, 0x24, 0x68, 0x3e, 0x9a, 0xd9, 0x51, 0x0a, 0x5e, 0x56, 0x75, 0xbf, 0x6d, 0xa1, 0xb2, 0x49,
	0xf5, 0x92, 0x29, 0xdd, 0x67, 0xc9, 0x84, 0x07, 0x0c, 0xbf, 0x46, 0xfb, 0x2f, 0xcd, 0x55, 0x4d,
	0x1f, 0xd7, 0xfe, 0xfa, 0x7a, 0x8b, 0x35, 0x0e, 0xdc, 0x7c, 0x70, 0xcd, 0xea, 0xe7, 0x5f, 0xbf,
	0xbf, 0x6e, 0x95, 0xf1, 0x41, 0xfa, 0x3b, 0x9c, 0x1c, 0x93, 0xd8, 0xa8, 0xaf, 0xd0, 0x8e, 0x75,
	0x29, 0xb9, 0xb9, 0xd3, 0xad, 0x6b, 0x8f, 0xad, 0xf6, 0x09, 0xae, 0xae, 0x68, 0xc9, 0x47, 0x1b,
	0xf3, 0xa7, 0x77, 0xb8, 0xb9, 0x6a, 0xfa, 0xdc, 0x79, 0x8c, 0x29, 0x2a, 0x18, 0xc3, 0x0b, 0xae,
	0xf4, 0xff, 0xbd, 0x4f, 0xac, 0x77, 0x07, 0xd7, 0x56, 0x2c, 0xd4, 0xc2, 0xbc, 0xb6, 0x6e, 0x9e,
	0x9e, 0xbc, 0xe3, 0x74, 0xbf, 0x38, 0xa8, 0xd2, 0xa3, 0x92, 0x07, 0xf9, 0x68, 0x9e, 0xa1, 0x5d,
	0xdb, 0xdb, 0x18, 0xcb, 0x86, 0x3e, 0x3e, 0x43, 0x45, 0x2b, 0xec, 0xeb, 0x84, 0x51, 0x71, 0x5b,
	0x79, 0xc7, 0xe9, 0x9e, 0xa1, 0xb2, 0xb9, 0x72, 0x7e, 0x98, 0x16, 0xda, 0x31, 0x2d, 0x5c, 0x72,
	0x73, 0xf7, 0xdf, 0x64, 0x71, 0xde, 0x40, 0xf5, 0xe5, 0x5f, 0xce, 0x9d, 0xbf, 0x36, 0x5c, 0xb3,
	0xbc, 0xbf, 0x67, 0xb9, 0x4f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x89, 0x42, 0xc3, 0xb1, 0x59,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PingTestServiceClient is the client API for PingTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingTestServiceClient interface {
	EmptyPing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PongResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingTestService_PingListClient, error)
}

type pingTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPingTestServiceClient(cc grpc.ClientConnInterface) PingTestServiceClient {
	return &pingTestServiceClient{cc}
}

func (c *pingTestServiceClient) EmptyPing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/PingTestService/EmptyPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingTestServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/PingTestService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingTestServiceClient) PingList(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingTestService_PingListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingTestService_serviceDesc.Streams[0], "/PingTestService/PingList", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingTestServicePingListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingTestService_PingListClient interface {
	Recv() (*PongResponse, error)
	grpc.ClientStream
}

type pingTestServicePingListClient struct {
	grpc.ClientStream
}

func (x *pingTestServicePingListClient) Recv() (*PongResponse, error) {
	m := new(PongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingTestServiceServer is the server API for PingTestService service.
type PingTestServiceServer interface {
	EmptyPing(context.Context, *empty.Empty) (*PongResponse, error)
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	PingList(*PingRequest, PingTestService_PingListServer) error
}

// UnimplementedPingTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPingTestServiceServer struct {
}

func (*UnimplementedPingTestServiceServer) EmptyPing(ctx context.Context, req *empty.Empty) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyPing not implemented")
}
func (*UnimplementedPingTestServiceServer) Ping(ctx context.Context, req *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPingTestServiceServer) PingList(req *PingRequest, srv PingTestService_PingListServer) error {
	return status.Errorf(codes.Unimplemented, "method PingList not implemented")
}

func RegisterPingTestServiceServer(s *grpc.Server, srv PingTestServiceServer) {
	s.RegisterService(&_PingTestService_serviceDesc, srv)
}

func _PingTestService_EmptyPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingTestServiceServer).EmptyPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PingTestService/EmptyPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingTestServiceServer).EmptyPing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingTestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingTestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PingTestService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingTestServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingTestService_PingList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingTestServiceServer).PingList(m, &pingTestServicePingListServer{stream})
}

type PingTestService_PingListServer interface {
	Send(*PongResponse) error
	grpc.ServerStream
}

type pingTestServicePingListServer struct {
	grpc.ServerStream
}

func (x *pingTestServicePingListServer) Send(m *PongResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PingTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PingTestService",
	HandlerType: (*PingTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyPing",
			Handler:    _PingTestService_EmptyPing_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PingTestService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingList",
			Handler:       _PingTestService_PingList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/test/test.proto",
}

// PanicTestServiceClient is the client API for PanicTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PanicTestServiceClient interface {
	Panic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	PanicStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PanicTestService_PanicStreamClient, error)
}

type panicTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanicTestServiceClient(cc grpc.ClientConnInterface) PanicTestServiceClient {
	return &panicTestServiceClient{cc}
}

func (c *panicTestServiceClient) Panic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/PanicTestService/Panic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panicTestServiceClient) PanicStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PanicTestService_PanicStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PanicTestService_serviceDesc.Streams[0], "/PanicTestService/PanicStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &panicTestServicePanicStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PanicTestService_PanicStreamClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type panicTestServicePanicStreamClient struct {
	grpc.ClientStream
}

func (x *panicTestServicePanicStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PanicTestServiceServer is the server API for PanicTestService service.
type PanicTestServiceServer interface {
	Panic(context.Context, *empty.Empty) (*empty.Empty, error)
	PanicStream(*empty.Empty, PanicTestService_PanicStreamServer) error
}

// UnimplementedPanicTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPanicTestServiceServer struct {
}

func (*UnimplementedPanicTestServiceServer) Panic(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Panic not implemented")
}
func (*UnimplementedPanicTestServiceServer) PanicStream(req *empty.Empty, srv PanicTestService_PanicStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PanicStream not implemented")
}

func RegisterPanicTestServiceServer(s *grpc.Server, srv PanicTestServiceServer) {
	s.RegisterService(&_PanicTestService_serviceDesc, srv)
}

func _PanicTestService_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanicTestServiceServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PanicTestService/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanicTestServiceServer).Panic(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PanicTestService_PanicStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PanicTestServiceServer).PanicStream(m, &panicTestServicePanicStreamServer{stream})
}

type PanicTestService_PanicStreamServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type panicTestServicePanicStreamServer struct {
	grpc.ServerStream
}

func (x *panicTestServicePanicStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

var _PanicTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PanicTestService",
	HandlerType: (*PanicTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Panic",
			Handler:    _PanicTestService_Panic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PanicStream",
			Handler:       _PanicTestService_PanicStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/test/test.proto",
}

// SyncTestServiceClient is the client API for SyncTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncTestServiceClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type syncTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncTestServiceClient(cc grpc.ClientConnInterface) SyncTestServiceClient {
	return &syncTestServiceClient{cc}
}

func (c *syncTestServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SyncTestService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncTestServiceServer is the server API for SyncTestService service.
type SyncTestServiceServer interface {
	Sync(context.Context, *SyncRequest) (*empty.Empty, error)
}

// UnimplementedSyncTestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSyncTestServiceServer struct {
}

func (*UnimplementedSyncTestServiceServer) Sync(ctx context.Context, req *SyncRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterSyncTestServiceServer(s *grpc.Server, srv SyncTestServiceServer) {
	s.RegisterService(&_SyncTestService_serviceDesc, srv)
}

func _SyncTestService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncTestServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SyncTestService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncTestServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SyncTestService",
	HandlerType: (*SyncTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _SyncTestService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "improbable/platform/test/test.proto",
}
