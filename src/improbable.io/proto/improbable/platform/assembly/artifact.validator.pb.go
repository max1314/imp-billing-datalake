// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/assembly/artifact.proto

package improbable_platform_assembly

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	_ "improbable.io/proto/improbable/platform"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_ArtifactId_Name = regexp.MustCompile(`^[a-zA-Z0-9_@.-]{2,128}$`)

func (this *ArtifactId) Validate() error {
	if nil == this.AssemblyId {
		return github_com_mwitkow_go_proto_validators.FieldError("AssemblyId", fmt.Errorf("message must exist"))
	}
	if this.AssemblyId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AssemblyId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AssemblyId", err)
		}
	}
	if !_regex_ArtifactId_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_@.-]{2,128}$"`, this.Name))
	}
	return nil
}
func (this *Artifact) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	if this.CreationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTime", err)
		}
	}
	return nil
}

var _regex_ArtifactUploadUrl_Url = regexp.MustCompile(`^https?://.*$`)

func (this *ArtifactUploadUrl) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	if !_regex_ArtifactUploadUrl_Url.MatchString(this.Url) {
		return github_com_mwitkow_go_proto_validators.FieldError("Url", fmt.Errorf(`value '%v' must be a string conforming to regex "^https?://.*$"`, this.Url))
	}
	return nil
}
func (this *ArtifactListRequest) Validate() error {
	if nil == this.AssemblyId {
		return github_com_mwitkow_go_proto_validators.FieldError("AssemblyId", fmt.Errorf("message must exist"))
	}
	if this.AssemblyId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AssemblyId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AssemblyId", err)
		}
	}
	return nil
}
func (this *ListSupportedFileStorageProvidersRequest) Validate() error {
	return nil
}
func (this *ListSupportedFileStorageProvidersResponse) Validate() error {
	return nil
}
func (this *CreateResumableRequest) Validate() error {
	if nil == this.Artifact {
		return github_com_mwitkow_go_proto_validators.FieldError("Artifact", fmt.Errorf("message must exist"))
	}
	if this.Artifact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Artifact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Artifact", err)
		}
	}
	return nil
}
func (this *CreateResumableResponse) Validate() error {
	return nil
}
func (this *CreateMultipartRequest) Validate() error {
	if nil == this.Artifact {
		return github_com_mwitkow_go_proto_validators.FieldError("Artifact", fmt.Errorf("message must exist"))
	}
	if this.Artifact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Artifact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Artifact", err)
		}
	}
	return nil
}
func (this *CreateMultipartResponse) Validate() error {
	return nil
}
