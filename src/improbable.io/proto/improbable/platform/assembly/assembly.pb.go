// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/assembly/assembly.proto

package improbable_platform_assembly

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	platform "improbable.io/proto/improbable/platform"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AssemblyId struct {
	ProjectId            *platform.ProjectId `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AssemblyId) Reset()         { *m = AssemblyId{} }
func (m *AssemblyId) String() string { return proto.CompactTextString(m) }
func (*AssemblyId) ProtoMessage()    {}
func (*AssemblyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aec812917a70120, []int{0}
}

func (m *AssemblyId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssemblyId.Unmarshal(m, b)
}
func (m *AssemblyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssemblyId.Marshal(b, m, deterministic)
}
func (m *AssemblyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssemblyId.Merge(m, src)
}
func (m *AssemblyId) XXX_Size() int {
	return xxx_messageInfo_AssemblyId.Size(m)
}
func (m *AssemblyId) XXX_DiscardUnknown() {
	xxx_messageInfo_AssemblyId.DiscardUnknown(m)
}

var xxx_messageInfo_AssemblyId proto.InternalMessageInfo

func (m *AssemblyId) GetProjectId() *platform.ProjectId {
	if m != nil {
		return m.ProjectId
	}
	return nil
}

func (m *AssemblyId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Assembly struct {
	AssemblyId           *AssemblyId          `protobuf:"bytes,1,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"`
	CreatorEmail         string               `protobuf:"bytes,2,opt,name=creator_email,json=creatorEmail,proto3" json:"creator_email,omitempty"`
	CreationTime         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	SpatialOsVersion     string               `protobuf:"bytes,4,opt,name=spatial_os_version,json=spatialOsVersion,proto3" json:"spatial_os_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Assembly) Reset()         { *m = Assembly{} }
func (m *Assembly) String() string { return proto.CompactTextString(m) }
func (*Assembly) ProtoMessage()    {}
func (*Assembly) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aec812917a70120, []int{1}
}

func (m *Assembly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Assembly.Unmarshal(m, b)
}
func (m *Assembly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Assembly.Marshal(b, m, deterministic)
}
func (m *Assembly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assembly.Merge(m, src)
}
func (m *Assembly) XXX_Size() int {
	return xxx_messageInfo_Assembly.Size(m)
}
func (m *Assembly) XXX_DiscardUnknown() {
	xxx_messageInfo_Assembly.DiscardUnknown(m)
}

var xxx_messageInfo_Assembly proto.InternalMessageInfo

func (m *Assembly) GetAssemblyId() *AssemblyId {
	if m != nil {
		return m.AssemblyId
	}
	return nil
}

func (m *Assembly) GetCreatorEmail() string {
	if m != nil {
		return m.CreatorEmail
	}
	return ""
}

func (m *Assembly) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Assembly) GetSpatialOsVersion() string {
	if m != nil {
		return m.SpatialOsVersion
	}
	return ""
}

type AssemblyUpdateRequest struct {
	AssemblyId           *AssemblyId `protobuf:"bytes,1,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"`
	SpatialOsVersion     string      `protobuf:"bytes,2,opt,name=spatial_os_version,json=spatialOsVersion,proto3" json:"spatial_os_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AssemblyUpdateRequest) Reset()         { *m = AssemblyUpdateRequest{} }
func (m *AssemblyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*AssemblyUpdateRequest) ProtoMessage()    {}
func (*AssemblyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aec812917a70120, []int{2}
}

func (m *AssemblyUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssemblyUpdateRequest.Unmarshal(m, b)
}
func (m *AssemblyUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssemblyUpdateRequest.Marshal(b, m, deterministic)
}
func (m *AssemblyUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssemblyUpdateRequest.Merge(m, src)
}
func (m *AssemblyUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_AssemblyUpdateRequest.Size(m)
}
func (m *AssemblyUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssemblyUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssemblyUpdateRequest proto.InternalMessageInfo

func (m *AssemblyUpdateRequest) GetAssemblyId() *AssemblyId {
	if m != nil {
		return m.AssemblyId
	}
	return nil
}

func (m *AssemblyUpdateRequest) GetSpatialOsVersion() string {
	if m != nil {
		return m.SpatialOsVersion
	}
	return ""
}

type AssemblyUpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssemblyUpdateResponse) Reset()         { *m = AssemblyUpdateResponse{} }
func (m *AssemblyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*AssemblyUpdateResponse) ProtoMessage()    {}
func (*AssemblyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8aec812917a70120, []int{3}
}

func (m *AssemblyUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssemblyUpdateResponse.Unmarshal(m, b)
}
func (m *AssemblyUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssemblyUpdateResponse.Marshal(b, m, deterministic)
}
func (m *AssemblyUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssemblyUpdateResponse.Merge(m, src)
}
func (m *AssemblyUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_AssemblyUpdateResponse.Size(m)
}
func (m *AssemblyUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssemblyUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssemblyUpdateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AssemblyId)(nil), "improbable.platform.assembly.AssemblyId")
	proto.RegisterType((*Assembly)(nil), "improbable.platform.assembly.Assembly")
	proto.RegisterType((*AssemblyUpdateRequest)(nil), "improbable.platform.assembly.AssemblyUpdateRequest")
	proto.RegisterType((*AssemblyUpdateResponse)(nil), "improbable.platform.assembly.AssemblyUpdateResponse")
}

func init() {
	proto.RegisterFile("improbable/platform/assembly/assembly.proto", fileDescriptor_8aec812917a70120)
}

var fileDescriptor_8aec812917a70120 = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xce, 0x16, 0xd2, 0xdf, 0x8f, 0x01, 0xc4, 0x8c, 0x81, 0x34, 0x2b, 0xd2, 0x66, 0x41, 0x28,
	0xe0, 0xee, 0x10, 0x40, 0x12, 0x50, 0x83, 0x80, 0xc4, 0x90, 0x98, 0x28, 0x45, 0x4d, 0x94, 0x3f,
	0xcd, 0xb4, 0x1d, 0xca, 0xe0, 0xce, 0xce, 0xba, 0x33, 0x2d, 0x2a, 0xe9, 0x8d, 0xaf, 0x60, 0x62,
	0x94, 0x1b, 0x12, 0x6f, 0xb9, 0xf6, 0xc2, 0x0b, 0xaf, 0x7c, 0x04, 0x1f, 0x00, 0x43, 0x78, 0x10,
	0xb3, 0xdb, 0xd9, 0x2e, 0x85, 0xaa, 0x6d, 0x8c, 0x57, 0x33, 0x3d, 0xe7, 0x7c, 0xa7, 0xdf, 0xf9,
	0xbe, 0x33, 0x0b, 0xc6, 0x29, 0x73, 0x3d, 0x9e, 0xc3, 0x39, 0x9b, 0x20, 0xd7, 0xc6, 0x72, 0x9b,
	0x7b, 0x0c, 0x61, 0x21, 0x08, 0xcb, 0xd9, 0xaf, 0x6b, 0x17, 0xcb, 0xf5, 0xb8, 0xe4, 0xb0, 0x3f,
	0x2a, 0xb6, 0xc2, 0x62, 0x2b, 0xac, 0xd1, 0x53, 0x8d, 0x5a, 0xe5, 0x39, 0x63, 0xdc, 0xa9, 0xe2,
	0xf5, 0x99, 0x22, 0x95, 0x3b, 0xa5, 0x9c, 0x95, 0xe7, 0x0c, 0xb1, 0x3d, 0x2a, 0x5f, 0xf0, 0x3d,
	0x54, 0xe4, 0x66, 0x90, 0x34, 0xcb, 0xd8, 0xa6, 0x05, 0x2c, 0xb9, 0x27, 0x50, 0xed, 0xaa, 0x70,
	0xfd, 0x45, 0xce, 0x8b, 0x36, 0x41, 0xd8, 0xa5, 0x08, 0x3b, 0x0e, 0x97, 0x58, 0x52, 0xee, 0x08,
	0x95, 0xbd, 0xaa, 0xb2, 0xc1, 0xaf, 0x5c, 0x69, 0x1b, 0x11, 0xe6, 0x4a, 0x45, 0x59, 0x4f, 0x9e,
	0x4f, 0x4a, 0xca, 0x88, 0x90, 0x98, 0xb9, 0xaa, 0xe0, 0xd6, 0x19, 0x4e, 0xd1, 0x00, 0x26, 0xe5,
	0x11, 0x33, 0x9b, 0x17, 0xb7, 0x29, 0xb1, 0x0b, 0x02, 0xd5, 0x6e, 0x0a, 0x3c, 0x7c, 0x66, 0x64,
	0xf2, 0x4a, 0x22, 0xd7, 0x2e, 0x15, 0xa9, 0x83, 0x70, 0x49, 0xee, 0x20, 0x97, 0x78, 0x4c, 0xd5,
	0x19, 0x1f, 0x34, 0x00, 0x16, 0x94, 0x4e, 0x2b, 0x05, 0xb8, 0x0c, 0x80, 0xeb, 0xf1, 0x5d, 0x92,
	0x97, 0x59, 0x5a, 0x48, 0x68, 0x29, 0x2d, 0xdd, 0x39, 0x39, 0x60, 0x35, 0x12, 0xf7, 0x51, 0xb5,
	0x6c, 0xa5, 0xb0, 0x18, 0x3f, 0x39, 0x4e, 0xc6, 0x52, 0x5a, 0xa6, 0xc3, 0x0d, 0x43, 0x70, 0x09,
	0xb4, 0x3b, 0x98, 0x91, 0x44, 0x2c, 0xa5, 0xa5, 0x3b, 0x16, 0xd1, 0xa7, 0xa3, 0x81, 0x1e, 0xd0,
	0x1d, 0xda, 0x91, 0xf5, 0x53, 0x27, 0xc7, 0xc9, 0x04, 0xe8, 0xdb, 0x5a, 0xc7, 0xe6, 0x9b, 0x05,
	0xf3, 0xf9, 0x84, 0x39, 0x9b, 0xb5, 0xcc, 0xcd, 0xfd, 0x9b, 0x37, 0x66, 0xa6, 0x2b, 0x43, 0x99,
	0x00, 0x6c, 0xbc, 0x8f, 0x81, 0xff, 0x43, 0x6a, 0x70, 0x15, 0x74, 0xd6, 0xf0, 0x35, 0x66, 0x69,
	0xeb, 0x77, 0xb6, 0x5b, 0xd1, 0x5c, 0x35, 0x8e, 0x00, 0x47, 0xb3, 0x0e, 0x82, 0xee, 0xbc, 0x47,
	0x7c, 0x33, 0xb3, 0x84, 0x61, 0x6a, 0x57, 0xd9, 0x66, 0xba, 0x54, 0x70, 0xd9, 0x8f, 0xc1, 0x79,
	0x55, 0x44, 0xb9, 0x93, 0xf5, 0x0d, 0x4a, 0xb4, 0x05, 0xff, 0xac, 0x5b, 0x55, 0xf7, 0xac, 0xd0,
	0x3d, 0xeb, 0x71, 0xe8, 0x9e, 0x6a, 0x40, 0xb9, 0xe3, 0x87, 0xe0, 0x2a, 0x80, 0xc2, 0xc5, 0x92,
	0x62, 0x3b, 0xcb, 0x45, 0xb6, 0x4c, 0x3c, 0x41, 0xb9, 0x93, 0x68, 0x0f, 0x84, 0x19, 0x3c, 0x39,
	0x4e, 0x26, 0xc1, 0xb5, 0xad, 0xf4, 0x46, 0x61, 0x7c, 0x34, 0xbd, 0x61, 0xf9, 0xc7, 0x7c, 0xed,
	0x34, 0xad, 0xf1, 0xd1, 0xf9, 0xa1, 0xcc, 0x65, 0x05, 0x7f, 0x28, 0x9e, 0x56, 0xc1, 0xc6, 0x57,
	0x0d, 0xf4, 0x86, 0xb3, 0x3d, 0x71, 0x0b, 0x58, 0x92, 0x0c, 0x79, 0x59, 0x22, 0x42, 0xfe, 0x0b,
	0x95, 0x1a, 0xf3, 0x8f, 0xfd, 0x0d, 0xff, 0x04, 0xe8, 0x3b, 0x4f, 0x5f, 0xb8, 0xdc, 0x11, 0x64,
	0xf2, 0xc7, 0x7f, 0xa0, 0x27, 0x4c, 0xad, 0x11, 0xaf, 0x4c, 0xf3, 0x04, 0x9e, 0x6a, 0x20, 0xbe,
	0xe4, 0x2b, 0x4a, 0xe0, 0x70, 0x73, 0x93, 0xe8, 0x7d, 0x17, 0xdc, 0x59, 0xf6, 0x1f, 0x9e, 0xf1,
	0x51, 0x3b, 0x38, 0x34, 0x6e, 0x83, 0x4b, 0x21, 0x42, 0xb5, 0x1d, 0x5b, 0xdf, 0xdb, 0x9c, 0x73,
	0xbd, 0x5d, 0xb4, 0x8f, 0xbd, 0x62, 0xf0, 0x30, 0xfc, 0x35, 0xae, 0x20, 0x2c, 0x98, 0x0a, 0x85,
	0x80, 0xca, 0xdb, 0xef, 0xa7, 0xef, 0x62, 0x6b, 0xfa, 0x9d, 0xe8, 0x43, 0x54, 0x9e, 0x42, 0xfb,
	0x67, 0x34, 0xb7, 0xa2, 0xe7, 0x63, 0xf9, 0x5b, 0x5c, 0xa9, 0xcf, 0x06, 0xa1, 0xb9, 0x06, 0x8a,
	0xc2, 0xcf, 0x1a, 0x88, 0x57, 0xd5, 0x80, 0x53, 0xcd, 0x8d, 0x59, 0x67, 0xbd, 0x3e, 0xdd, 0x1a,
	0xa8, 0x2a, 0xb8, 0x71, 0xb7, 0x5e, 0x10, 0x45, 0xa0, 0x05, 0x41, 0xe0, 0x37, 0x0d, 0xb4, 0xdd,
	0x27, 0x12, 0x36, 0xbd, 0x65, 0x7a, 0x93, 0x2e, 0x1a, 0xbb, 0x07, 0x87, 0xc6, 0x6c, 0xb4, 0xd0,
	0xfe, 0x9f, 0x8c, 0xad, 0x7b, 0x2d, 0x39, 0x35, 0x02, 0xaf, 0xd7, 0x3b, 0x75, 0xd1, 0x9d, 0xe0,
	0x80, 0x5f, 0x34, 0x10, 0xbf, 0x47, 0x6c, 0x22, 0x49, 0x0b, 0x83, 0xfc, 0x6a, 0xcd, 0x58, 0xbd,
	0xa8, 0xaa, 0x6f, 0xab, 0x5b, 0x36, 0x32, 0xd6, 0x24, 0xf7, 0x23, 0x0d, 0xb4, 0x3f, 0xa0, 0x42,
	0xc2, 0x3f, 0x7c, 0xa8, 0x9b, 0x16, 0xfe, 0xd9, 0xc1, 0xa1, 0x31, 0x07, 0xba, 0xc2, 0x44, 0xd0,
	0xbb, 0x55, 0xe5, 0x7b, 0xe1, 0x95, 0x7a, 0xf6, 0x01, 0xd7, 0x09, 0x2d, 0x17, 0x0f, 0xc4, 0x9a,
	0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0x62, 0x2d, 0xc2, 0xd7, 0xdf, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AssemblyServiceClient is the client API for AssemblyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssemblyServiceClient interface {
	Create(ctx context.Context, in *Assembly, opts ...grpc.CallOption) (*empty.Empty, error)
	Update(ctx context.Context, in *AssemblyUpdateRequest, opts ...grpc.CallOption) (*AssemblyUpdateResponse, error)
	Get(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*Assembly, error)
	Delete(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *platform.ProjectId, opts ...grpc.CallOption) (AssemblyService_ListClient, error)
}

type assemblyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssemblyServiceClient(cc grpc.ClientConnInterface) AssemblyServiceClient {
	return &assemblyServiceClient{cc}
}

func (c *assemblyServiceClient) Create(ctx context.Context, in *Assembly, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) Update(ctx context.Context, in *AssemblyUpdateRequest, opts ...grpc.CallOption) (*AssemblyUpdateResponse, error) {
	out := new(AssemblyUpdateResponse)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) Get(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*Assembly, error) {
	out := new(Assembly)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) Delete(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) List(ctx context.Context, in *platform.ProjectId, opts ...grpc.CallOption) (AssemblyService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AssemblyService_serviceDesc.Streams[0], "/improbable.platform.assembly.AssemblyService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &assemblyServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssemblyService_ListClient interface {
	Recv() (*Assembly, error)
	grpc.ClientStream
}

type assemblyServiceListClient struct {
	grpc.ClientStream
}

func (x *assemblyServiceListClient) Recv() (*Assembly, error) {
	m := new(Assembly)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssemblyServiceServer is the server API for AssemblyService service.
type AssemblyServiceServer interface {
	Create(context.Context, *Assembly) (*empty.Empty, error)
	Update(context.Context, *AssemblyUpdateRequest) (*AssemblyUpdateResponse, error)
	Get(context.Context, *AssemblyId) (*Assembly, error)
	Delete(context.Context, *AssemblyId) (*empty.Empty, error)
	List(*platform.ProjectId, AssemblyService_ListServer) error
}

// UnimplementedAssemblyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAssemblyServiceServer struct {
}

func (*UnimplementedAssemblyServiceServer) Create(ctx context.Context, req *Assembly) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAssemblyServiceServer) Update(ctx context.Context, req *AssemblyUpdateRequest) (*AssemblyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAssemblyServiceServer) Get(ctx context.Context, req *AssemblyId) (*Assembly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAssemblyServiceServer) Delete(ctx context.Context, req *AssemblyId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAssemblyServiceServer) List(req *platform.ProjectId, srv AssemblyService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterAssemblyServiceServer(s *grpc.Server, srv AssemblyServiceServer) {
	s.RegisterService(&_AssemblyService_serviceDesc, srv)
}

func _AssemblyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assembly)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).Create(ctx, req.(*Assembly))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).Update(ctx, req.(*AssemblyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).Get(ctx, req.(*AssemblyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).Delete(ctx, req.(*AssemblyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(platform.ProjectId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssemblyServiceServer).List(m, &assemblyServiceListServer{stream})
}

type AssemblyService_ListServer interface {
	Send(*Assembly) error
	grpc.ServerStream
}

type assemblyServiceListServer struct {
	grpc.ServerStream
}

func (x *assemblyServiceListServer) Send(m *Assembly) error {
	return x.ServerStream.SendMsg(m)
}

var _AssemblyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.assembly.AssemblyService",
	HandlerType: (*AssemblyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AssemblyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AssemblyService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AssemblyService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AssemblyService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _AssemblyService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/assembly/assembly.proto",
}
