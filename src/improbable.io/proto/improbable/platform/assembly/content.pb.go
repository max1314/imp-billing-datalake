// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/assembly/content.proto

package improbable_platform_assembly

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ContentArtifact struct {
	ArtifactId           *ArtifactId `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	Url                  string      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Md5                  string      `protobuf:"bytes,3,opt,name=md5,proto3" json:"md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContentArtifact) Reset()         { *m = ContentArtifact{} }
func (m *ContentArtifact) String() string { return proto.CompactTextString(m) }
func (*ContentArtifact) ProtoMessage()    {}
func (*ContentArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8698664332d9fbe, []int{0}
}

func (m *ContentArtifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContentArtifact.Unmarshal(m, b)
}
func (m *ContentArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContentArtifact.Marshal(b, m, deterministic)
}
func (m *ContentArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentArtifact.Merge(m, src)
}
func (m *ContentArtifact) XXX_Size() int {
	return xxx_messageInfo_ContentArtifact.Size(m)
}
func (m *ContentArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_ContentArtifact proto.InternalMessageInfo

func (m *ContentArtifact) GetArtifactId() *ArtifactId {
	if m != nil {
		return m.ArtifactId
	}
	return nil
}

func (m *ContentArtifact) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ContentArtifact) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

type BatchGetResponse struct {
	Artifacts            []*ContentArtifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BatchGetResponse) Reset()         { *m = BatchGetResponse{} }
func (m *BatchGetResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetResponse) ProtoMessage()    {}
func (*BatchGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8698664332d9fbe, []int{1}
}

func (m *BatchGetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetResponse.Unmarshal(m, b)
}
func (m *BatchGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetResponse.Marshal(b, m, deterministic)
}
func (m *BatchGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetResponse.Merge(m, src)
}
func (m *BatchGetResponse) XXX_Size() int {
	return xxx_messageInfo_BatchGetResponse.Size(m)
}
func (m *BatchGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetResponse proto.InternalMessageInfo

func (m *BatchGetResponse) GetArtifacts() []*ContentArtifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type GetArtifactRequest struct {
	ArtifactId           *ArtifactId `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	LoginToken           string      `protobuf:"bytes,2,opt,name=login_token,json=loginToken,proto3" json:"login_token,omitempty"`
	PlayerIdentityToken  string      `protobuf:"bytes,3,opt,name=player_identity_token,json=playerIdentityToken,proto3" json:"player_identity_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetArtifactRequest) Reset()         { *m = GetArtifactRequest{} }
func (m *GetArtifactRequest) String() string { return proto.CompactTextString(m) }
func (*GetArtifactRequest) ProtoMessage()    {}
func (*GetArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8698664332d9fbe, []int{2}
}

func (m *GetArtifactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetArtifactRequest.Unmarshal(m, b)
}
func (m *GetArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetArtifactRequest.Marshal(b, m, deterministic)
}
func (m *GetArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArtifactRequest.Merge(m, src)
}
func (m *GetArtifactRequest) XXX_Size() int {
	return xxx_messageInfo_GetArtifactRequest.Size(m)
}
func (m *GetArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArtifactRequest proto.InternalMessageInfo

func (m *GetArtifactRequest) GetArtifactId() *ArtifactId {
	if m != nil {
		return m.ArtifactId
	}
	return nil
}

func (m *GetArtifactRequest) GetLoginToken() string {
	if m != nil {
		return m.LoginToken
	}
	return ""
}

func (m *GetArtifactRequest) GetPlayerIdentityToken() string {
	if m != nil {
		return m.PlayerIdentityToken
	}
	return ""
}

type GetArtifactResponse struct {
	Artifact             *ContentArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetArtifactResponse) Reset()         { *m = GetArtifactResponse{} }
func (m *GetArtifactResponse) String() string { return proto.CompactTextString(m) }
func (*GetArtifactResponse) ProtoMessage()    {}
func (*GetArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8698664332d9fbe, []int{3}
}

func (m *GetArtifactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetArtifactResponse.Unmarshal(m, b)
}
func (m *GetArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetArtifactResponse.Marshal(b, m, deterministic)
}
func (m *GetArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArtifactResponse.Merge(m, src)
}
func (m *GetArtifactResponse) XXX_Size() int {
	return xxx_messageInfo_GetArtifactResponse.Size(m)
}
func (m *GetArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArtifactResponse proto.InternalMessageInfo

func (m *GetArtifactResponse) GetArtifact() *ContentArtifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func init() {
	proto.RegisterType((*ContentArtifact)(nil), "improbable.platform.assembly.ContentArtifact")
	proto.RegisterType((*BatchGetResponse)(nil), "improbable.platform.assembly.BatchGetResponse")
	proto.RegisterType((*GetArtifactRequest)(nil), "improbable.platform.assembly.GetArtifactRequest")
	proto.RegisterType((*GetArtifactResponse)(nil), "improbable.platform.assembly.GetArtifactResponse")
}

func init() {
	proto.RegisterFile("improbable/platform/assembly/content.proto", fileDescriptor_b8698664332d9fbe)
}

var fileDescriptor_b8698664332d9fbe = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0x36, 0x55, 0xd5, 0xae, 0x0f, 0x54, 0x5b, 0x81, 0x22, 0xab, 0x52, 0x23, 0x1f, 0x50,
	0x04, 0x8a, 0x17, 0x52, 0x15, 0xc4, 0xb1, 0xed, 0x21, 0x8a, 0x38, 0x11, 0x10, 0xe2, 0x66, 0xd6,
	0xf6, 0xd4, 0x59, 0x6a, 0xef, 0x9a, 0xf5, 0x3a, 0x6d, 0x54, 0x71, 0x81, 0x0b, 0x77, 0x3e, 0x00,
	0xae, 0xfc, 0x03, 0x27, 0x7e, 0x81, 0x0f, 0x40, 0x42, 0x7c, 0x08, 0xb2, 0xbd, 0x76, 0xda, 0x14,
	0xb9, 0xe4, 0xc0, 0x6d, 0xf4, 0xe6, 0xcd, 0xf8, 0xcd, 0x9b, 0x59, 0xe3, 0x7b, 0x3c, 0x49, 0x95,
	0xf4, 0x99, 0x1f, 0x03, 0x4d, 0x63, 0xa6, 0x4f, 0xa4, 0x4a, 0x28, 0xcb, 0x32, 0x48, 0xfc, 0x78,
	0x4e, 0x03, 0x29, 0x34, 0x08, 0xed, 0xa6, 0x4a, 0x6a, 0x49, 0x76, 0x17, 0x5c, 0xb7, 0xe6, 0xba,
	0x35, 0xd7, 0xbe, 0xdf, 0xda, 0xa9, 0x0e, 0xaa, 0x56, 0x37, 0x91, 0x95, 0xe6, 0x27, 0x2c, 0x30,
	0xdf, 0xb5, 0xef, 0x5e, 0x22, 0xc3, 0xb9, 0xa6, 0x69, 0x9c, 0x47, 0x5c, 0x50, 0x96, 0xeb, 0x29,
	0x4d, 0x41, 0x25, 0x99, 0xe1, 0x3d, 0x8a, 0xb8, 0x9e, 0xe6, 0xbe, 0x1b, 0xc8, 0x84, 0x26, 0x67,
	0x5c, 0x9f, 0xca, 0x33, 0x1a, 0xc9, 0x41, 0x99, 0x1c, 0xcc, 0x58, 0xcc, 0x43, 0xa6, 0xa5, 0xca,
	0x68, 0x13, 0x9a, 0xba, 0xdd, 0x48, 0xca, 0x28, 0x06, 0xca, 0x52, 0x4e, 0x99, 0x10, 0x52, 0x33,
	0xcd, 0xa5, 0x30, 0x5d, 0x9d, 0x8f, 0x08, 0xdf, 0x3a, 0xae, 0x7c, 0x38, 0x34, 0xba, 0xc8, 0x33,
	0x6c, 0xd5, 0x1a, 0x3d, 0x1e, 0x76, 0x51, 0x0f, 0xf5, 0xad, 0x61, 0xdf, 0x6d, 0xf3, 0xc7, 0xad,
	0x8b, 0xc7, 0xe1, 0xd1, 0xc6, 0xaf, 0x9f, 0x7b, 0x6b, 0x3d, 0x34, 0xc1, 0xac, 0xc1, 0xc8, 0x36,
	0xee, 0xe4, 0x2a, 0xee, 0xae, 0xf5, 0x50, 0x7f, 0x6b, 0x52, 0x84, 0x05, 0x92, 0x84, 0x07, 0xdd,
	0x4e, 0x85, 0x24, 0xe1, 0x81, 0xe3, 0xe1, 0xed, 0x23, 0xa6, 0x83, 0xe9, 0x08, 0xf4, 0x04, 0xb2,
	0x54, 0x8a, 0x0c, 0xc8, 0x53, 0xbc, 0x55, 0x77, 0xc9, 0xba, 0xa8, 0xd7, 0xe9, 0x5b, 0xc3, 0x41,
	0xbb, 0x90, 0xa5, 0x61, 0x26, 0x8b, 0x7a, 0xe7, 0x1b, 0xc2, 0x64, 0x04, 0x8b, 0x14, 0xbc, 0xcd,
	0x21, 0xfb, 0x2f, 0xe3, 0xee, 0x61, 0x2b, 0x96, 0x11, 0x17, 0x9e, 0x96, 0xa7, 0x20, 0xcc, 0xd8,
	0xb8, 0x84, 0x5e, 0x14, 0x08, 0x19, 0xe2, 0xdb, 0x69, 0xcc, 0xe6, 0xa0, 0x3c, 0x1e, 0x82, 0xd0,
	0x5c, 0xcf, 0x0d, 0xb5, 0xf2, 0x63, 0xa7, 0x4a, 0x8e, 0x4d, 0xae, 0xac, 0x71, 0x5e, 0xe3, 0x9d,
	0x2b, 0xea, 0x8d, 0x45, 0x63, 0xbc, 0x59, 0x7f, 0xd9, 0x68, 0x5f, 0xd1, 0xa1, 0xa6, 0x7c, 0xf8,
	0x61, 0x1d, 0xdf, 0x39, 0x34, 0x34, 0xc3, 0x7a, 0x0e, 0x6a, 0xc6, 0x03, 0x20, 0xdf, 0x11, 0xee,
	0x8c, 0x40, 0x93, 0x7f, 0xf6, 0xc5, 0x5e, 0x4d, 0x85, 0xe3, 0x7f, 0xf9, 0xec, 0xa0, 0xf7, 0x3f,
	0x7e, 0x7f, 0x5a, 0x7b, 0x45, 0x5e, 0x36, 0x8f, 0xc5, 0x33, 0x6f, 0x94, 0xce, 0xf6, 0xe9, 0x45,
	0x03, 0xf2, 0xb0, 0xb8, 0xde, 0x37, 0x50, 0x2e, 0xcc, 0x15, 0x2c, 0x81, 0x77, 0x57, 0xb3, 0x15,
	0xd4, 0x6c, 0x9e, 0x5e, 0x94, 0x00, 0xf9, 0x8a, 0xf0, 0x66, 0x7d, 0x62, 0x37, 0x4e, 0x62, 0x82,
	0x71, 0x68, 0xbb, 0xed, 0xcc, 0xe5, 0xa3, 0x75, 0x8e, 0x9b, 0x51, 0x9e, 0x90, 0xc7, 0x7f, 0x1f,
	0xe5, 0xba, 0xfc, 0x25, 0xc9, 0xe4, 0x1c, 0x5b, 0x97, 0xb6, 0x4d, 0x1e, 0xb4, 0x6b, 0xb8, 0x7e,
	0xd6, 0xf6, 0xc3, 0x15, 0x2a, 0x8c, 0xf0, 0xf5, 0x42, 0xb8, 0xbf, 0x51, 0xfe, 0x19, 0xf6, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x01, 0xa4, 0x8f, 0x3d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AssemblyContentServiceClient is the client API for AssemblyContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssemblyContentServiceClient interface {
	Get(ctx context.Context, in *ArtifactId, opts ...grpc.CallOption) (*ContentArtifact, error)
	BatchGet(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*BatchGetResponse, error)
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error)
}

type assemblyContentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssemblyContentServiceClient(cc grpc.ClientConnInterface) AssemblyContentServiceClient {
	return &assemblyContentServiceClient{cc}
}

func (c *assemblyContentServiceClient) Get(ctx context.Context, in *ArtifactId, opts ...grpc.CallOption) (*ContentArtifact, error) {
	out := new(ContentArtifact)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyContentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyContentServiceClient) BatchGet(ctx context.Context, in *AssemblyId, opts ...grpc.CallOption) (*BatchGetResponse, error) {
	out := new(BatchGetResponse)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyContentService/BatchGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyContentServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*GetArtifactResponse, error) {
	out := new(GetArtifactResponse)
	err := c.cc.Invoke(ctx, "/improbable.platform.assembly.AssemblyContentService/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssemblyContentServiceServer is the server API for AssemblyContentService service.
type AssemblyContentServiceServer interface {
	Get(context.Context, *ArtifactId) (*ContentArtifact, error)
	BatchGet(context.Context, *AssemblyId) (*BatchGetResponse, error)
	GetArtifact(context.Context, *GetArtifactRequest) (*GetArtifactResponse, error)
}

// UnimplementedAssemblyContentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAssemblyContentServiceServer struct {
}

func (*UnimplementedAssemblyContentServiceServer) Get(ctx context.Context, req *ArtifactId) (*ContentArtifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAssemblyContentServiceServer) BatchGet(ctx context.Context, req *AssemblyId) (*BatchGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGet not implemented")
}
func (*UnimplementedAssemblyContentServiceServer) GetArtifact(ctx context.Context, req *GetArtifactRequest) (*GetArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}

func RegisterAssemblyContentServiceServer(s *grpc.Server, srv AssemblyContentServiceServer) {
	s.RegisterService(&_AssemblyContentService_serviceDesc, srv)
}

func _AssemblyContentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyContentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyContentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyContentServiceServer).Get(ctx, req.(*ArtifactId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyContentService_BatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyContentServiceServer).BatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyContentService/BatchGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyContentServiceServer).BatchGet(ctx, req.(*AssemblyId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyContentService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyContentServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.assembly.AssemblyContentService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyContentServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssemblyContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.assembly.AssemblyContentService",
	HandlerType: (*AssemblyContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AssemblyContentService_Get_Handler,
		},
		{
			MethodName: "BatchGet",
			Handler:    _AssemblyContentService_BatchGet_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _AssemblyContentService_GetArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "improbable/platform/assembly/content.proto",
}
