// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/logging/logging.proto

package improbable_platform_logging

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_LogMessage_Message = regexp.MustCompile(`.`)

func (this *LogMessage) Validate() error {
	if !_regex_LogMessage_Message.MatchString(this.Message) {
		return github_com_mwitkow_go_proto_validators.FieldError("Message", fmt.Errorf(`value '%v' must be a string conforming to regex "."`, this.Message))
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}

var _regex_LogRequest_ClientType = regexp.MustCompile(`[a-z_]{1,32}`)

func (this *LogRequest) Validate() error {
	if !_regex_LogRequest_ClientType.MatchString(this.ClientType) {
		return github_com_mwitkow_go_proto_validators.FieldError("ClientType", fmt.Errorf(`value '%v' must be a string conforming to regex "[a-z_]{1,32}"`, this.ClientType))
	}
	if this.Message != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Message); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Message", err)
		}
	}
	return nil
}
