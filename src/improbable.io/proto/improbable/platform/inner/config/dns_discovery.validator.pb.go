// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/inner/config/dns_discovery.proto

package improbable_platform_inner_config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "improbable.io/proto/improbable/platform/deployment"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *EndpointAddress) Validate() error {
	return nil
}
func (this *RegistrationResponse) Validate() error {
	return nil
}

var _regex_AuxServiceRegistration_Name = regexp.MustCompile(`^[a-zA-Z0-9_]{2,50}$`)

func (this *AuxServiceRegistration) Validate() error {
	if !_regex_AuxServiceRegistration_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{2,50}$"`, this.Name))
	}
	if nil == this.Endpoint {
		return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", fmt.Errorf("message must exist"))
	}
	if this.Endpoint != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Endpoint); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", err)
		}
	}
	return nil
}

var _regex_ModuleRegistration_Name = regexp.MustCompile(`^[a-zA-Z0-9_]{2,50}$`)

func (this *ModuleRegistration) Validate() error {
	if !_regex_ModuleRegistration_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{2,50}$"`, this.Name))
	}
	if nil == this.Endpoint {
		return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", fmt.Errorf("message must exist"))
	}
	if this.Endpoint != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Endpoint); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", err)
		}
	}
	return nil
}

var _regex_ServiceRegistration_Name = regexp.MustCompile(`^[a-zA-Z0-9_]{2,50}$`)

func (this *ServiceRegistration) Validate() error {
	if !_regex_ServiceRegistration_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{2,50}$"`, this.Name))
	}
	if nil == this.Endpoint {
		return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", fmt.Errorf("message must exist"))
	}
	if this.Endpoint != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Endpoint); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Endpoint", err)
		}
	}
	return nil
}
func (this *RegisterRequest) Validate() error {
	if nil == this.NodeId {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf("message must exist"))
	}
	if this.NodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeId", err)
		}
	}
	for _, item := range this.Modules {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Modules", err)
			}
		}
	}
	for _, item := range this.Services {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Services", err)
			}
		}
	}
	if this.Servlet != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Servlet); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Servlet", err)
		}
	}
	for _, item := range this.AuxServices {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AuxServices", err)
			}
		}
	}
	return nil
}
func (this *DeregisterRequest) Validate() error {
	if nil == this.NodeId {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf("message must exist"))
	}
	if this.NodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeId", err)
		}
	}
	return nil
}
func (this *DeregisterAllRequest) Validate() error {
	if nil == this.NodeId {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf("message must exist"))
	}
	if this.NodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeId", err)
		}
	}
	return nil
}
