// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/runtime/query.proto

package improbable_platform_runtime

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Coordinates) Validate() error {
	return nil
}
func (this *InspectionEntityQueryConstraint) Validate() error {
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_SphereConstraint); ok {
		if oneOfNester.SphereConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.SphereConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("SphereConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_CylinderConstraint); ok {
		if oneOfNester.CylinderConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.CylinderConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("CylinderConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_EntityIdConstraint); ok {
		if oneOfNester.EntityIdConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.EntityIdConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("EntityIdConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_ComponentConstraint); ok {
		if oneOfNester.ComponentConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.ComponentConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("ComponentConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_AndConstraint); ok {
		if oneOfNester.AndConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.AndConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AndConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_OrConstraint); ok {
		if oneOfNester.OrConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.OrConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("OrConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_NotConstraint); ok {
		if oneOfNester.NotConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.NotConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("NotConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_TrueConstraint); ok {
		if oneOfNester.TrueConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.TrueConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("TrueConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_FalseConstraint); ok {
		if oneOfNester.FalseConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.FalseConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("FalseConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_BoxConstraint); ok {
		if oneOfNester.BoxConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.BoxConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("BoxConstraint", err)
			}
		}
	}
	if oneOfNester, ok := this.GetConstraint().(*InspectionEntityQueryConstraint_AuthorityConstraint); ok {
		if oneOfNester.AuthorityConstraint != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.AuthorityConstraint); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AuthorityConstraint", err)
			}
		}
	}
	return nil
}
func (this *SphereConstraint) Validate() error {
	if this.Center != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Center); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Center", err)
		}
	}
	return nil
}
func (this *CylinderConstraint) Validate() error {
	if this.Center != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Center); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Center", err)
		}
	}
	return nil
}
func (this *EntityIdConstraint) Validate() error {
	if this.EntityId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.EntityId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("EntityId", err)
		}
	}
	return nil
}
func (this *ComponentConstraint) Validate() error {
	return nil
}
func (this *AndConstraint) Validate() error {
	for _, item := range this.Conjunct {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Conjunct", err)
			}
		}
	}
	return nil
}
func (this *OrConstraint) Validate() error {
	for _, item := range this.Disjunct {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Disjunct", err)
			}
		}
	}
	return nil
}
func (this *NotConstraint) Validate() error {
	if this.Negated != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Negated); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Negated", err)
		}
	}
	return nil
}
func (this *TrueConstraint) Validate() error {
	return nil
}
func (this *FalseConstraint) Validate() error {
	return nil
}
func (this *BoxConstraint) Validate() error {
	if this.Min != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Min); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Min", err)
		}
	}
	if this.Max != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Max); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Max", err)
		}
	}
	return nil
}
func (this *AuthorityConstraint) Validate() error {
	return nil
}
func (this *InspectionQueryResultType) Validate() error {
	if oneOfNester, ok := this.GetResultType().(*InspectionQueryResultType_Snapshot); ok {
		if oneOfNester.Snapshot != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Snapshot); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Snapshot", err)
			}
		}
	}
	return nil
}
func (this *InspectionSnapshotResultType) Validate() error {
	return nil
}
