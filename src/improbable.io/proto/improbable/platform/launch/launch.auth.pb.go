// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/launch/launch.proto

package improbable_platform_launch

import (
	context "context"
	errors "errors"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	improbable_io_lib_oauth2_authctx "improbable.io/lib/oauth2/authctx"
	improbable_io_lib_oauth2_perms "improbable.io/lib/oauth2/perms"
	improbable_io_lib_perms_registry "improbable.io/lib/perms/registry"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	improbable_io_proto_improbable_ext_plugin_auth "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func init() {
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/RetrieveLoginToken",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/GenerateLoginToken",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/GenerateMultiple",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/GenerateShareToken",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/ValidateShareToken",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/GenerateTokens",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.launch.LauncherService/GenerateAnonymousTokens",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{},
	)
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherRetrieveLoginTokenForDeployment_Args struct {
	Deployment string
	Project    string
}

// Performs the delegated permission check described by delegation "LauncherRetrieveLoginTokenForDeployment".
func Permits_V1_LauncherRetrieveLoginTokenForDeployment(ctx context.Context, args Permits_V1_LauncherRetrieveLoginTokenForDeployment_Args) error {
	perm := fmt.Sprintf("[w]:prj/%v/dpl/%v", args.Project, args.Deployment)
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherRetrieveLoginTokenForProject_Args struct {
	Project string
}

// Performs the delegated permission check described by delegation "LauncherRetrieveLoginTokenForProject".
func Permits_V1_LauncherRetrieveLoginTokenForProject(ctx context.Context, args Permits_V1_LauncherRetrieveLoginTokenForProject_Args) error {
	perm := fmt.Sprintf("[w]:prj/%v", args.Project)
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherGenerateLoginToken_Args struct {
}

// Performs the delegated permission check described by delegation "LauncherGenerateLoginToken".
func Permits_V1_LauncherGenerateLoginToken(ctx context.Context, args Permits_V1_LauncherGenerateLoginToken_Args) error {
	perm := "[r]:srv/launch"
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherGenerateLoginTokenWithSubject_Args struct {
}

// Performs the delegated permission check described by delegation "LauncherGenerateLoginTokenWithSubject".
func Permits_V1_LauncherGenerateLoginTokenWithSubject(ctx context.Context, args Permits_V1_LauncherGenerateLoginTokenWithSubject_Args) error {
	perm := "[w]:srv/launch/sub"
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherGenerateMultiple_Args struct {
	Deployment string
	Project    string
}

// Performs the delegated permission check described by delegation "LauncherGenerateMultiple".
func Permits_V1_LauncherGenerateMultiple(ctx context.Context, args Permits_V1_LauncherGenerateMultiple_Args) error {
	perm := fmt.Sprintf("[w]:prj/%v/dpl/%v", args.Project, args.Deployment)
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherGenerateShareToken_Args struct {
	Deployment string
	Project    string
}

// Performs the delegated permission check described by delegation "LauncherGenerateShareToken".
func Permits_V1_LauncherGenerateShareToken(ctx context.Context, args Permits_V1_LauncherGenerateShareToken_Args) error {
	perm := fmt.Sprintf("[w]:prj/%v/dpl/%v", args.Project, args.Deployment)
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherValidateShareToken_Args struct {
}

// Performs the delegated permission check described by delegation "LauncherValidateShareToken".
func Permits_V1_LauncherValidateShareToken(ctx context.Context, args Permits_V1_LauncherValidateShareToken_Args) error {
	perm := "[r]:srv/share_token"
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}

// The arguments for this v1 permission check.
type Permits_V1_LauncherGenerateTokens_Args struct {
	Deployment string
	Project    string
}

// Performs the delegated permission check described by delegation "LauncherGenerateTokens".
func Permits_V1_LauncherGenerateTokens(ctx context.Context, args Permits_V1_LauncherGenerateTokens_Args) error {
	perm := fmt.Sprintf("[r]:prj/%v/dpl/%v", args.Project, args.Deployment)
	grant, err := improbable_io_lib_oauth2_perms.ParseGrant(perm)
	if err != nil {
		return err
	}
	if !improbable_io_lib_oauth2_authctx.Perms(ctx).Permits(grant) {
		return errors.New(fmt.Sprintf("perm %v denied for grants %v", perm, improbable_io_lib_oauth2_authctx.Perms(ctx)))
	}
	return nil
}
