// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/deployment/node.proto

package improbable_platform_deployment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	platform "improbable.io/proto/improbable/platform"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node_Role int32

const (
	Node_UNKNOWN_ROLE               Node_Role = 0
	Node_MASTER                     Node_Role = 1
	Node_ENGINE_STARTER             Node_Role = 2 // Deprecated: Do not use.
	Node_GSIM                       Node_Role = 3
	Node_BRIDGE                     Node_Role = 4
	Node_INSPECTION                 Node_Role = 5
	Node_WORKER_RUNNER              Node_Role = 6
	Node_PROTOTYPE_ENTITY_DB        Node_Role = 7
	Node_PROTOTYPE_ENTITY_DB_CLIENT Node_Role = 8
)

var Node_Role_name = map[int32]string{
	0: "UNKNOWN_ROLE",
	1: "MASTER",
	2: "ENGINE_STARTER",
	3: "GSIM",
	4: "BRIDGE",
	5: "INSPECTION",
	6: "WORKER_RUNNER",
	7: "PROTOTYPE_ENTITY_DB",
	8: "PROTOTYPE_ENTITY_DB_CLIENT",
}

var Node_Role_value = map[string]int32{
	"UNKNOWN_ROLE":               0,
	"MASTER":                     1,
	"ENGINE_STARTER":             2,
	"GSIM":                       3,
	"BRIDGE":                     4,
	"INSPECTION":                 5,
	"WORKER_RUNNER":              6,
	"PROTOTYPE_ENTITY_DB":        7,
	"PROTOTYPE_ENTITY_DB_CLIENT": 8,
}

func (x Node_Role) String() string {
	return proto.EnumName(Node_Role_name, int32(x))
}

func (Node_Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{2, 0}
}

type NodeDebugUrls struct {
	RawLogsUrl           string   `protobuf:"bytes,1,opt,name=raw_logs_url,json=rawLogsUrl,proto3" json:"raw_logs_url,omitempty"`
	PsDashUrl            string   `protobuf:"bytes,2,opt,name=ps_dash_url,json=psDashUrl,proto3" json:"ps_dash_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeDebugUrls) Reset()         { *m = NodeDebugUrls{} }
func (m *NodeDebugUrls) String() string { return proto.CompactTextString(m) }
func (*NodeDebugUrls) ProtoMessage()    {}
func (*NodeDebugUrls) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{0}
}

func (m *NodeDebugUrls) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeDebugUrls.Unmarshal(m, b)
}
func (m *NodeDebugUrls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeDebugUrls.Marshal(b, m, deterministic)
}
func (m *NodeDebugUrls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDebugUrls.Merge(m, src)
}
func (m *NodeDebugUrls) XXX_Size() int {
	return xxx_messageInfo_NodeDebugUrls.Size(m)
}
func (m *NodeDebugUrls) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDebugUrls.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDebugUrls proto.InternalMessageInfo

func (m *NodeDebugUrls) GetRawLogsUrl() string {
	if m != nil {
		return m.RawLogsUrl
	}
	return ""
}

func (m *NodeDebugUrls) GetPsDashUrl() string {
	if m != nil {
		return m.PsDashUrl
	}
	return ""
}

type NodeId struct {
	DeploymentId         *DeploymentId `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NodeId) Reset()         { *m = NodeId{} }
func (m *NodeId) String() string { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()    {}
func (*NodeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{1}
}

func (m *NodeId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeId.Unmarshal(m, b)
}
func (m *NodeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeId.Marshal(b, m, deterministic)
}
func (m *NodeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeId.Merge(m, src)
}
func (m *NodeId) XXX_Size() int {
	return xxx_messageInfo_NodeId.Size(m)
}
func (m *NodeId) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeId.DiscardUnknown(m)
}

var xxx_messageInfo_NodeId proto.InternalMessageInfo

func (m *NodeId) GetDeploymentId() *DeploymentId {
	if m != nil {
		return m.DeploymentId
	}
	return nil
}

func (m *NodeId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Node struct {
	NodeId               *NodeId                `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Dns                  string                 `protobuf:"bytes,2,opt,name=dns,proto3" json:"dns,omitempty"`
	State                string                 `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Size                 string                 `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	PrivateIp            string                 `protobuf:"bytes,5,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	Roles                []Node_Role            `protobuf:"varint,6,rep,packed,name=roles,proto3,enum=improbable.platform.deployment.Node_Role" json:"roles,omitempty"` // Deprecated: Do not use.
	DebugUrls            *NodeDebugUrls         `protobuf:"bytes,9,opt,name=debug_urls,json=debugUrls,proto3" json:"debug_urls,omitempty"`                              // Deprecated: Do not use.
	Links                []*Node_Link           `protobuf:"bytes,10,rep,name=links,proto3" json:"links,omitempty"`
	Privileged           bool                   `protobuf:"varint,11,opt,name=privileged,proto3" json:"privileged,omitempty"`
	LastMachineError     *platform.GenericError `protobuf:"bytes,12,opt,name=lastMachineError,proto3" json:"lastMachineError,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{2}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Node) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *Node) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Node) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *Node) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

// Deprecated: Do not use.
func (m *Node) GetRoles() []Node_Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

// Deprecated: Do not use.
func (m *Node) GetDebugUrls() *NodeDebugUrls {
	if m != nil {
		return m.DebugUrls
	}
	return nil
}

func (m *Node) GetLinks() []*Node_Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Node) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *Node) GetLastMachineError() *platform.GenericError {
	if m != nil {
		return m.LastMachineError
	}
	return nil
}

type Node_Link struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node_Link) Reset()         { *m = Node_Link{} }
func (m *Node_Link) String() string { return proto.CompactTextString(m) }
func (*Node_Link) ProtoMessage()    {}
func (*Node_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{2, 0}
}

func (m *Node_Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node_Link.Unmarshal(m, b)
}
func (m *Node_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node_Link.Marshal(b, m, deterministic)
}
func (m *Node_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node_Link.Merge(m, src)
}
func (m *Node_Link) XXX_Size() int {
	return xxx_messageInfo_Node_Link.Size(m)
}
func (m *Node_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Node_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Node_Link proto.InternalMessageInfo

func (m *Node_Link) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node_Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type MultiNodeCreateRequest struct {
	DeploymentId         *DeploymentId `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Nodes                []*Node       `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	DeploymentUuid       int64         `protobuf:"varint,3,opt,name=deployment_uuid,json=deploymentUuid,proto3" json:"deployment_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MultiNodeCreateRequest) Reset()         { *m = MultiNodeCreateRequest{} }
func (m *MultiNodeCreateRequest) String() string { return proto.CompactTextString(m) }
func (*MultiNodeCreateRequest) ProtoMessage()    {}
func (*MultiNodeCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{3}
}

func (m *MultiNodeCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiNodeCreateRequest.Unmarshal(m, b)
}
func (m *MultiNodeCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiNodeCreateRequest.Marshal(b, m, deterministic)
}
func (m *MultiNodeCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiNodeCreateRequest.Merge(m, src)
}
func (m *MultiNodeCreateRequest) XXX_Size() int {
	return xxx_messageInfo_MultiNodeCreateRequest.Size(m)
}
func (m *MultiNodeCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiNodeCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiNodeCreateRequest proto.InternalMessageInfo

func (m *MultiNodeCreateRequest) GetDeploymentId() *DeploymentId {
	if m != nil {
		return m.DeploymentId
	}
	return nil
}

func (m *MultiNodeCreateRequest) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *MultiNodeCreateRequest) GetDeploymentUuid() int64 {
	if m != nil {
		return m.DeploymentUuid
	}
	return 0
}

type SetStateRequest struct {
	NodeId               *NodeId  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStateRequest) Reset()         { *m = SetStateRequest{} }
func (m *SetStateRequest) String() string { return proto.CompactTextString(m) }
func (*SetStateRequest) ProtoMessage()    {}
func (*SetStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{4}
}

func (m *SetStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetStateRequest.Unmarshal(m, b)
}
func (m *SetStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetStateRequest.Marshal(b, m, deterministic)
}
func (m *SetStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStateRequest.Merge(m, src)
}
func (m *SetStateRequest) XXX_Size() int {
	return xxx_messageInfo_SetStateRequest.Size(m)
}
func (m *SetStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetStateRequest proto.InternalMessageInfo

func (m *SetStateRequest) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *SetStateRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type SetAllStatesRequest struct {
	DeploymentId         *DeploymentId `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	State                string        `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SetAllStatesRequest) Reset()         { *m = SetAllStatesRequest{} }
func (m *SetAllStatesRequest) String() string { return proto.CompactTextString(m) }
func (*SetAllStatesRequest) ProtoMessage()    {}
func (*SetAllStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f830aea1fde3100d, []int{5}
}

func (m *SetAllStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetAllStatesRequest.Unmarshal(m, b)
}
func (m *SetAllStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetAllStatesRequest.Marshal(b, m, deterministic)
}
func (m *SetAllStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAllStatesRequest.Merge(m, src)
}
func (m *SetAllStatesRequest) XXX_Size() int {
	return xxx_messageInfo_SetAllStatesRequest.Size(m)
}
func (m *SetAllStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAllStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetAllStatesRequest proto.InternalMessageInfo

func (m *SetAllStatesRequest) GetDeploymentId() *DeploymentId {
	if m != nil {
		return m.DeploymentId
	}
	return nil
}

func (m *SetAllStatesRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterEnum("improbable.platform.deployment.Node_Role", Node_Role_name, Node_Role_value)
	proto.RegisterType((*NodeDebugUrls)(nil), "improbable.platform.deployment.NodeDebugUrls")
	proto.RegisterType((*NodeId)(nil), "improbable.platform.deployment.NodeId")
	proto.RegisterType((*Node)(nil), "improbable.platform.deployment.Node")
	proto.RegisterType((*Node_Link)(nil), "improbable.platform.deployment.Node.Link")
	proto.RegisterType((*MultiNodeCreateRequest)(nil), "improbable.platform.deployment.MultiNodeCreateRequest")
	proto.RegisterType((*SetStateRequest)(nil), "improbable.platform.deployment.SetStateRequest")
	proto.RegisterType((*SetAllStatesRequest)(nil), "improbable.platform.deployment.SetAllStatesRequest")
}

func init() {
	proto.RegisterFile("improbable/platform/deployment/node.proto", fileDescriptor_f830aea1fde3100d)
}

var fileDescriptor_f830aea1fde3100d = []byte{
	// 1106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0x59, 0x7f, 0x35, 0x39, 0x4e, 0x53, 0x33, 0xa9, 0x82, 0x65, 0x20, 0x31, 0x56, 0x84,
	0x9c, 0x12, 0xef, 0x46, 0x8e, 0x88, 0x44, 0x41, 0xa0, 0x38, 0x5e, 0x45, 0xa6, 0xc9, 0x3a, 0x5d,
	0xdb, 0xaa, 0x02, 0xa2, 0xab, 0xb5, 0x77, 0x62, 0x0f, 0x19, 0xef, 0x2c, 0x3b, 0xeb, 0x44, 0x6d,
	0xda, 0x1b, 0x5e, 0xa1, 0x5c, 0x71, 0x09, 0x97, 0x48, 0x7c, 0x48, 0x5c, 0xf2, 0x02, 0xdc, 0x21,
	0xf1, 0x00, 0x91, 0x22, 0x6e, 0xb9, 0xe1, 0x09, 0xd0, 0xcc, 0x3a, 0xb6, 0x49, 0x5c, 0x6c, 0x44,
	0xda, 0xbb, 0x33, 0x67, 0xce, 0x99, 0xf9, 0x9d, 0x33, 0xff, 0x99, 0x81, 0x55, 0xd2, 0xf5, 0x7c,
	0xd6, 0xb4, 0x9b, 0x14, 0x6b, 0x1e, 0xb5, 0x83, 0x43, 0xe6, 0x77, 0x35, 0x07, 0x7b, 0x94, 0x3d,
	0xea, 0x62, 0x37, 0xd0, 0x5c, 0xe6, 0x60, 0xd5, 0xf3, 0x59, 0xc0, 0xd0, 0xd2, 0x30, 0x54, 0xbd,
	0x08, 0x55, 0x87, 0xa1, 0x99, 0x37, 0xda, 0x8c, 0xb5, 0x29, 0xd6, 0x6c, 0x8f, 0x68, 0xb6, 0xeb,
	0xb2, 0xc0, 0x0e, 0x08, 0x73, 0x79, 0x98, 0x9d, 0xc9, 0x8e, 0xdb, 0xa8, 0xc5, 0xba, 0x5d, 0xe6,
	0xf6, 0x23, 0xde, 0x99, 0x80, 0xc2, 0x3b, 0xb6, 0x8f, 0x9d, 0x7e, 0xf0, 0xeb, 0xfd, 0xcd, 0xe4,
	0xa8, 0xd9, 0x3b, 0xd4, 0x70, 0xd7, 0x0b, 0x1e, 0xf5, 0x27, 0x37, 0xdb, 0x24, 0xe8, 0xf4, 0x9a,
	0x6a, 0x8b, 0x75, 0xb5, 0xee, 0x09, 0x09, 0x8e, 0xd8, 0x89, 0xd6, 0x66, 0x05, 0x39, 0x59, 0x38,
	0xb6, 0x29, 0x71, 0xec, 0x80, 0xf9, 0x5c, 0x1b, 0x98, 0xfd, 0xbc, 0xf7, 0x47, 0xf2, 0x86, 0x30,
	0x05, 0xc2, 0x86, 0xd9, 0x94, 0xb5, 0x0f, 0x09, 0xa6, 0x0e, 0xd7, 0x06, 0x56, 0x98, 0x9c, 0xbb,
	0x0f, 0x37, 0x0d, 0xe6, 0xe0, 0x32, 0x6e, 0xf6, 0xda, 0x0d, 0x9f, 0x72, 0x94, 0x85, 0x39, 0xdf,
	0x3e, 0xb1, 0x28, 0x6b, 0x73, 0xab, 0xe7, 0xd3, 0xb4, 0x92, 0x55, 0xf2, 0xb3, 0x26, 0xf8, 0xf6,
	0xc9, 0x2e, 0x6b, 0xf3, 0x86, 0x4f, 0xd1, 0x12, 0x24, 0x3d, 0x6e, 0x39, 0x36, 0xef, 0xc8, 0x80,
	0x88, 0x0c, 0x98, 0xf5, 0x78, 0xd9, 0xe6, 0x9d, 0x86, 0x4f, 0x73, 0xcf, 0x14, 0x48, 0x88, 0x35,
	0x2b, 0x0e, 0x3a, 0x80, 0x9b, 0xc3, 0x56, 0x58, 0xc4, 0x91, 0xab, 0x25, 0x8b, 0x6b, 0xea, 0xbf,
	0x1f, 0x8a, 0x5a, 0x1e, 0x98, 0x15, 0xa7, 0x94, 0x38, 0x3f, 0x5b, 0x8e, 0x64, 0x15, 0x73, 0xce,
	0x19, 0xf1, 0x22, 0x15, 0x62, 0xae, 0xdd, 0xc5, 0xe1, 0xf6, 0xa5, 0xcc, 0xf9, 0xd9, 0xf2, 0x22,
	0xdc, 0x7e, 0xf8, 0xa9, 0x5d, 0x78, 0xbc, 0x55, 0xf8, 0x64, 0xbd, 0xf0, 0x9e, 0xf5, 0xd9, 0x69,
	0x71, 0xad, 0xf8, 0xee, 0xd3, 0x15, 0x53, 0xc6, 0xe5, 0x7e, 0x8b, 0x43, 0x4c, 0x50, 0xa1, 0x1d,
	0xb8, 0x21, 0xe4, 0x31, 0xa4, 0x79, 0x7b, 0x12, 0x4d, 0x58, 0xcc, 0x80, 0x23, 0xe1, 0x86, 0xc5,
	0xa5, 0x20, 0xea, 0xb8, 0xbc, 0x5f, 0xbf, 0x30, 0xd1, 0x6d, 0x88, 0xf3, 0xc0, 0x0e, 0x70, 0x3a,
	0x2a, 0x7d, 0xe1, 0x00, 0x21, 0x88, 0x71, 0xf2, 0x18, 0xa7, 0x63, 0xd2, 0x29, 0x6d, 0xf4, 0x26,
	0x80, 0xe7, 0x93, 0x63, 0x3b, 0xc0, 0x16, 0xf1, 0xd2, 0xf1, 0x7e, 0x0b, 0x43, 0x4f, 0xc5, 0x43,
	0xdb, 0x10, 0xf7, 0x19, 0xc5, 0x3c, 0x9d, 0xc8, 0x46, 0xf3, 0xf3, 0xc5, 0xd5, 0x69, 0x08, 0x55,
	0x93, 0x51, 0x5c, 0x8a, 0xa4, 0x15, 0x33, 0xcc, 0x45, 0xfb, 0x00, 0x8e, 0x38, 0x56, 0x71, 0x4a,
	0x3c, 0x3d, 0x2b, 0x6b, 0x2d, 0x4c, 0xb3, 0xd2, 0x40, 0x0c, 0x72, 0xb5, 0x59, 0x67, 0xa0, 0x8d,
	0x8f, 0x20, 0x4e, 0x89, 0x7b, 0xc4, 0xd3, 0x90, 0x8d, 0xe6, 0x93, 0x53, 0x62, 0xed, 0x12, 0xf7,
	0xc8, 0x0c, 0xf3, 0xd0, 0x52, 0x58, 0x36, 0xa1, 0xb8, 0x8d, 0x9d, 0x74, 0x32, 0xab, 0xe4, 0x67,
	0xcc, 0x11, 0x0f, 0xda, 0x83, 0x14, 0xb5, 0x79, 0xb0, 0x67, 0xb7, 0x3a, 0xc4, 0xc5, 0xba, 0xef,
	0x33, 0x3f, 0x3d, 0x27, 0xc1, 0xdf, 0x1a, 0xbb, 0xd7, 0x0e, 0x76, 0xb1, 0x4f, 0x5a, 0x32, 0xd0,
	0xbc, 0x92, 0x9a, 0x59, 0x83, 0x98, 0xd8, 0x5d, 0x9c, 0x80, 0xd4, 0x4a, 0xa8, 0x65, 0x69, 0x8b,
	0xd3, 0x1b, 0xaa, 0x57, 0x98, 0xb9, 0xef, 0x15, 0x88, 0x89, 0x1e, 0xa2, 0x14, 0xcc, 0x35, 0x8c,
	0x7b, 0x46, 0xf5, 0x81, 0x61, 0x99, 0xd5, 0x5d, 0x3d, 0xf5, 0x0a, 0x02, 0x48, 0xec, 0x6d, 0xd5,
	0xea, 0xba, 0x99, 0x52, 0xd0, 0x22, 0xcc, 0xeb, 0xc6, 0x4e, 0xc5, 0xd0, 0xad, 0x5a, 0x7d, 0xcb,
	0x14, 0xbe, 0x48, 0x26, 0x32, 0xa3, 0xa0, 0x19, 0x88, 0xed, 0xd4, 0x2a, 0x7b, 0xa9, 0xa8, 0x88,
	0x2e, 0x99, 0x95, 0xf2, 0x8e, 0x9e, 0x8a, 0xa1, 0x79, 0x80, 0x8a, 0x51, 0xdb, 0xd7, 0xb7, 0xeb,
	0x95, 0xaa, 0x91, 0x8a, 0xa3, 0x57, 0xe1, 0xe6, 0x83, 0xaa, 0x79, 0x4f, 0x37, 0x2d, 0xb3, 0x61,
	0x18, 0xba, 0x99, 0x4a, 0xa0, 0xd7, 0x60, 0x61, 0xdf, 0xac, 0xd6, 0xab, 0xf5, 0x83, 0x7d, 0xdd,
	0xd2, 0x8d, 0x7a, 0xa5, 0x7e, 0x60, 0x95, 0x4b, 0xa9, 0x1b, 0x68, 0x09, 0x32, 0x63, 0x26, 0xac,
	0xed, 0xdd, 0x8a, 0x6e, 0xd4, 0x53, 0x33, 0xb9, 0x3f, 0x15, 0x58, 0xdc, 0xeb, 0xd1, 0x80, 0x88,
	0x3e, 0x6f, 0xfb, 0xd8, 0x0e, 0xb0, 0x89, 0xbf, 0xe8, 0x61, 0x1e, 0xbc, 0xc8, 0x8b, 0x77, 0x17,
	0xe2, 0xe2, 0x02, 0x08, 0xe1, 0x0b, 0x11, 0xac, 0x4c, 0x23, 0x02, 0x33, 0x4c, 0x41, 0x1f, 0xc0,
	0xad, 0x11, 0xac, 0x5e, 0x8f, 0x38, 0xf2, 0xaa, 0x44, 0x4b, 0x0b, 0xdf, 0x7c, 0xb7, 0x74, 0xeb,
	0x12, 0xb3, 0x39, 0x3f, 0x1c, 0x36, 0x7a, 0xc4, 0xc9, 0x7d, 0xad, 0xc0, 0xad, 0x1a, 0x0e, 0x6a,
	0xc1, 0x48, 0xa1, 0xd7, 0x76, 0x9b, 0x3f, 0xbc, 0xb8, 0xbb, 0xe1, 0x83, 0x92, 0x3f, 0x3f, 0x5b,
	0x5e, 0x81, 0xdc, 0xc3, 0x7c, 0x8b, 0xb9, 0x87, 0xa4, 0xdd, 0xf3, 0xb1, 0xf3, 0xc4, 0xf3, 0xd9,
	0x31, 0xe1, 0x84, 0xb9, 0xd8, 0x79, 0xe2, 0xf7, 0x5c, 0x97, 0xb8, 0xed, 0xd5, 0x95, 0xfe, 0x2d,
	0xcf, 0xfd, 0xa8, 0xc0, 0x42, 0x0d, 0x07, 0x5b, 0x94, 0x4a, 0x3e, 0xfe, 0x12, 0x4e, 0xe2, 0x7f,
	0x22, 0x17, 0xff, 0x9a, 0x85, 0xa4, 0xe8, 0x46, 0x0d, 0xfb, 0xc7, 0xa4, 0x85, 0xd1, 0xcf, 0x0a,
	0x24, 0x43, 0x19, 0x49, 0x55, 0xa1, 0xcd, 0x49, 0x8c, 0xe3, 0xc5, 0x97, 0x59, 0x54, 0xc3, 0x6f,
	0x4e, 0xbd, 0xf8, 0xe6, 0x54, 0x5d, 0x7c, 0x73, 0xb9, 0xc6, 0x97, 0xbf, 0xff, 0xf1, 0x2c, 0x52,
	0xcd, 0x7c, 0x3c, 0xf2, 0x3f, 0x72, 0xed, 0x78, 0x43, 0x3b, 0xfd, 0x47, 0x87, 0x44, 0xda, 0xe7,
	0xb8, 0x25, 0x4d, 0x71, 0x55, 0x9f, 0x5e, 0x9e, 0x0f, 0x9d, 0x52, 0x51, 0x77, 0x95, 0x3b, 0xe8,
	0x17, 0x05, 0x12, 0x21, 0x00, 0x9a, 0x4a, 0x8c, 0xcf, 0xe5, 0x0b, 0x24, 0x9f, 0x9b, 0x21, 0x57,
	0xf8, 0xfa, 0x12, 0x53, 0x27, 0x71, 0x8e, 0x8f, 0x1b, 0xe1, 0x1d, 0x86, 0x48, 0xa7, 0xc0, 0xff,
	0x56, 0x81, 0x44, 0x19, 0x53, 0x1c, 0x60, 0x34, 0xa5, 0x76, 0x9f, 0x5b, 0xc0, 0x81, 0x2c, 0xa0,
	0x76, 0xe7, 0xfe, 0xf5, 0x35, 0x58, 0x3b, 0x95, 0x03, 0xf4, 0x95, 0x22, 0xde, 0x52, 0x1e, 0xa0,
	0xff, 0x24, 0xdc, 0xcc, 0x54, 0x07, 0x92, 0xdb, 0x94, 0xdc, 0xeb, 0x48, 0xbd, 0xc2, 0x3d, 0xa6,
	0xc5, 0x43, 0xb6, 0x75, 0x05, 0xfd, 0xa0, 0x40, 0xac, 0xd6, 0x61, 0x27, 0x53, 0xb7, 0x6e, 0x3a,
	0xa0, 0x7e, 0x23, 0xd1, 0x0b, 0x68, 0xe4, 0xaf, 0x0a, 0xcc, 0x5c, 0x3c, 0x62, 0x48, 0x9b, 0x44,
	0x73, 0xe9, 0xb9, 0x9b, 0x24, 0xdd, 0xe2, 0xcb, 0x95, 0xee, 0x4f, 0x0a, 0x24, 0x2f, 0x08, 0xb7,
	0x28, 0x45, 0x1b, 0x53, 0x94, 0x73, 0xf9, 0x81, 0x9c, 0xf4, 0x5a, 0x14, 0xaf, 0xf7, 0xb5, 0x68,
	0x26, 0xe4, 0x36, 0x1b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x64, 0x73, 0xa3, 0x43, 0x0c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	CreateMulti(ctx context.Context, in *MultiNodeCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (NodeService_ListClient, error)
	Show(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Node, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetStateAll(ctx context.Context, in *SetAllStatesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) CreateMulti(ctx context.Context, in *MultiNodeCreateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/CreateMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Delete(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (NodeService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[0], "/improbable.platform.deployment.NodeService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_ListClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeServiceListClient struct {
	grpc.ClientStream
}

func (x *nodeServiceListClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) Show(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SetStateAll(ctx context.Context, in *SetAllStatesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.NodeService/SetStateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	CreateMulti(context.Context, *MultiNodeCreateRequest) (*empty.Empty, error)
	Create(context.Context, *Node) (*empty.Empty, error)
	Delete(context.Context, *NodeId) (*empty.Empty, error)
	List(*DeploymentId, NodeService_ListServer) error
	Show(context.Context, *NodeId) (*Node, error)
	SetState(context.Context, *SetStateRequest) (*empty.Empty, error)
	SetStateAll(context.Context, *SetAllStatesRequest) (*empty.Empty, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) CreateMulti(ctx context.Context, req *MultiNodeCreateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMulti not implemented")
}
func (*UnimplementedNodeServiceServer) Create(ctx context.Context, req *Node) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodeServiceServer) Delete(ctx context.Context, req *NodeId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodeServiceServer) List(req *DeploymentId, srv NodeService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodeServiceServer) Show(ctx context.Context, req *NodeId) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (*UnimplementedNodeServiceServer) SetState(ctx context.Context, req *SetStateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (*UnimplementedNodeServiceServer) SetStateAll(ctx context.Context, req *SetAllStatesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStateAll not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_CreateMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiNodeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).CreateMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/CreateMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).CreateMulti(ctx, req.(*MultiNodeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Create(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Delete(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).List(m, &nodeServiceListServer{stream})
}

type NodeService_ListServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeServiceListServer struct {
	grpc.ServerStream
}

func (x *nodeServiceListServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Show(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SetStateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SetStateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.NodeService/SetStateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SetStateAll(ctx, req.(*SetAllStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.deployment.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMulti",
			Handler:    _NodeService_CreateMulti_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NodeService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeService_Delete_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _NodeService_Show_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _NodeService_SetState_Handler,
		},
		{
			MethodName: "SetStateAll",
			Handler:    _NodeService_SetStateAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _NodeService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/deployment/node.proto",
}
