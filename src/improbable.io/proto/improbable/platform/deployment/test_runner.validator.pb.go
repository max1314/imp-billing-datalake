// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/deployment/test_runner.proto

package improbable_platform_deployment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *TestRunnerCommand) Validate() error {
	return nil
}
func (this *TestRunnerConfig) Validate() error {
	if nil == this.Command {
		return github_com_mwitkow_go_proto_validators.FieldError("Command", fmt.Errorf("message must exist"))
	}
	if this.Command != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Command); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Command", err)
		}
	}
	return nil
}
func (this *TestRunnerNode) Validate() error {
	if nil == this.NodeId {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf("message must exist"))
	}
	if this.NodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeId", err)
		}
	}
	if nil == this.RunnerConfig {
		return github_com_mwitkow_go_proto_validators.FieldError("RunnerConfig", fmt.Errorf("message must exist"))
	}
	if this.RunnerConfig != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunnerConfig); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunnerConfig", err)
		}
	}
	if this.DebugUrls != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DebugUrls); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DebugUrls", err)
		}
	}
	return nil
}
func (this *CreateMultipleTestRunnerNodesRequest) Validate() error {
	if nil == this.DeploymentId {
		return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", fmt.Errorf("message must exist"))
	}
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	for _, item := range this.Nodes {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Nodes", err)
			}
		}
	}
	return nil
}

var _regex_SetTestRunnerNodeStateRequest_State = regexp.MustCompile(`^(configured|provisioned|running)$`)

func (this *SetTestRunnerNodeStateRequest) Validate() error {
	if nil == this.NodeId {
		return github_com_mwitkow_go_proto_validators.FieldError("NodeId", fmt.Errorf("message must exist"))
	}
	if this.NodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NodeId", err)
		}
	}
	return nil
}
