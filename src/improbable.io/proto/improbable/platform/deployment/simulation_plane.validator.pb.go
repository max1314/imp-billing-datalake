// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/deployment/simulation_plane.proto

package improbable_platform_deployment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *SimulationPlaneId) Validate() error {
	return nil
}

var _regex_SimulationPlane_Provider = regexp.MustCompile(`^(|gce|aws|tct)$`)

func (this *SimulationPlane) Validate() error {
	if nil == this.SimulationPlaneId {
		return github_com_mwitkow_go_proto_validators.FieldError("SimulationPlaneId", fmt.Errorf("message must exist"))
	}
	if this.SimulationPlaneId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SimulationPlaneId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SimulationPlaneId", err)
		}
	}
	if !_regex_SimulationPlane_Provider.MatchString(this.Provider) {
		return github_com_mwitkow_go_proto_validators.FieldError("Provider", fmt.Errorf(`value '%v' must be a string conforming to regex "^(|gce|aws|tct)$"`, this.Provider))
	}
	return nil
}
