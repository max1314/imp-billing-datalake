// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/deployment/test_runner.proto

package improbable_platform_deployment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestRunnerCommand struct {
	AssemblyZip          string   `protobuf:"bytes,1,opt,name=assembly_zip,json=assemblyZip,proto3" json:"assembly_zip,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Args                 []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRunnerCommand) Reset()         { *m = TestRunnerCommand{} }
func (m *TestRunnerCommand) String() string { return proto.CompactTextString(m) }
func (*TestRunnerCommand) ProtoMessage()    {}
func (*TestRunnerCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b1434f3d1eb7a5, []int{0}
}

func (m *TestRunnerCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRunnerCommand.Unmarshal(m, b)
}
func (m *TestRunnerCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRunnerCommand.Marshal(b, m, deterministic)
}
func (m *TestRunnerCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRunnerCommand.Merge(m, src)
}
func (m *TestRunnerCommand) XXX_Size() int {
	return xxx_messageInfo_TestRunnerCommand.Size(m)
}
func (m *TestRunnerCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRunnerCommand.DiscardUnknown(m)
}

var xxx_messageInfo_TestRunnerCommand proto.InternalMessageInfo

func (m *TestRunnerCommand) GetAssemblyZip() string {
	if m != nil {
		return m.AssemblyZip
	}
	return ""
}

func (m *TestRunnerCommand) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TestRunnerCommand) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type TestRunnerConfig struct {
	Command              *TestRunnerCommand `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Instances            int32              `protobuf:"varint,2,opt,name=instances,proto3" json:"instances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TestRunnerConfig) Reset()         { *m = TestRunnerConfig{} }
func (m *TestRunnerConfig) String() string { return proto.CompactTextString(m) }
func (*TestRunnerConfig) ProtoMessage()    {}
func (*TestRunnerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b1434f3d1eb7a5, []int{1}
}

func (m *TestRunnerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRunnerConfig.Unmarshal(m, b)
}
func (m *TestRunnerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRunnerConfig.Marshal(b, m, deterministic)
}
func (m *TestRunnerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRunnerConfig.Merge(m, src)
}
func (m *TestRunnerConfig) XXX_Size() int {
	return xxx_messageInfo_TestRunnerConfig.Size(m)
}
func (m *TestRunnerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRunnerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TestRunnerConfig proto.InternalMessageInfo

func (m *TestRunnerConfig) GetCommand() *TestRunnerCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *TestRunnerConfig) GetInstances() int32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

type TestRunnerNode struct {
	NodeId               *NodeId           `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RunnerConfig         *TestRunnerConfig `protobuf:"bytes,2,opt,name=runner_config,json=runnerConfig,proto3" json:"runner_config,omitempty"`
	Size                 string            `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	State                State             `protobuf:"varint,3,opt,name=state,proto3,enum=improbable.platform.deployment.State" json:"state,omitempty"`
	DebugUrls            *NodeDebugUrls    `protobuf:"bytes,7,opt,name=debug_urls,json=debugUrls,proto3" json:"debug_urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TestRunnerNode) Reset()         { *m = TestRunnerNode{} }
func (m *TestRunnerNode) String() string { return proto.CompactTextString(m) }
func (*TestRunnerNode) ProtoMessage()    {}
func (*TestRunnerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b1434f3d1eb7a5, []int{2}
}

func (m *TestRunnerNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRunnerNode.Unmarshal(m, b)
}
func (m *TestRunnerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRunnerNode.Marshal(b, m, deterministic)
}
func (m *TestRunnerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRunnerNode.Merge(m, src)
}
func (m *TestRunnerNode) XXX_Size() int {
	return xxx_messageInfo_TestRunnerNode.Size(m)
}
func (m *TestRunnerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRunnerNode.DiscardUnknown(m)
}

var xxx_messageInfo_TestRunnerNode proto.InternalMessageInfo

func (m *TestRunnerNode) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TestRunnerNode) GetRunnerConfig() *TestRunnerConfig {
	if m != nil {
		return m.RunnerConfig
	}
	return nil
}

func (m *TestRunnerNode) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *TestRunnerNode) GetState() State {
	if m != nil {
		return m.State
	}
	return State_Unknown
}

func (m *TestRunnerNode) GetDebugUrls() *NodeDebugUrls {
	if m != nil {
		return m.DebugUrls
	}
	return nil
}

type CreateMultipleTestRunnerNodesRequest struct {
	DeploymentId         *DeploymentId     `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Nodes                []*TestRunnerNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	DeploymentUuid       int64             `protobuf:"varint,3,opt,name=deployment_uuid,json=deploymentUuid,proto3" json:"deployment_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateMultipleTestRunnerNodesRequest) Reset()         { *m = CreateMultipleTestRunnerNodesRequest{} }
func (m *CreateMultipleTestRunnerNodesRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMultipleTestRunnerNodesRequest) ProtoMessage()    {}
func (*CreateMultipleTestRunnerNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b1434f3d1eb7a5, []int{3}
}

func (m *CreateMultipleTestRunnerNodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMultipleTestRunnerNodesRequest.Unmarshal(m, b)
}
func (m *CreateMultipleTestRunnerNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMultipleTestRunnerNodesRequest.Marshal(b, m, deterministic)
}
func (m *CreateMultipleTestRunnerNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMultipleTestRunnerNodesRequest.Merge(m, src)
}
func (m *CreateMultipleTestRunnerNodesRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMultipleTestRunnerNodesRequest.Size(m)
}
func (m *CreateMultipleTestRunnerNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMultipleTestRunnerNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMultipleTestRunnerNodesRequest proto.InternalMessageInfo

func (m *CreateMultipleTestRunnerNodesRequest) GetDeploymentId() *DeploymentId {
	if m != nil {
		return m.DeploymentId
	}
	return nil
}

func (m *CreateMultipleTestRunnerNodesRequest) GetNodes() []*TestRunnerNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CreateMultipleTestRunnerNodesRequest) GetDeploymentUuid() int64 {
	if m != nil {
		return m.DeploymentUuid
	}
	return 0
}

type SetTestRunnerNodeStateRequest struct {
	NodeId               *NodeId  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	State                State    `protobuf:"varint,2,opt,name=state,proto3,enum=improbable.platform.deployment.State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetTestRunnerNodeStateRequest) Reset()         { *m = SetTestRunnerNodeStateRequest{} }
func (m *SetTestRunnerNodeStateRequest) String() string { return proto.CompactTextString(m) }
func (*SetTestRunnerNodeStateRequest) ProtoMessage()    {}
func (*SetTestRunnerNodeStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67b1434f3d1eb7a5, []int{4}
}

func (m *SetTestRunnerNodeStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetTestRunnerNodeStateRequest.Unmarshal(m, b)
}
func (m *SetTestRunnerNodeStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetTestRunnerNodeStateRequest.Marshal(b, m, deterministic)
}
func (m *SetTestRunnerNodeStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTestRunnerNodeStateRequest.Merge(m, src)
}
func (m *SetTestRunnerNodeStateRequest) XXX_Size() int {
	return xxx_messageInfo_SetTestRunnerNodeStateRequest.Size(m)
}
func (m *SetTestRunnerNodeStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTestRunnerNodeStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetTestRunnerNodeStateRequest proto.InternalMessageInfo

func (m *SetTestRunnerNodeStateRequest) GetNodeId() *NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *SetTestRunnerNodeStateRequest) GetState() State {
	if m != nil {
		return m.State
	}
	return State_Unknown
}

func init() {
	proto.RegisterType((*TestRunnerCommand)(nil), "improbable.platform.deployment.TestRunnerCommand")
	proto.RegisterType((*TestRunnerConfig)(nil), "improbable.platform.deployment.TestRunnerConfig")
	proto.RegisterType((*TestRunnerNode)(nil), "improbable.platform.deployment.TestRunnerNode")
	proto.RegisterType((*CreateMultipleTestRunnerNodesRequest)(nil), "improbable.platform.deployment.CreateMultipleTestRunnerNodesRequest")
	proto.RegisterType((*SetTestRunnerNodeStateRequest)(nil), "improbable.platform.deployment.SetTestRunnerNodeStateRequest")
}

func init() {
	proto.RegisterFile("improbable/platform/deployment/test_runner.proto", fileDescriptor_67b1434f3d1eb7a5)
}

var fileDescriptor_67b1434f3d1eb7a5 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xf3, 0xdf, 0x49, 0xb7, 0x5b, 0x06, 0x81, 0xa2, 0xb0, 0xec, 0x06, 0xab, 0xa0, 0xec,
	0x42, 0xec, 0x92, 0x95, 0xb8, 0xd8, 0x5d, 0x6e, 0xb2, 0x41, 0x88, 0xaa, 0x70, 0xe1, 0x50, 0x24,
	0x40, 0x6d, 0x34, 0x89, 0x4f, 0xdc, 0x01, 0xdb, 0x63, 0x3c, 0xe3, 0x54, 0x2d, 0x45, 0x42, 0x88,
	0x3e, 0x01, 0x6f, 0xc0, 0x25, 0x5c, 0xf0, 0x26, 0x70, 0xd1, 0x07, 0xa8, 0x54, 0xfa, 0x20, 0x68,
	0xc6, 0x4e, 0xec, 0xfe, 0x3a, 0x91, 0x40, 0xdc, 0x1d, 0xcf, 0xcc, 0x77, 0xce, 0xf9, 0xce, 0xf7,
	0xcd, 0x18, 0x6d, 0x52, 0x2f, 0x08, 0xd9, 0x88, 0x8c, 0x5c, 0x30, 0x03, 0x97, 0x88, 0x09, 0x0b,
	0x3d, 0xd3, 0x86, 0xc0, 0x65, 0x87, 0x1e, 0xf8, 0xc2, 0x14, 0xc0, 0xc5, 0x30, 0x8c, 0x7c, 0x1f,
	0x42, 0x23, 0x08, 0x99, 0x60, 0xf8, 0x61, 0x8a, 0x30, 0x66, 0x08, 0x23, 0x45, 0x34, 0x1f, 0xe7,
	0x64, 0xf4, 0x99, 0x0d, 0x71, 0xaa, 0xe6, 0xbb, 0x39, 0x47, 0xf9, 0x3e, 0x09, 0xc1, 0x4e, 0x0e,
	0x3f, 0x70, 0x18, 0x73, 0x5c, 0x30, 0x49, 0x40, 0x4d, 0xe2, 0xfb, 0x4c, 0x10, 0x41, 0x99, 0xcf,
	0x93, 0xdd, 0x37, 0x92, 0x5d, 0xf5, 0x35, 0x8a, 0x26, 0x26, 0x78, 0x81, 0x38, 0x4c, 0x36, 0x3f,
	0x70, 0xa8, 0xd8, 0x8f, 0x46, 0xc6, 0x98, 0x79, 0xa6, 0x77, 0x40, 0xc5, 0xb7, 0xec, 0xc0, 0x74,
	0x58, 0x47, 0x6d, 0x76, 0xa6, 0xc4, 0xa5, 0x36, 0x11, 0x2c, 0xe4, 0xe6, 0x3c, 0x4c, 0x70, 0xcf,
	0x33, 0xb8, 0xb4, 0xd5, 0x0e, 0x65, 0x29, 0xda, 0x65, 0xce, 0x84, 0x82, 0x6b, 0x73, 0x73, 0x1e,
	0xc5, 0x60, 0x7d, 0x0f, 0xbd, 0xf2, 0x39, 0x70, 0x61, 0xa9, 0xd9, 0xbd, 0x64, 0x9e, 0x47, 0x7c,
	0x1b, 0xbf, 0x85, 0x56, 0x09, 0xe7, 0xe0, 0x8d, 0xdc, 0xc3, 0xe1, 0x11, 0x0d, 0x1a, 0x5a, 0x4b,
	0x6b, 0xaf, 0x58, 0xf5, 0xd9, 0xda, 0x57, 0x34, 0xc0, 0x18, 0x95, 0x02, 0x22, 0xf6, 0x1b, 0x05,
	0xb5, 0xa5, 0x62, 0xb9, 0x46, 0x42, 0x87, 0x37, 0x8a, 0xad, 0xa2, 0x5c, 0x93, 0xb1, 0x7e, 0xa2,
	0xa1, 0xf5, 0x6c, 0x01, 0x7f, 0x42, 0x1d, 0x3c, 0x40, 0xd5, 0x71, 0x5c, 0x4a, 0xa5, 0xae, 0x77,
	0xdf, 0x37, 0xee, 0x96, 0xcb, 0xb8, 0xd6, 0x63, 0xaf, 0x72, 0x7e, 0xf6, 0xa8, 0xd0, 0xd2, 0xac,
	0x59, 0x26, 0xfc, 0x00, 0xad, 0x50, 0x9f, 0x0b, 0xe2, 0x8f, 0x81, 0xab, 0xb6, 0xca, 0x56, 0xba,
	0xa0, 0xff, 0x5d, 0x40, 0x6b, 0x69, 0x92, 0xcf, 0x98, 0x0d, 0xf8, 0x63, 0x54, 0x95, 0x2a, 0x0f,
	0xe9, 0xac, 0x8b, 0x77, 0xf2, 0xba, 0x90, 0xb0, 0x4f, 0xd2, 0xd2, 0x15, 0x5f, 0x7d, 0xe3, 0x5d,
	0x74, 0x2f, 0xf6, 0xde, 0x70, 0xac, 0xf8, 0xa9, 0xea, 0xf5, 0xee, 0xe6, 0x32, 0xa4, 0x24, 0x6e,
	0x9e, 0x78, 0x35, 0xcc, 0x4e, 0x0b, 0xa3, 0x12, 0xa7, 0x47, 0xd0, 0x28, 0xc5, 0xa3, 0x96, 0x31,
	0x7e, 0x8e, 0xca, 0x5c, 0x10, 0x01, 0x8d, 0x62, 0x4b, 0x6b, 0xaf, 0x75, 0xdf, 0xce, 0x2b, 0x35,
	0x90, 0x87, 0xad, 0x18, 0x83, 0xb7, 0x11, 0xb2, 0x61, 0x14, 0x39, 0xc3, 0x28, 0x74, 0x79, 0xa3,
	0xaa, 0x9a, 0xed, 0x2c, 0xc2, 0xbd, 0x2f, 0x51, 0x3b, 0xa1, 0xcb, 0xad, 0x15, 0x7b, 0x16, 0x6e,
	0x95, 0x6a, 0xe5, 0xf5, 0xca, 0x56, 0xa9, 0x56, 0x59, 0xaf, 0xea, 0x27, 0x05, 0xb4, 0xf1, 0x32,
	0x04, 0x22, 0xe0, 0xd3, 0xc8, 0x15, 0x34, 0x70, 0xe1, 0xf2, 0xcc, 0xb9, 0x05, 0xdf, 0x45, 0xc0,
	0x05, 0xfe, 0x12, 0xdd, 0x4b, 0x73, 0xa7, 0x0a, 0xbc, 0x97, 0xd7, 0x45, 0x7f, 0x1e, 0x66, 0x74,
	0x58, 0xb5, 0x33, 0xab, 0xb8, 0x8f, 0xca, 0x52, 0x17, 0xe9, 0x81, 0x62, 0xbb, 0xde, 0x35, 0x16,
	0x57, 0x41, 0x76, 0x68, 0xc5, 0x60, 0xfc, 0x02, 0xdd, 0xcf, 0x34, 0x18, 0x45, 0xd4, 0x56, 0xa3,
	0x2e, 0xf6, 0x5e, 0xfd, 0xf5, 0xf7, 0x87, 0xf7, 0xaf, 0x74, 0x6f, 0xad, 0xa5, 0x9f, 0x3b, 0x11,
	0xb5, 0xf5, 0xbf, 0x34, 0xf4, 0xe6, 0x00, 0xc4, 0xe5, 0xd4, 0xb1, 0x06, 0xc9, 0x00, 0xfe, 0x35,
	0xf3, 0xc1, 0xcc, 0x09, 0x85, 0x25, 0x9c, 0xd0, 0x6b, 0x9f, 0x9f, 0x3d, 0xda, 0x40, 0xfa, 0x5e,
	0x3b, 0x76, 0x6c, 0x14, 0x82, 0x7d, 0x1c, 0x84, 0x6c, 0x4a, 0x39, 0x65, 0x3e, 0xd8, 0xc7, 0xd2,
	0x80, 0xd4, 0x77, 0x1e, 0x6f, 0x24, 0x9e, 0xe9, 0xfe, 0x5c, 0x43, 0xaf, 0x5d, 0xa1, 0x03, 0xe1,
	0x94, 0x8e, 0x01, 0x9f, 0x6a, 0xa8, 0x12, 0x6b, 0x8e, 0x97, 0x9c, 0x75, 0xf3, 0x75, 0x23, 0x7e,
	0x0f, 0x8d, 0xd9, 0x7b, 0x68, 0x7c, 0x24, 0xdf, 0x43, 0xfd, 0x47, 0xed, 0xa7, 0xd3, 0x8b, 0x5f,
	0x0a, 0x47, 0xcd, 0x28, 0xf3, 0xce, 0x72, 0x73, 0xfa, 0xd4, 0xfc, 0x3e, 0x19, 0x9a, 0x71, 0x69,
	0xfe, 0x12, 0xff, 0x0d, 0x8c, 0x55, 0xe8, 0x13, 0x0f, 0x7e, 0xb8, 0xed, 0x5c, 0xbc, 0x99, 0xf9,
	0x5b, 0x0c, 0x95, 0xda, 0xe9, 0x71, 0x75, 0xe0, 0x99, 0xf6, 0x04, 0xff, 0xa9, 0xa1, 0x7a, 0xc6,
	0xc9, 0xb8, 0x9f, 0x47, 0x6d, 0x11, 0xdb, 0xdf, 0x4a, 0x98, 0x28, 0xbe, 0x5f, 0x37, 0xbf, 0xb8,
	0xc6, 0x37, 0x8f, 0xe7, 0x42, 0xfc, 0x24, 0xa1, 0xdf, 0x34, 0x54, 0xda, 0xa6, 0x5c, 0xe0, 0xa5,
	0xee, 0x58, 0x73, 0x49, 0x49, 0xf5, 0x9e, 0x62, 0xf2, 0x02, 0x3f, 0xbb, 0xc6, 0xe4, 0x06, 0x8d,
	0x6e, 0xee, 0x76, 0x53, 0xc3, 0x17, 0x1a, 0xaa, 0x0d, 0x40, 0x28, 0xaf, 0xe2, 0x0f, 0x73, 0x2d,
	0x7d, 0xd7, 0x4d, 0xcb, 0x35, 0x59, 0xf7, 0xff, 0x33, 0xd9, 0x1f, 0x1a, 0xaa, 0xf4, 0xc1, 0x05,
	0x01, 0x78, 0xc1, 0xeb, 0x7f, 0x2b, 0x1b, 0x50, 0x64, 0x86, 0x4f, 0x76, 0xff, 0x1b, 0x07, 0x25,
	0x62, 0x8d, 0x2a, 0xaa, 0xec, 0xd3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x84, 0xea, 0xcf,
	0x91, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestRunnerNodeServiceClient is the client API for TestRunnerNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestRunnerNodeServiceClient interface {
	Create(ctx context.Context, in *TestRunnerNode, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateMulti(ctx context.Context, in *CreateMultipleTestRunnerNodesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (TestRunnerNodeService_ListClient, error)
	SetState(ctx context.Context, in *SetTestRunnerNodeStateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type testRunnerNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestRunnerNodeServiceClient(cc grpc.ClientConnInterface) TestRunnerNodeServiceClient {
	return &testRunnerNodeServiceClient{cc}
}

func (c *testRunnerNodeServiceClient) Create(ctx context.Context, in *TestRunnerNode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.TestRunnerNodeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRunnerNodeServiceClient) CreateMulti(ctx context.Context, in *CreateMultipleTestRunnerNodesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.TestRunnerNodeService/CreateMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRunnerNodeServiceClient) List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (TestRunnerNodeService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestRunnerNodeService_serviceDesc.Streams[0], "/improbable.platform.deployment.TestRunnerNodeService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &testRunnerNodeServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestRunnerNodeService_ListClient interface {
	Recv() (*TestRunnerNode, error)
	grpc.ClientStream
}

type testRunnerNodeServiceListClient struct {
	grpc.ClientStream
}

func (x *testRunnerNodeServiceListClient) Recv() (*TestRunnerNode, error) {
	m := new(TestRunnerNode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testRunnerNodeServiceClient) SetState(ctx context.Context, in *SetTestRunnerNodeStateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.TestRunnerNodeService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testRunnerNodeServiceClient) Delete(ctx context.Context, in *NodeId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.TestRunnerNodeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRunnerNodeServiceServer is the server API for TestRunnerNodeService service.
type TestRunnerNodeServiceServer interface {
	Create(context.Context, *TestRunnerNode) (*empty.Empty, error)
	CreateMulti(context.Context, *CreateMultipleTestRunnerNodesRequest) (*empty.Empty, error)
	List(*DeploymentId, TestRunnerNodeService_ListServer) error
	SetState(context.Context, *SetTestRunnerNodeStateRequest) (*empty.Empty, error)
	Delete(context.Context, *NodeId) (*empty.Empty, error)
}

// UnimplementedTestRunnerNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestRunnerNodeServiceServer struct {
}

func (*UnimplementedTestRunnerNodeServiceServer) Create(ctx context.Context, req *TestRunnerNode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTestRunnerNodeServiceServer) CreateMulti(ctx context.Context, req *CreateMultipleTestRunnerNodesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMulti not implemented")
}
func (*UnimplementedTestRunnerNodeServiceServer) List(req *DeploymentId, srv TestRunnerNodeService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTestRunnerNodeServiceServer) SetState(ctx context.Context, req *SetTestRunnerNodeStateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (*UnimplementedTestRunnerNodeServiceServer) Delete(ctx context.Context, req *NodeId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterTestRunnerNodeServiceServer(s *grpc.Server, srv TestRunnerNodeServiceServer) {
	s.RegisterService(&_TestRunnerNodeService_serviceDesc, srv)
}

func _TestRunnerNodeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRunnerNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRunnerNodeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.TestRunnerNodeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRunnerNodeServiceServer).Create(ctx, req.(*TestRunnerNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRunnerNodeService_CreateMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipleTestRunnerNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRunnerNodeServiceServer).CreateMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.TestRunnerNodeService/CreateMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRunnerNodeServiceServer).CreateMulti(ctx, req.(*CreateMultipleTestRunnerNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRunnerNodeService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestRunnerNodeServiceServer).List(m, &testRunnerNodeServiceListServer{stream})
}

type TestRunnerNodeService_ListServer interface {
	Send(*TestRunnerNode) error
	grpc.ServerStream
}

type testRunnerNodeServiceListServer struct {
	grpc.ServerStream
}

func (x *testRunnerNodeServiceListServer) Send(m *TestRunnerNode) error {
	return x.ServerStream.SendMsg(m)
}

func _TestRunnerNodeService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTestRunnerNodeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRunnerNodeServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.TestRunnerNodeService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRunnerNodeServiceServer).SetState(ctx, req.(*SetTestRunnerNodeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestRunnerNodeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRunnerNodeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.TestRunnerNodeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRunnerNodeServiceServer).Delete(ctx, req.(*NodeId))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestRunnerNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.deployment.TestRunnerNodeService",
	HandlerType: (*TestRunnerNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TestRunnerNodeService_Create_Handler,
		},
		{
			MethodName: "CreateMulti",
			Handler:    _TestRunnerNodeService_CreateMulti_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _TestRunnerNodeService_SetState_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TestRunnerNodeService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _TestRunnerNodeService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/deployment/test_runner.proto",
}
