// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/deployment/flagz.proto

package improbable_platform_deployment

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FlagzId struct {
	DeploymentId         *DeploymentId `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FlagzId) Reset()         { *m = FlagzId{} }
func (m *FlagzId) String() string { return proto.CompactTextString(m) }
func (*FlagzId) ProtoMessage()    {}
func (*FlagzId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d53eb918ffd95ef, []int{0}
}

func (m *FlagzId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlagzId.Unmarshal(m, b)
}
func (m *FlagzId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlagzId.Marshal(b, m, deterministic)
}
func (m *FlagzId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlagzId.Merge(m, src)
}
func (m *FlagzId) XXX_Size() int {
	return xxx_messageInfo_FlagzId.Size(m)
}
func (m *FlagzId) XXX_DiscardUnknown() {
	xxx_messageInfo_FlagzId.DiscardUnknown(m)
}

var xxx_messageInfo_FlagzId proto.InternalMessageInfo

func (m *FlagzId) GetDeploymentId() *DeploymentId {
	if m != nil {
		return m.DeploymentId
	}
	return nil
}

func (m *FlagzId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Flagz struct {
	FlagzId              *FlagzId `protobuf:"bytes,1,opt,name=flagz_id,json=flagzId,proto3" json:"flagz_id,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flagz) Reset()         { *m = Flagz{} }
func (m *Flagz) String() string { return proto.CompactTextString(m) }
func (*Flagz) ProtoMessage()    {}
func (*Flagz) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d53eb918ffd95ef, []int{1}
}

func (m *Flagz) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flagz.Unmarshal(m, b)
}
func (m *Flagz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flagz.Marshal(b, m, deterministic)
}
func (m *Flagz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flagz.Merge(m, src)
}
func (m *Flagz) XXX_Size() int {
	return xxx_messageInfo_Flagz.Size(m)
}
func (m *Flagz) XXX_DiscardUnknown() {
	xxx_messageInfo_Flagz.DiscardUnknown(m)
}

var xxx_messageInfo_Flagz proto.InternalMessageInfo

func (m *Flagz) GetFlagzId() *FlagzId {
	if m != nil {
		return m.FlagzId
	}
	return nil
}

func (m *Flagz) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Flagz) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*FlagzId)(nil), "improbable.platform.deployment.FlagzId")
	proto.RegisterType((*Flagz)(nil), "improbable.platform.deployment.Flagz")
}

func init() {
	proto.RegisterFile("improbable/platform/deployment/flagz.proto", fileDescriptor_6d53eb918ffd95ef)
}

var fileDescriptor_6d53eb918ffd95ef = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcf, 0x6e, 0xd3, 0x30,
	0x00, 0xc6, 0xe5, 0xae, 0xed, 0xc0, 0x1b, 0x17, 0x0b, 0x4d, 0x55, 0x98, 0x58, 0x55, 0x81, 0x98,
	0xca, 0x62, 0x97, 0x56, 0x9a, 0x80, 0x1b, 0xd3, 0x40, 0x1a, 0xe2, 0x42, 0x7b, 0x1a, 0x08, 0x26,
	0xa7, 0x71, 0x53, 0x83, 0x13, 0x07, 0xc7, 0x6d, 0xb5, 0x55, 0xbb, 0x70, 0xe5, 0x88, 0xe0, 0x09,
	0x78, 0x01, 0x1e, 0x80, 0x03, 0xcf, 0xc0, 0x03, 0x4c, 0x9a, 0x78, 0x10, 0x14, 0xc7, 0xfd, 0xa7,
	0x6a, 0x34, 0x48, 0x9c, 0x62, 0xfb, 0xfb, 0xe2, 0xfc, 0xbe, 0x2f, 0x36, 0xac, 0xf3, 0x30, 0x56,
	0xd2, 0xa3, 0x9e, 0x60, 0x24, 0x16, 0x54, 0xf7, 0xa4, 0x0a, 0x89, 0xcf, 0x62, 0x21, 0x4f, 0x43,
	0x16, 0x69, 0xd2, 0x13, 0x34, 0x38, 0xc3, 0xb1, 0x92, 0x5a, 0xa2, 0xdb, 0x33, 0x2f, 0x9e, 0x78,
	0xf1, 0xcc, 0xeb, 0xdc, 0x5f, 0xb1, 0x57, 0xd2, 0xa7, 0x8a, 0xf9, 0xd9, 0x66, 0xce, 0x76, 0x20,
	0x65, 0x20, 0x18, 0xa1, 0x31, 0x27, 0x34, 0x8a, 0xa4, 0xa6, 0x9a, 0xcb, 0x28, 0xb1, 0xea, 0x2d,
	0xab, 0x9a, 0x99, 0x37, 0xe8, 0x11, 0x16, 0xc6, 0xfa, 0xd4, 0x8a, 0xfb, 0x01, 0xd7, 0xfd, 0x81,
	0x87, 0xbb, 0x32, 0x24, 0xe1, 0x88, 0xeb, 0xf7, 0x72, 0x44, 0x02, 0xe9, 0x1a, 0xd1, 0x1d, 0x52,
	0xc1, 0x7d, 0xaa, 0xa5, 0x4a, 0xc8, 0x74, 0x98, 0xbd, 0x57, 0xfb, 0x0a, 0xe0, 0xfa, 0xb3, 0x34,
	0xcf, 0x91, 0x8f, 0x8e, 0xe1, 0x8d, 0x19, 0xd9, 0x09, 0xf7, 0x2b, 0xa0, 0x0a, 0x76, 0x37, 0x9a,
	0x7b, 0xf8, 0xef, 0x19, 0xf1, 0xe1, 0x74, 0x78, 0xe4, 0x1f, 0x94, 0x2f, 0x2f, 0x76, 0x0a, 0x55,
	0xd0, 0xde, 0xf4, 0xe7, 0x56, 0x51, 0x03, 0x16, 0x23, 0x1a, 0xb2, 0x4a, 0xa1, 0x0a, 0x76, 0xaf,
	0x1f, 0x6c, 0x5f, 0x5e, 0xec, 0x54, 0xe0, 0xd6, 0xdb, 0xd7, 0xd4, 0x3d, 0x7b, 0xe2, 0xbe, 0x6a,
	0xb8, 0x8f, 0x4e, 0xdc, 0x37, 0xe3, 0xd6, 0xde, 0x83, 0xe6, 0xc3, 0xf3, 0x3b, 0x6d, 0xe3, 0xac,
	0x7d, 0x02, 0xb0, 0x64, 0xc0, 0xd0, 0x73, 0x78, 0xcd, 0x34, 0x3e, 0x23, 0xba, 0xb7, 0x8a, 0xc8,
	0x26, 0x9a, 0xc2, 0xac, 0xf7, 0x6c, 0xc4, 0x9b, 0xb0, 0x34, 0xa4, 0x62, 0x60, 0x41, 0xda, 0xd9,
	0x04, 0x55, 0xe1, 0x86, 0xcf, 0x92, 0xae, 0xe2, 0x71, 0xda, 0x77, 0x65, 0xcd, 0x68, 0xf3, 0x4b,
	0xcd, 0x9f, 0x25, 0xb8, 0x69, 0x36, 0xed, 0x30, 0x35, 0xe4, 0x5d, 0x86, 0xbe, 0x00, 0x58, 0x7c,
	0xc1, 0x13, 0x8d, 0xfe, 0xa9, 0x1d, 0xe7, 0x6e, 0x2e, 0xf2, 0xda, 0xfe, 0xc7, 0x5f, 0xbf, 0x3f,
	0x17, 0x1a, 0x08, 0xcf, 0x1d, 0x95, 0x84, 0x0c, 0x5b, 0x64, 0x1c, 0x2b, 0xf9, 0x8e, 0x75, 0xd3,
	0xbf, 0x83, 0xd3, 0x9a, 0xce, 0xc9, 0x38, 0x7b, 0x98, 0x80, 0x0d, 0x80, 0xbe, 0x03, 0x58, 0xec,
	0xf4, 0xe5, 0x08, 0xe5, 0xed, 0x28, 0x2f, 0xd2, 0xb1, 0x41, 0xea, 0xa0, 0x97, 0x4b, 0x48, 0x0b,
	0x67, 0x06, 0x2f, 0x03, 0x2e, 0xea, 0x73, 0xb8, 0x96, 0x1d, 0xfd, 0x00, 0x70, 0xad, 0xc3, 0x34,
	0xca, 0x47, 0xe2, 0x6c, 0xe1, 0xec, 0x22, 0xe0, 0xc9, 0x45, 0xc0, 0x4f, 0xd3, 0x8b, 0x50, 0x1b,
	0x19, 0xc2, 0x0f, 0x8e, 0x58, 0x22, 0x9c, 0x1c, 0x1f, 0xbc, 0x0a, 0xf5, 0x0a, 0xe3, 0x02, 0xf3,
	0xd4, 0x63, 0x56, 0x1f, 0x83, 0x3a, 0xfa, 0x06, 0x60, 0xf9, 0x90, 0x09, 0xa6, 0x59, 0xfe, 0xd6,
	0xaf, 0x0a, 0x61, 0x6b, 0xae, 0xff, 0xff, 0x9a, 0xbd, 0xb2, 0xf9, 0x54, 0xeb, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x60, 0x30, 0x83, 0x20, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlagzServiceClient is the client API for FlagzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlagzServiceClient interface {
	List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (FlagzService_ListClient, error)
	Show(ctx context.Context, in *FlagzId, opts ...grpc.CallOption) (*Flagz, error)
	Set(ctx context.Context, in *Flagz, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *FlagzId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type flagzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagzServiceClient(cc grpc.ClientConnInterface) FlagzServiceClient {
	return &flagzServiceClient{cc}
}

func (c *flagzServiceClient) List(ctx context.Context, in *DeploymentId, opts ...grpc.CallOption) (FlagzService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlagzService_serviceDesc.Streams[0], "/improbable.platform.deployment.FlagzService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &flagzServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlagzService_ListClient interface {
	Recv() (*Flagz, error)
	grpc.ClientStream
}

type flagzServiceListClient struct {
	grpc.ClientStream
}

func (x *flagzServiceListClient) Recv() (*Flagz, error) {
	m := new(Flagz)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flagzServiceClient) Show(ctx context.Context, in *FlagzId, opts ...grpc.CallOption) (*Flagz, error) {
	out := new(Flagz)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.FlagzService/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagzServiceClient) Set(ctx context.Context, in *Flagz, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.FlagzService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagzServiceClient) Delete(ctx context.Context, in *FlagzId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.deployment.FlagzService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagzServiceServer is the server API for FlagzService service.
type FlagzServiceServer interface {
	List(*DeploymentId, FlagzService_ListServer) error
	Show(context.Context, *FlagzId) (*Flagz, error)
	Set(context.Context, *Flagz) (*empty.Empty, error)
	Delete(context.Context, *FlagzId) (*empty.Empty, error)
}

// UnimplementedFlagzServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlagzServiceServer struct {
}

func (*UnimplementedFlagzServiceServer) List(req *DeploymentId, srv FlagzService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedFlagzServiceServer) Show(ctx context.Context, req *FlagzId) (*Flagz, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (*UnimplementedFlagzServiceServer) Set(ctx context.Context, req *Flagz) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedFlagzServiceServer) Delete(ctx context.Context, req *FlagzId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterFlagzServiceServer(s *grpc.Server, srv FlagzServiceServer) {
	s.RegisterService(&_FlagzService_serviceDesc, srv)
}

func _FlagzService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagzServiceServer).List(m, &flagzServiceListServer{stream})
}

type FlagzService_ListServer interface {
	Send(*Flagz) error
	grpc.ServerStream
}

type flagzServiceListServer struct {
	grpc.ServerStream
}

func (x *flagzServiceListServer) Send(m *Flagz) error {
	return x.ServerStream.SendMsg(m)
}

func _FlagzService_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagzId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagzServiceServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.FlagzService/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagzServiceServer).Show(ctx, req.(*FlagzId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagzService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flagz)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagzServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.FlagzService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagzServiceServer).Set(ctx, req.(*Flagz))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagzService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagzId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagzServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.deployment.FlagzService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagzServiceServer).Delete(ctx, req.(*FlagzId))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlagzService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.deployment.FlagzService",
	HandlerType: (*FlagzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _FlagzService_Show_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _FlagzService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FlagzService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _FlagzService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/deployment/flagz.proto",
}
