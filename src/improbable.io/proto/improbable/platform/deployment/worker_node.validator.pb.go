// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/deployment/worker_node.proto

package improbable_platform_deployment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/improbable-io/go-proto-logfields"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "improbable.io/proto/improbable/platform"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *WorkerNodeId) Validate() error {
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	return nil
}
func (this *WorkerNode) Validate() error {
	if this.WorkerNodeId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerNodeId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerNodeId", err)
		}
	}
	if this.LastMachineError != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LastMachineError); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LastMachineError", err)
		}
	}
	return nil
}
func (this *CreateMultiWorkerNodeRequest) Validate() error {
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	for _, item := range this.WorkerNodes {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("WorkerNodes", err)
			}
		}
	}
	return nil
}
func (this *CreateMultiWorkerNodeResponse) Validate() error {
	return nil
}
func (this *ListWorkerNodesRequest) Validate() error {
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	return nil
}
func (this *ListWorkerNodesResponse) Validate() error {
	for _, item := range this.WorkerNodes {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("WorkerNodes", err)
			}
		}
	}
	return nil
}
func (this *SetAllWorkerNodeStateRequest) Validate() error {
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	return nil
}
func (this *SetAllWorkerNodeStateResponse) Validate() error {
	return nil
}
func (this *GetWorkerNodeCredsRequest) Validate() error {
	if this.DeploymentId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DeploymentId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DeploymentId", err)
		}
	}
	return nil
}
func (this *GetWorkerNodeCredsResponse) Validate() error {
	return nil
}
