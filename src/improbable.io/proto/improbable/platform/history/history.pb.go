// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/platform/history/history.proto

package improbable_platform_history

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	platform "improbable.io/proto/improbable/platform"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HistoryId struct {
	ProjectId            *platform.ProjectId `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HistoryId) Reset()         { *m = HistoryId{} }
func (m *HistoryId) String() string { return proto.CompactTextString(m) }
func (*HistoryId) ProtoMessage()    {}
func (*HistoryId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fbfdeb58e8a26a, []int{0}
}

func (m *HistoryId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoryId.Unmarshal(m, b)
}
func (m *HistoryId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoryId.Marshal(b, m, deterministic)
}
func (m *HistoryId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryId.Merge(m, src)
}
func (m *HistoryId) XXX_Size() int {
	return xxx_messageInfo_HistoryId.Size(m)
}
func (m *HistoryId) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryId.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryId proto.InternalMessageInfo

func (m *HistoryId) GetProjectId() *platform.ProjectId {
	if m != nil {
		return m.ProjectId
	}
	return nil
}

func (m *HistoryId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type History struct {
	HistoryId            *HistoryId           `protobuf:"bytes,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	CreationTime         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *History) Reset()         { *m = History{} }
func (m *History) String() string { return proto.CompactTextString(m) }
func (*History) ProtoMessage()    {}
func (*History) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7fbfdeb58e8a26a, []int{1}
}

func (m *History) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_History.Unmarshal(m, b)
}
func (m *History) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_History.Marshal(b, m, deterministic)
}
func (m *History) XXX_Merge(src proto.Message) {
	xxx_messageInfo_History.Merge(m, src)
}
func (m *History) XXX_Size() int {
	return xxx_messageInfo_History.Size(m)
}
func (m *History) XXX_DiscardUnknown() {
	xxx_messageInfo_History.DiscardUnknown(m)
}

var xxx_messageInfo_History proto.InternalMessageInfo

func (m *History) GetHistoryId() *HistoryId {
	if m != nil {
		return m.HistoryId
	}
	return nil
}

func (m *History) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func init() {
	proto.RegisterType((*HistoryId)(nil), "improbable.platform.history.HistoryId")
	proto.RegisterType((*History)(nil), "improbable.platform.history.History")
}

func init() {
	proto.RegisterFile("improbable/platform/history/history.proto", fileDescriptor_d7fbfdeb58e8a26a)
}

var fileDescriptor_d7fbfdeb58e8a26a = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x51, 0x6b, 0x13, 0x4d,
	0x14, 0x65, 0xfb, 0x95, 0x7c, 0x74, 0x5a, 0x0b, 0xae, 0x22, 0x75, 0x5b, 0x9b, 0xb0, 0x84, 0xd0,
	0x06, 0x33, 0x53, 0x12, 0x10, 0xb4, 0x88, 0x50, 0x2d, 0xb5, 0xa2, 0x50, 0xa2, 0x2f, 0x12, 0x6a,
	0x98, 0x24, 0x93, 0xcd, 0xd4, 0x9d, 0x9d, 0x61, 0x76, 0x92, 0x68, 0x43, 0x5e, 0xfc, 0x07, 0xe2,
	0x93, 0x79, 0x09, 0xf8, 0x22, 0xe2, 0xdf, 0xf0, 0xd1, 0x27, 0xfd, 0x01, 0x85, 0xe2, 0x0f, 0x91,
	0x9d, 0xcc, 0x6e, 0xaa, 0x86, 0x98, 0x80, 0x4f, 0xbb, 0xb9, 0xf7, 0x9c, 0xbd, 0xe7, 0xdc, 0x93,
	0x0b, 0xb6, 0x29, 0x13, 0x92, 0xd7, 0x70, 0xcd, 0x27, 0x48, 0xf8, 0x58, 0x35, 0xb9, 0x64, 0xa8,
	0x45, 0x43, 0xc5, 0xe5, 0xeb, 0xf8, 0x09, 0x85, 0xe4, 0x8a, 0xdb, 0xeb, 0x63, 0x28, 0x8c, 0xa1,
	0xd0, 0x40, 0x9c, 0xcc, 0xa4, 0xef, 0xd4, 0x39, 0x63, 0x3c, 0x18, 0xd1, 0x9d, 0xdc, 0x05, 0x04,
	0x79, 0xa5, 0x90, 0xf0, 0xdb, 0x1e, 0x0d, 0x10, 0x6e, 0xab, 0x16, 0x12, 0x44, 0xb2, 0xd0, 0xe0,
	0x36, 0x3c, 0xce, 0x3d, 0x9f, 0x20, 0x2c, 0x28, 0xc2, 0x41, 0xc0, 0x15, 0x56, 0x94, 0x07, 0x71,
	0x77, 0xdd, 0x74, 0xf5, 0xaf, 0x5a, 0xbb, 0x89, 0x08, 0x13, 0xca, 0x28, 0x74, 0xd2, 0xbf, 0x37,
	0x15, 0x65, 0x24, 0x54, 0x98, 0x09, 0x03, 0xb8, 0xe5, 0x51, 0xd5, 0x6a, 0xd7, 0x60, 0x9d, 0x33,
	0xc4, 0xba, 0x54, 0xbd, 0xe4, 0x5d, 0xe4, 0xf1, 0x82, 0x6e, 0x16, 0x3a, 0xd8, 0xa7, 0x0d, 0xac,
	0xb8, 0x0c, 0x51, 0xf2, 0x6a, 0x78, 0xbb, 0x17, 0x78, 0x63, 0x1b, 0x05, 0xca, 0xc7, 0x6c, 0x9f,
	0x7b, 0x4d, 0x4a, 0xfc, 0x46, 0x88, 0x92, 0xb7, 0x11, 0xd9, 0x7d, 0x6b, 0x81, 0xa5, 0x87, 0xa3,
	0x35, 0x1d, 0x36, 0xec, 0x7d, 0x00, 0x84, 0xe4, 0x27, 0xa4, 0xae, 0xaa, 0xb4, 0xb1, 0x66, 0x65,
	0xac, 0xad, 0xe5, 0xe2, 0x26, 0x9c, 0xb4, 0xda, 0xa3, 0x11, 0xec, 0xb0, 0xb1, 0x97, 0x3a, 0x3f,
	0x4b, 0x2f, 0x64, 0xac, 0xf2, 0x92, 0x88, 0x4b, 0xf6, 0x5d, 0xb0, 0x18, 0x60, 0x46, 0xd6, 0x16,
	0x32, 0xd6, 0xd6, 0xd2, 0xde, 0xf6, 0x87, 0xcf, 0x9b, 0xab, 0x60, 0xc5, 0x84, 0x51, 0x8d, 0x3a,
	0xe7, 0x67, 0xe9, 0x2b, 0xe0, 0xf2, 0x8b, 0x0a, 0x2e, 0x9c, 0xee, 0x14, 0x6e, 0x57, 0x8f, 0x7b,
	0xc5, 0x9b, 0xa5, 0x62, 0x3f, 0x5b, 0xd6, 0x34, 0xf7, 0xbd, 0x05, 0xfe, 0x37, 0x9a, 0xec, 0x27,
	0x00, 0xc4, 0xc4, 0x44, 0x51, 0x0e, 0x4e, 0x09, 0x1b, 0x26, 0x6e, 0xc6, 0xca, 0x5a, 0x89, 0xc1,
	0x7b, 0xe0, 0x52, 0x5d, 0x12, 0x1d, 0x5a, 0x35, 0xda, 0xbf, 0x96, 0xb8, 0x5c, 0x74, 0xe0, 0x28,
	0x1c, 0x18, 0x87, 0x03, 0x9f, 0xc5, 0xe1, 0x94, 0x57, 0x62, 0x42, 0x54, 0x2a, 0x7e, 0x4c, 0x81,
	0x55, 0x33, 0xe1, 0x29, 0x91, 0x1d, 0x5a, 0x27, 0xf6, 0x37, 0x0b, 0xa4, 0xee, 0x47, 0x18, 0x62,
	0xcf, 0xa8, 0xcc, 0xc9, 0xce, 0x82, 0x73, 0x4f, 0x07, 0x43, 0xf7, 0x11, 0xd8, 0x08, 0x03, 0x2c,
	0xc2, 0x16, 0x57, 0xa6, 0x7c, 0x24, 0x69, 0x07, 0x2b, 0x62, 0x26, 0xe6, 0x2b, 0xdd, 0xe3, 0x3b,
	0x42, 0x9e, 0xa0, 0x1e, 0x96, 0x9e, 0x0e, 0x35, 0xca, 0xa0, 0xaf, 0xaf, 0xc3, 0xd4, 0xcc, 0x67,
	0xfb, 0x6f, 0xbe, 0xff, 0x78, 0xb7, 0x90, 0x73, 0xb2, 0xc9, 0x05, 0x75, 0x4a, 0xa8, 0x37, 0x8e,
	0x1b, 0x46, 0xbb, 0xef, 0xa3, 0x9e, 0x7e, 0xd8, 0x5f, 0x2d, 0xf0, 0xdf, 0x01, 0x51, 0xff, 0xd8,
	0x51, 0x77, 0x30, 0x74, 0x0f, 0xc0, 0xf5, 0xc9, 0x8e, 0xa2, 0x71, 0xf9, 0x8a, 0x9c, 0xcf, 0x8e,
	0x3d, 0x9b, 0x9d, 0x2f, 0x16, 0x48, 0x3d, 0x20, 0x3e, 0x99, 0x23, 0xa3, 0x6b, 0x7f, 0xfc, 0x27,
	0xf6, 0xa3, 0x6b, 0x9e, 0x9e, 0x8a, 0x99, 0x31, 0x77, 0x2a, 0xf9, 0xd9, 0x6c, 0x7c, 0xb2, 0xc0,
	0xe2, 0x63, 0x1a, 0x2a, 0xfb, 0x2f, 0x47, 0x39, 0x63, 0x1c, 0xcf, 0x07, 0x43, 0x77, 0x17, 0x38,
	0x93, 0xad, 0xe8, 0x39, 0x37, 0xa6, 0xe5, 0x91, 0xd7, 0xda, 0xaf, 0xda, 0xf6, 0x2f, 0xda, 0xb5,
	0xd2, 0x1d, 0xab, 0x96, 0xd2, 0x7b, 0x2b, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x95, 0xb9,
	0xe6, 0xc5, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistoryServiceClient interface {
	Create(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*History, error)
	Get(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*History, error)
	Delete(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *platform.ProjectId, opts ...grpc.CallOption) (HistoryService_ListClient, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) Create(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*History, error) {
	out := new(History)
	err := c.cc.Invoke(ctx, "/improbable.platform.history.HistoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) Get(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*History, error) {
	out := new(History)
	err := c.cc.Invoke(ctx, "/improbable.platform.history.HistoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) Delete(ctx context.Context, in *HistoryId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.platform.history.HistoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) List(ctx context.Context, in *platform.ProjectId, opts ...grpc.CallOption) (HistoryService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HistoryService_serviceDesc.Streams[0], "/improbable.platform.history.HistoryService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &historyServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoryService_ListClient interface {
	Recv() (*History, error)
	grpc.ClientStream
}

type historyServiceListClient struct {
	grpc.ClientStream
}

func (x *historyServiceListClient) Recv() (*History, error) {
	m := new(History)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistoryServiceServer is the server API for HistoryService service.
type HistoryServiceServer interface {
	Create(context.Context, *HistoryId) (*History, error)
	Get(context.Context, *HistoryId) (*History, error)
	Delete(context.Context, *HistoryId) (*empty.Empty, error)
	List(*platform.ProjectId, HistoryService_ListServer) error
}

// UnimplementedHistoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (*UnimplementedHistoryServiceServer) Create(ctx context.Context, req *HistoryId) (*History, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedHistoryServiceServer) Get(ctx context.Context, req *HistoryId) (*History, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedHistoryServiceServer) Delete(ctx context.Context, req *HistoryId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedHistoryServiceServer) List(req *platform.ProjectId, srv HistoryService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterHistoryServiceServer(s *grpc.Server, srv HistoryServiceServer) {
	s.RegisterService(&_HistoryService_serviceDesc, srv)
}

func _HistoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.history.HistoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).Create(ctx, req.(*HistoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.history.HistoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).Get(ctx, req.(*HistoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.platform.history.HistoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).Delete(ctx, req.(*HistoryId))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(platform.ProjectId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoryServiceServer).List(m, &historyServiceListServer{stream})
}

type HistoryService_ListServer interface {
	Send(*History) error
	grpc.ServerStream
}

type historyServiceListServer struct {
	grpc.ServerStream
}

func (x *historyServiceListServer) Send(m *History) error {
	return x.ServerStream.SendMsg(m)
}

var _HistoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.platform.history.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HistoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HistoryService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HistoryService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _HistoryService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "improbable/platform/history/history.proto",
}
