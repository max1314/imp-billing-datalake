// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/platform/project/project.proto

package improbable_platform_project

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "improbable.io/proto/improbable/platform"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_Project_Title = regexp.MustCompile(`^.{0,64}$`)
var _regex_Project_Description = regexp.MustCompile(`^.{0,256}$`)

func (this *Project) Validate() error {
	if nil == this.ProjectId {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectId", fmt.Errorf("message must exist"))
	}
	if this.ProjectId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ProjectId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ProjectId", err)
		}
	}
	if this.CreationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTime", err)
		}
	}
	if !_regex_Project_Title.MatchString(this.Title) {
		return github_com_mwitkow_go_proto_validators.FieldError("Title", fmt.Errorf(`value '%v' must be a string conforming to regex "^.{0,64}$"`, this.Title))
	}
	if !_regex_Project_Description.MatchString(this.Description) {
		return github_com_mwitkow_go_proto_validators.FieldError("Description", fmt.Errorf(`value '%v' must be a string conforming to regex "^.{0,256}$"`, this.Description))
	}
	return nil
}
func (this *ListRequest) Validate() error {
	return nil
}
func (this *DeleteProjectRequest) Validate() error {
	if nil == this.ProjectId {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectId", fmt.Errorf("message must exist"))
	}
	if this.ProjectId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ProjectId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ProjectId", err)
		}
	}
	return nil
}
func (this *DeleteProjectResponse) Validate() error {
	return nil
}
