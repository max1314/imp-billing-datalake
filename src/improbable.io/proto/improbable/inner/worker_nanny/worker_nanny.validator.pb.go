// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/inner/worker_nanny/worker_nanny.proto

package improbable_inner_worker_nanny

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/improbable-io/go-proto-logfields"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "improbable.io/proto/improbable/platform/deployment"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_WorkerType_Type = regexp.MustCompile(`^[a-zA-Z0-9_]{5,64}$`)

func (this *WorkerType) Validate() error {
	if !_regex_WorkerType_Type.MatchString(this.Type) {
		return github_com_mwitkow_go_proto_validators.FieldError("Type", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{5,64}$"`, this.Type))
	}
	return nil
}
func (this *WorkerInstanceId) Validate() error {
	return nil
}
func (this *WorkerState) Validate() error {
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	if this.WorkerType != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerType); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerType", err)
		}
	}
	return nil
}
func (this *ExposedPort) Validate() error {
	return nil
}
func (this *CreateWorkerRequest) Validate() error {
	if nil == this.WorkerType {
		return github_com_mwitkow_go_proto_validators.FieldError("WorkerType", fmt.Errorf("message must exist"))
	}
	if this.WorkerType != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerType); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerType", err)
		}
	}
	for _, item := range this.ForwardedPorts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("ForwardedPorts", err)
			}
		}
	}
	return nil
}
func (this *CreateWorkerResponse) Validate() error {
	return nil
}
func (this *AddWorkerRequest) Validate() error {
	if nil == this.WorkerType {
		return github_com_mwitkow_go_proto_validators.FieldError("WorkerType", fmt.Errorf("message must exist"))
	}
	if this.WorkerType != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerType); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerType", err)
		}
	}
	for _, item := range this.ForwardedPorts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("ForwardedPorts", err)
			}
		}
	}
	return nil
}
func (this *AddWorkerResponse) Validate() error {
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	return nil
}
func (this *StartWorkerRequest) Validate() error {
	if nil == this.WorkerInstanceId {
		return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", fmt.Errorf("message must exist"))
	}
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	return nil
}
func (this *StartWorkerResponse) Validate() error {
	return nil
}
func (this *StopWorkerRequest) Validate() error {
	if nil == this.WorkerInstanceId {
		return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", fmt.Errorf("message must exist"))
	}
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	return nil
}
func (this *StopWorkerResponse) Validate() error {
	return nil
}
func (this *ListWorkersRequest) Validate() error {
	return nil
}
func (this *ListWorkersResponse) Validate() error {
	for _, item := range this.WorkerState {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("WorkerState", err)
			}
		}
	}
	return nil
}
func (this *NodeResourcesUsageRequest) Validate() error {
	return nil
}
func (this *NodeResourcesUsageResponse) Validate() error {
	if this.CpuUsage != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CpuUsage); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CpuUsage", err)
		}
	}
	return nil
}
func (this *GetDialCertificateRequest) Validate() error {
	return nil
}
func (this *GetDialCertificateResponse) Validate() error {
	return nil
}
func (this *TerminalSize) Validate() error {
	return nil
}
func (this *WorkerShellAccessRequest) Validate() error {
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	if this.TerminalSize != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TerminalSize); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TerminalSize", err)
		}
	}
	return nil
}
func (this *WorkerShellAccessResponse) Validate() error {
	return nil
}
func (this *WorkerPortForwardRequest) Validate() error {
	if this.WorkerInstanceId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.WorkerInstanceId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("WorkerInstanceId", err)
		}
	}
	return nil
}
func (this *WorkerPortForwardResponse) Validate() error {
	return nil
}
