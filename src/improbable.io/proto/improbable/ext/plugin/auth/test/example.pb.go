// Code generated by protoc-gen-go. DO NOT EDIT.
// source: improbable/ext/plugin/auth/test/example.proto

package improbable_ext_plugin_auth_test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MyDeployment struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyDeployment) Reset()         { *m = MyDeployment{} }
func (m *MyDeployment) String() string { return proto.CompactTextString(m) }
func (*MyDeployment) ProtoMessage()    {}
func (*MyDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_0999a3ba6fd6b0d2, []int{0}
}

func (m *MyDeployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyDeployment.Unmarshal(m, b)
}
func (m *MyDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyDeployment.Marshal(b, m, deterministic)
}
func (m *MyDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyDeployment.Merge(m, src)
}
func (m *MyDeployment) XXX_Size() int {
	return xxx_messageInfo_MyDeployment.Size(m)
}
func (m *MyDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_MyDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_MyDeployment proto.InternalMessageInfo

func (m *MyDeployment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MyRequest struct {
	Item                 string               `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Action               string               `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Project              *MyRequest_MyProject `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Dpl                  *MyDeployment        `protobuf:"bytes,4,opt,name=dpl,proto3" json:"dpl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MyRequest) Reset()         { *m = MyRequest{} }
func (m *MyRequest) String() string { return proto.CompactTextString(m) }
func (*MyRequest) ProtoMessage()    {}
func (*MyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0999a3ba6fd6b0d2, []int{1}
}

func (m *MyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyRequest.Unmarshal(m, b)
}
func (m *MyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyRequest.Marshal(b, m, deterministic)
}
func (m *MyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyRequest.Merge(m, src)
}
func (m *MyRequest) XXX_Size() int {
	return xxx_messageInfo_MyRequest.Size(m)
}
func (m *MyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MyRequest proto.InternalMessageInfo

func (m *MyRequest) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *MyRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *MyRequest) GetProject() *MyRequest_MyProject {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *MyRequest) GetDpl() *MyDeployment {
	if m != nil {
		return m.Dpl
	}
	return nil
}

type MyRequest_MyProject struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyRequest_MyProject) Reset()         { *m = MyRequest_MyProject{} }
func (m *MyRequest_MyProject) String() string { return proto.CompactTextString(m) }
func (*MyRequest_MyProject) ProtoMessage()    {}
func (*MyRequest_MyProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_0999a3ba6fd6b0d2, []int{1, 0}
}

func (m *MyRequest_MyProject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyRequest_MyProject.Unmarshal(m, b)
}
func (m *MyRequest_MyProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyRequest_MyProject.Marshal(b, m, deterministic)
}
func (m *MyRequest_MyProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyRequest_MyProject.Merge(m, src)
}
func (m *MyRequest_MyProject) XXX_Size() int {
	return xxx_messageInfo_MyRequest_MyProject.Size(m)
}
func (m *MyRequest_MyProject) XXX_DiscardUnknown() {
	xxx_messageInfo_MyRequest_MyProject.DiscardUnknown(m)
}

var xxx_messageInfo_MyRequest_MyProject proto.InternalMessageInfo

func (m *MyRequest_MyProject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*MyDeployment)(nil), "improbable.ext.plugin.auth.test.MyDeployment")
	proto.RegisterType((*MyRequest)(nil), "improbable.ext.plugin.auth.test.MyRequest")
	proto.RegisterType((*MyRequest_MyProject)(nil), "improbable.ext.plugin.auth.test.MyRequest.MyProject")
}

func init() {
	proto.RegisterFile("improbable/ext/plugin/auth/test/example.proto", fileDescriptor_0999a3ba6fd6b0d2)
}

var fileDescriptor_0999a3ba6fd6b0d2 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xd1, 0x6a, 0x13, 0x41,
	0x14, 0x65, 0xdb, 0xd2, 0xd2, 0x69, 0x29, 0x38, 0x4a, 0x08, 0x11, 0xda, 0x30, 0x0f, 0x35, 0x88,
	0x9d, 0xa5, 0xa9, 0x4f, 0xfb, 0x60, 0xa1, 0xad, 0x8a, 0x60, 0x6c, 0x49, 0x6c, 0x11, 0x54, 0x64,
	0x93, 0xbd, 0x26, 0x53, 0x77, 0x76, 0xa6, 0x93, 0x89, 0x64, 0x29, 0xf9, 0x89, 0x3e, 0xae, 0xc8,
	0x94, 0xfe, 0x83, 0x1f, 0x22, 0x7e, 0x85, 0x7f, 0x21, 0x33, 0x9b, 0x4d, 0x54, 0xaa, 0xed, 0x43,
	0xde, 0x66, 0xef, 0x3d, 0xf7, 0xcc, 0x39, 0xe7, 0xee, 0xa0, 0x2d, 0xc6, 0xa5, 0x12, 0xed, 0xb0,
	0x1d, 0x83, 0x0f, 0x43, 0xed, 0xcb, 0x78, 0xd0, 0x65, 0x89, 0x1f, 0x0e, 0x74, 0xcf, 0xd7, 0xd0,
	0xd7, 0x3e, 0x0c, 0x43, 0x2e, 0x63, 0xa0, 0x52, 0x09, 0x2d, 0xf0, 0xc6, 0x14, 0x4e, 0x61, 0xa8,
	0x69, 0x0e, 0xa7, 0x16, 0x4e, 0x2d, 0xbc, 0x72, 0xbf, 0x2b, 0x44, 0x37, 0x06, 0xdf, 0xc1, 0xdb,
	0x83, 0x8f, 0x3e, 0x70, 0xa9, 0xd3, 0x7c, 0xba, 0xb2, 0xf9, 0x9f, 0xcb, 0x24, 0x28, 0xde, 0xcf,
	0x71, 0x64, 0x1d, 0xad, 0x36, 0xd2, 0x03, 0x90, 0xb1, 0x48, 0x39, 0x24, 0x1a, 0xaf, 0xa1, 0x39,
	0x16, 0x95, 0xbd, 0xaa, 0x57, 0x9b, 0x6f, 0xce, 0xb1, 0x88, 0xfc, 0xf4, 0xd0, 0x72, 0x23, 0x6d,
	0xc2, 0xd9, 0x00, 0xfa, 0x1a, 0x63, 0xb4, 0xc0, 0x34, 0x70, 0xd7, 0x5f, 0x6e, 0xba, 0x33, 0x2e,
	0xa1, 0xc5, 0xb0, 0xa3, 0x99, 0x48, 0xca, 0x73, 0xae, 0x3a, 0xfe, 0xc2, 0xaf, 0xd0, 0x92, 0x54,
	0xe2, 0x14, 0x3a, 0xba, 0x3c, 0x5f, 0xf5, 0x6a, 0x2b, 0xf5, 0xc7, 0xf4, 0x06, 0x47, 0x74, 0x72,
	0x11, 0x6d, 0xa4, 0x47, 0xf9, 0x6c, 0xb3, 0x20, 0xc1, 0xbb, 0x68, 0x3e, 0x92, 0x71, 0x79, 0xc1,
	0x71, 0x6d, 0xdd, 0x82, 0x6b, 0xea, 0xaa, 0x69, 0x27, 0x2b, 0x1b, 0xd6, 0xc9, 0x98, 0xd6, 0x3a,
	0x49, 0x42, 0x0e, 0x85, 0x13, 0x7b, 0xae, 0x7f, 0x5f, 0xb2, 0x88, 0x16, 0xa8, 0xcf, 0xac, 0x03,
	0xf8, 0xd2, 0x43, 0x2b, 0xc7, 0x49, 0xa8, 0xd2, 0x06, 0xe8, 0x9e, 0x88, 0xf0, 0xc3, 0xdb, 0xcb,
	0xaf, 0x94, 0x68, 0xbe, 0x1b, 0x5a, 0xec, 0x86, 0x3e, 0xb5, 0xbb, 0x21, 0x8d, 0x0b, 0x43, 0x5e,
	0x64, 0x86, 0x6c, 0x31, 0x95, 0x04, 0xe3, 0x75, 0x07, 0xdb, 0xf5, 0x9d, 0xe0, 0x5c, 0xc1, 0x19,
	0xb5, 0x71, 0x8e, 0xf2, 0xe3, 0xd8, 0x34, 0xb5, 0xba, 0x46, 0x57, 0x86, 0xdc, 0x2b, 0xc0, 0xae,
	0x9b, 0x27, 0x3c, 0xc2, 0x5f, 0x3d, 0xb4, 0xda, 0xd2, 0x0a, 0x42, 0x3e, 0x43, 0x8d, 0xcf, 0x2f,
	0x0c, 0xd9, 0xcf, 0x0c, 0x79, 0x70, 0x93, 0xc6, 0x48, 0xc6, 0x94, 0x45, 0xff, 0x54, 0x57, 0xf3,
	0xf0, 0x17, 0x0f, 0xdd, 0x71, 0x11, 0x1e, 0x40, 0x0c, 0xdd, 0xd0, 0x96, 0x4f, 0xb6, 0x67, 0x22,
	0x72, 0x2f, 0x33, 0xe4, 0x09, 0x5a, 0xe3, 0xe9, 0xc9, 0xf6, 0x94, 0x1b, 0x3f, 0x7a, 0xab, 0xde,
	0x07, 0x52, 0x9d, 0xfa, 0xe7, 0xa1, 0xea, 0xf6, 0x8b, 0x10, 0x47, 0x7e, 0x24, 0xe3, 0x71, 0x29,
	0x9a, 0xfc, 0x13, 0x23, 0xfc, 0xed, 0x1a, 0x75, 0xf5, 0x99, 0xa8, 0x7b, 0x97, 0x19, 0xf2, 0xc6,
	0xa9, 0xab, 0x4f, 0xb9, 0x2b, 0xcf, 0x32, 0x43, 0x6a, 0x36, 0x54, 0x16, 0x72, 0x17, 0xe8, 0x24,
	0x35, 0x27, 0xad, 0x23, 0xb8, 0x14, 0x09, 0x24, 0xfa, 0xc3, 0x27, 0x48, 0x6d, 0xaa, 0x25, 0x8b,
	0x3b, 0xaf, 0xba, 0xa6, 0x90, 0xa0, 0x1c, 0x4b, 0x75, 0x84, 0x7f, 0x78, 0xe8, 0xee, 0x5f, 0xba,
	0xf7, 0x84, 0xee, 0xcd, 0x44, 0xf9, 0x30, 0x33, 0x44, 0xa3, 0x55, 0xfe, 0x1b, 0x37, 0x2e, 0x5d,
	0x9f, 0x6a, 0xe5, 0x65, 0x66, 0xc8, 0xa6, 0xf5, 0xd3, 0x97, 0xa1, 0x66, 0x61, 0x7c, 0xd8, 0x0a,
	0x76, 0x83, 0x71, 0x37, 0xf8, 0x13, 0x7b, 0x65, 0xc8, 0xfa, 0x14, 0x15, 0x89, 0x96, 0xe0, 0xa0,
	0x7b, 0x2c, 0xe9, 0xbe, 0x16, 0xc5, 0x83, 0x3c, 0xb6, 0x6f, 0xef, 0x50, 0x42, 0xd2, 0x3c, 0xda,
	0x9f, 0x89, 0x95, 0x85, 0x4b, 0x43, 0xbc, 0xf6, 0xa2, 0xab, 0xee, 0xfc, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x34, 0xf2, 0x6d, 0x77, 0x7d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyServiceClient interface {
	UnaryMethod(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StreamMethod(ctx context.Context, opts ...grpc.CallOption) (MyService_StreamMethodClient, error)
	UnaryDelegationV1(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnaryDelegationV2(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnaryDelegationBoth(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MyOpenRPC(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) UnaryMethod(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.ext.plugin.auth.test.MyService/UnaryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) StreamMethod(ctx context.Context, opts ...grpc.CallOption) (MyService_StreamMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MyService_serviceDesc.Streams[0], "/improbable.ext.plugin.auth.test.MyService/StreamMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceStreamMethodClient{stream}
	return x, nil
}

type MyService_StreamMethodClient interface {
	Send(*MyRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type myServiceStreamMethodClient struct {
	grpc.ClientStream
}

func (x *myServiceStreamMethodClient) Send(m *MyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServiceStreamMethodClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServiceClient) UnaryDelegationV1(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryDelegationV2(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryDelegationBoth(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationBoth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) MyOpenRPC(ctx context.Context, in *MyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/improbable.ext.plugin.auth.test.MyService/MyOpenRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServiceServer is the server API for MyService service.
type MyServiceServer interface {
	UnaryMethod(context.Context, *MyRequest) (*empty.Empty, error)
	StreamMethod(MyService_StreamMethodServer) error
	UnaryDelegationV1(context.Context, *MyRequest) (*empty.Empty, error)
	UnaryDelegationV2(context.Context, *MyRequest) (*empty.Empty, error)
	UnaryDelegationBoth(context.Context, *MyRequest) (*empty.Empty, error)
	MyOpenRPC(context.Context, *MyRequest) (*empty.Empty, error)
}

// UnimplementedMyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (*UnimplementedMyServiceServer) UnaryMethod(ctx context.Context, req *MyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryMethod not implemented")
}
func (*UnimplementedMyServiceServer) StreamMethod(srv MyService_StreamMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMethod not implemented")
}
func (*UnimplementedMyServiceServer) UnaryDelegationV1(ctx context.Context, req *MyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryDelegationV1 not implemented")
}
func (*UnimplementedMyServiceServer) UnaryDelegationV2(ctx context.Context, req *MyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryDelegationV2 not implemented")
}
func (*UnimplementedMyServiceServer) UnaryDelegationBoth(ctx context.Context, req *MyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryDelegationBoth not implemented")
}
func (*UnimplementedMyServiceServer) MyOpenRPC(ctx context.Context, req *MyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyOpenRPC not implemented")
}

func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	s.RegisterService(&_MyService_serviceDesc, srv)
}

func _MyService_UnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.ext.plugin.auth.test.MyService/UnaryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryMethod(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_StreamMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).StreamMethod(&myServiceStreamMethodServer{stream})
}

type MyService_StreamMethodServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*MyRequest, error)
	grpc.ServerStream
}

type myServiceStreamMethodServer struct {
	grpc.ServerStream
}

func (x *myServiceStreamMethodServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServiceStreamMethodServer) Recv() (*MyRequest, error) {
	m := new(MyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyService_UnaryDelegationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryDelegationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryDelegationV1(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryDelegationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryDelegationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryDelegationV2(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryDelegationBoth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryDelegationBoth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.ext.plugin.auth.test.MyService/UnaryDelegationBoth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryDelegationBoth(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_MyOpenRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).MyOpenRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/improbable.ext.plugin.auth.test.MyService/MyOpenRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).MyOpenRPC(ctx, req.(*MyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "improbable.ext.plugin.auth.test.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryMethod",
			Handler:    _MyService_UnaryMethod_Handler,
		},
		{
			MethodName: "UnaryDelegationV1",
			Handler:    _MyService_UnaryDelegationV1_Handler,
		},
		{
			MethodName: "UnaryDelegationV2",
			Handler:    _MyService_UnaryDelegationV2_Handler,
		},
		{
			MethodName: "UnaryDelegationBoth",
			Handler:    _MyService_UnaryDelegationBoth_Handler,
		},
		{
			MethodName: "MyOpenRPC",
			Handler:    _MyService_MyOpenRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMethod",
			Handler:       _MyService_StreamMethod_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "improbable/ext/plugin/auth/test/example.proto",
}
