// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/client_launch/artifact/artifact.proto

package improbable_ext_client_launch_artifact

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ArtifactId) Validate() error {
	return nil
}
func (this *ArtifactMetadata) Validate() error {
	if this.ContentHash == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContentHash", fmt.Errorf(`value '%v' must not be an empty string`, this.ContentHash))
	}
	return nil
}
func (this *Artifact) Validate() error {
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	if nil == this.Metadata {
		return github_com_mwitkow_go_proto_validators.FieldError("Metadata", fmt.Errorf("message must exist"))
	}
	if this.Metadata != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Metadata); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Metadata", err)
		}
	}
	return nil
}
func (this *GetArtifactRequest) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	return nil
}
func (this *GetArtifactResponse) Validate() error {
	if this.Artifact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Artifact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Artifact", err)
		}
	}
	return nil
}
func (this *CreateArtifactRequest) Validate() error {
	if this.Artifact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Artifact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Artifact", err)
		}
	}
	return nil
}

var _regex_CreateArtifactResponse_UploadUrl = regexp.MustCompile(`^https?://.*$`)

func (this *CreateArtifactResponse) Validate() error {
	if this.Artifact != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Artifact); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Artifact", err)
		}
	}
	if !_regex_CreateArtifactResponse_UploadUrl.MatchString(this.UploadUrl) {
		return github_com_mwitkow_go_proto_validators.FieldError("UploadUrl", fmt.Errorf(`value '%v' must be a string conforming to regex "^https?://.*$"`, this.UploadUrl))
	}
	return nil
}
func (this *DeleteArtifactRequest) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	return nil
}
func (this *DeleteArtifactResponse) Validate() error {
	return nil
}
func (this *GetArtifactDownloadUrlRequest) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	return nil
}

var _regex_GetArtifactDownloadUrlResponse_DownloadUrl = regexp.MustCompile(`^https?://.*$`)

func (this *GetArtifactDownloadUrlResponse) Validate() error {
	if nil == this.ArtifactId {
		return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", fmt.Errorf("message must exist"))
	}
	if this.ArtifactId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ArtifactId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ArtifactId", err)
		}
	}
	if !_regex_GetArtifactDownloadUrlResponse_DownloadUrl.MatchString(this.DownloadUrl) {
		return github_com_mwitkow_go_proto_validators.FieldError("DownloadUrl", fmt.Errorf(`value '%v' must be a string conforming to regex "^https?://.*$"`, this.DownloadUrl))
	}
	return nil
}
