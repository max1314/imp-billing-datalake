// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/client_launch/client/client.proto

package improbable_ext_client_launch_client

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "improbable.io/proto/improbable/ext/client_launch/artifact"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ClientId) Validate() error {
	if this.BundleId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BundleId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BundleId", err)
		}
	}
	return nil
}
func (this *Client) Validate() error {
	if this.ClientId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ClientId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ClientId", err)
		}
	}
	if this.Metadata != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Metadata); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Metadata", err)
		}
	}
	return nil
}
func (this *CreateClientRequest) Validate() error {
	if this.Client != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Client); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Client", err)
		}
	}
	return nil
}

var _regex_CreateClientResponse_UploadUrl = regexp.MustCompile(`^https?://.*$`)

func (this *CreateClientResponse) Validate() error {
	if this.Client != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Client); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Client", err)
		}
	}
	if !_regex_CreateClientResponse_UploadUrl.MatchString(this.UploadUrl) {
		return github_com_mwitkow_go_proto_validators.FieldError("UploadUrl", fmt.Errorf(`value '%v' must be a string conforming to regex "^https?://.*$"`, this.UploadUrl))
	}
	return nil
}
func (this *GetClientRequest) Validate() error {
	if nil == this.ClientId {
		return github_com_mwitkow_go_proto_validators.FieldError("ClientId", fmt.Errorf("message must exist"))
	}
	if this.ClientId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ClientId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ClientId", err)
		}
	}
	return nil
}
func (this *GetClientResponse) Validate() error {
	if this.Client != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Client); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Client", err)
		}
	}
	return nil
}
func (this *DownloadClientRequest) Validate() error {
	if this.ClientId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ClientId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ClientId", err)
		}
	}
	return nil
}

var _regex_DownloadClientResponse_DownloadUrl = regexp.MustCompile(`^https?://.*$`)

func (this *DownloadClientResponse) Validate() error {
	if nil == this.Metadata {
		return github_com_mwitkow_go_proto_validators.FieldError("Metadata", fmt.Errorf("message must exist"))
	}
	if this.Metadata != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Metadata); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Metadata", err)
		}
	}
	if !_regex_DownloadClientResponse_DownloadUrl.MatchString(this.DownloadUrl) {
		return github_com_mwitkow_go_proto_validators.FieldError("DownloadUrl", fmt.Errorf(`value '%v' must be a string conforming to regex "^https?://.*$"`, this.DownloadUrl))
	}
	return nil
}
func (this *ListClientsRequest) Validate() error {
	if this.BundleId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BundleId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BundleId", err)
		}
	}
	return nil
}
func (this *ListClientsResponse) Validate() error {
	for _, item := range this.Clients {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Clients", err)
			}
		}
	}
	return nil
}
func (this *DeleteClientRequest) Validate() error {
	if nil == this.ClientId {
		return github_com_mwitkow_go_proto_validators.FieldError("ClientId", fmt.Errorf("message must exist"))
	}
	if this.ClientId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ClientId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ClientId", err)
		}
	}
	return nil
}
func (this *DeleteClientResponse) Validate() error {
	return nil
}
func (this *BundleId) Validate() error {
	if this.Name == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must not be an empty string`, this.Name))
	}
	if this.ProjectName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ProjectName", fmt.Errorf(`value '%v' must not be an empty string`, this.ProjectName))
	}
	return nil
}
func (this *Bundle) Validate() error {
	if nil == this.BundleId {
		return github_com_mwitkow_go_proto_validators.FieldError("BundleId", fmt.Errorf("message must exist"))
	}
	if this.BundleId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BundleId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BundleId", err)
		}
	}
	if this.CreationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTime", err)
		}
	}
	return nil
}
func (this *CreateBundleRequest) Validate() error {
	if nil == this.Bundle {
		return github_com_mwitkow_go_proto_validators.FieldError("Bundle", fmt.Errorf("message must exist"))
	}
	if this.Bundle != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Bundle); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Bundle", err)
		}
	}
	return nil
}
func (this *CreateBundleResponse) Validate() error {
	if this.Bundle != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Bundle); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Bundle", err)
		}
	}
	return nil
}
func (this *GetBundleRequest) Validate() error {
	if this.BundleId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BundleId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BundleId", err)
		}
	}
	return nil
}
func (this *GetBundleResponse) Validate() error {
	if this.Bundle != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Bundle); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Bundle", err)
		}
	}
	return nil
}
func (this *ListBundlesRequest) Validate() error {
	return nil
}
func (this *ListBundlesResponse) Validate() error {
	for _, item := range this.Bundles {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Bundles", err)
			}
		}
	}
	return nil
}
func (this *DeleteBundleRequest) Validate() error {
	if this.BundleId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BundleId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BundleId", err)
		}
	}
	return nil
}
func (this *DeleteBundleResponse) Validate() error {
	return nil
}
