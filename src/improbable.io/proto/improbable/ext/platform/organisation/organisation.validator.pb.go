// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/platform/organisation/organisation.proto

package improbable_ext_platform_organisation

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var _regex_InviteUsersRequest_EmailAddresses = regexp.MustCompile(`^[^[:cntrl:] ,:;<>@"'()\[\]{}]{0,63}@[[:alnum:].-]{2,63}$`)

func (this *InviteUsersRequest) Validate() error {
	for _, item := range this.EmailAddresses {
		if !_regex_InviteUsersRequest_EmailAddresses.MatchString(item) {
			return github_com_mwitkow_go_proto_validators.FieldError("EmailAddresses", fmt.Errorf(`value '%v' must be a string conforming to regex "^[^[:cntrl:] ,:;<>@\"'()\\[\\]{}]{0,63}@[[:alnum:].-]{2,63}$"`, item))
		}
	}
	return nil
}
func (this *InviteUsersResponse) Validate() error {
	return nil
}
func (this *RemoveUserFromOrganisationRequest) Validate() error {
	return nil
}
func (this *RemoveUserFromOrganisationResponse) Validate() error {
	return nil
}
func (this *AcceptInviteRequest) Validate() error {
	return nil
}
func (this *AcceptInviteResponse) Validate() error {
	if this.InvitedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.InvitedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("InvitedAt", err)
		}
	}
	return nil
}
func (this *ListUsersRequest) Validate() error {
	return nil
}
func (this *User) Validate() error {
	return nil
}
func (this *ListUsersResponse) Validate() error {
	for _, item := range this.Users {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Users", err)
			}
		}
	}
	return nil
}
