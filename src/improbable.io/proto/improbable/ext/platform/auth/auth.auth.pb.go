// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/platform/auth/auth.proto

package improbable_platform_auth

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/protobuf/field_mask"
	improbable_io_lib_perms "improbable.io/lib/perms"
	improbable_io_lib_perms_registry "improbable.io/lib/perms/registry"
	_ "improbable.io/proto/improbable/ext/platform/auth/authorization"
	improbable_io_proto_improbable_ext_platform_auth_authorization "improbable.io/proto/improbable/ext/platform/auth/authorization"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	improbable_io_proto_improbable_ext_plugin_auth "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func init() {
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/ListOrganisations",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::organisation:list",
				Action:   "iam:listOrganisations",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/GetOrganisation",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:{{.Req.OrganisationId}}:organisation:",
				Action:   "iam:getOrganisation",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/CreateOrganisation",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::organisation:",
				Action:   "iam:createOrganisation",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/UpdateOrganisation",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:{{.Req.Organisation.OrganisationId}}:organisation:",
				Action:   "iam:updateOrganisation",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/DeleteOrganisation",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:{{.Req.OrganisationId}}:organisation:",
				Action:   "iam:deleteOrganisation",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/ListRoles",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::role:list",
				Action:   "iam:listRoles",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/GetRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:getRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/CreateRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::role:",
				Action:   "iam:createRole",
			},
			{
				Resource: "irn:iam:{{.Req.Role.OrganisationId}}:organisation:",
				Action:   "iam:createRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/UpdateRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.Role.RoleId}}",
				Action:   "iam:updateRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/DeleteRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:deleteRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/AddPolicyToRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:updateRole",
			},
			{
				Resource: "irn:iam:?:policy:id/{{.Req.PolicyId}}",
				Action:   "iam:readPolicy",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/RemovePolicyFromRole",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:updateRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/ListUserAccounts",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:list",
				Action:   "iam:listUserAccounts",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/GetUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:id/{{.Req.AccountId}}",
				Action:   "iam:getUserAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/CreateUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:",
				Action:   "iam:createUserAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/UpdateUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:id/{{.Req.Account.AccountId}}",
				Action:   "iam:updateUserAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/DeleteUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:id/{{.Req.AccountId}}",
				Action:   "iam:deleteUserAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/ListServiceAccounts",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:{{.Req.OrganisationId}}:serviceAccount:list",
				Action:   "iam:listServiceAccounts",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/GetServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:serviceAccount:id/{{.Req.AccountId}}",
				Action:   "iam:getServiceAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/CreateServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:{{.Req.OrganisationId}}:serviceAccount:",
				Action:   "iam:createServiceAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/UpdateServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:serviceAccount:id/{{.Req.Account.AccountId}}",
				Action:   "iam:updateServiceAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/DeleteServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:serviceAccount:id/{{.Req.AccountId}}",
				Action:   "iam:deleteServiceAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/AddRoleToUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:id/{{.Req.AccountId}}",
				Action:   "iam:updateUserAccount",
			},
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:getRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/RemoveRoleFromUserAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::userAccount:id/{{.Req.AccountId}}",
				Action:   "iam:updateUserAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/AddRoleToServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:serviceAccount:id/{{.Req.AccountId}}",
				Action:   "iam:updateServiceAccount",
			},
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:getRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/RemoveRoleFromServiceAccount",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:serviceAccount:id/{{.Req.AccountId}}",
				Action:   "iam:updateServiceAccount",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/ListPolicies",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:role:id/{{.Req.RoleId}}",
				Action:   "iam:getRole",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/GetPolicy",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:policy:id/{{.Req.PolicyId}}",
				Action:   "iam:getPolicy",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/CreatePolicy",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam::policy:",
				Action:   "iam:createPolicy",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/UpdatePolicy",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:policy:id/{{.Req.Policy.PolicyId}}",
				Action:   "iam:updatePolicy",
			},
		},
	)
	improbable_io_lib_perms_registry.RegisterPermissions("/improbable.platform.auth.AuthService/DeletePolicy",
		[]improbable_io_proto_improbable_ext_plugin_auth.Permission{
			{
				Resource: "irn:iam:?:policy:id/{{.Req.PolicyId}}",
				Action:   "iam:deletePolicy",
			},
		},
	)
}

// The arguments for this permission check.
type Permits_V2_GetOrganisation_Args struct {
	OrganisationId string
}

func perm_V2_GetOrganisation(args Permits_V2_GetOrganisation_Args) (*improbable_io_proto_improbable_ext_platform_auth_authorization.RequiredPermission, error) {
	resource, err := improbable_io_lib_perms.UnmarshalResource(fmt.Sprintf("irn:iam:%v:organisation:", args.OrganisationId))
	if err != nil {
		return nil, err
	}
	action, err := improbable_io_lib_perms.UnmarshalAction("iam:getOrganisation")
	if err != nil {
		return nil, err
	}
	return &improbable_io_proto_improbable_ext_platform_auth_authorization.RequiredPermission{
		Resource: resource,
		Action:   action,
	}, nil
}

// Performs the delegated permission check described by delegation "GetOrganisation".
func Permits_V2_GetOrganisation(ctx context.Context, authzClient improbable_io_proto_improbable_ext_platform_auth_authorization.AuthorizationServiceClient, args Permits_V2_GetOrganisation_Args) (bool, error) {
	perm, err := perm_V2_GetOrganisation(args)
	if err != nil {
		return false, err
	}
	resp, err := authzClient.Permits(ctx, &improbable_io_proto_improbable_ext_platform_auth_authorization.PermitsRequest{
		RequiredPermission: []*improbable_io_proto_improbable_ext_platform_auth_authorization.RequiredPermission{perm},
	})
	if err != nil {
		return false, err
	}
	return resp.Permitted, nil
}

// Performs the delegated batch permission check described by delegation "GetOrganisation".
// Each arg in 'batchArgs' is individually checked, and the resulting array of bools contain the results in the order
// they are defined in 'batchArgs'.
func PermitsBatch_V2_GetOrganisation(ctx context.Context, authzClient improbable_io_proto_improbable_ext_platform_auth_authorization.AuthorizationServiceClient, batchArgs []Permits_V2_GetOrganisation_Args) ([]bool, error) {
	perms := make([]*improbable_io_proto_improbable_ext_platform_auth_authorization.RequiredPermission, len(batchArgs))
	for i, args := range batchArgs {
		perm, err := perm_V2_GetOrganisation(args)
		if err != nil {
			return nil, err
		}
		perms[i] = perm
	}
	resp, err := authzClient.PermitsBatch(ctx, &improbable_io_proto_improbable_ext_platform_auth_authorization.PermitsBatchRequest{
		RequiredPermission: perms,
	})
	if err != nil {
		return nil, err
	}
	return resp.Permitted, nil
}
