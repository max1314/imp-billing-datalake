// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/platform/auth/auth.proto

package improbable_platform_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/protobuf/field_mask"
	_ "improbable.io/proto/improbable/ext/platform/auth/authorization"
	_ "improbable.io/proto/improbable/ext/plugin/auth"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Organisation) Validate() error {
	if this.DisplayName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("DisplayName", fmt.Errorf(`value '%v' must not be an empty string`, this.DisplayName))
	}
	return nil
}
func (this *ListOrganisationsRequest) Validate() error {
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *ListOrganisationsResponse) Validate() error {
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	return nil
}
func (this *GetOrganisationRequest) Validate() error {
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *GetOrganisationResponse) Validate() error {
	if nil == this.Organisation {
		return github_com_mwitkow_go_proto_validators.FieldError("Organisation", fmt.Errorf("message must exist"))
	}
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	return nil
}
func (this *CreateOrganisationRequest) Validate() error {
	if nil == this.Organisation {
		return github_com_mwitkow_go_proto_validators.FieldError("Organisation", fmt.Errorf("message must exist"))
	}
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	return nil
}
func (this *CreateOrganisationResponse) Validate() error {
	if nil == this.Organisation {
		return github_com_mwitkow_go_proto_validators.FieldError("Organisation", fmt.Errorf("message must exist"))
	}
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	return nil
}
func (this *UpdateOrganisationRequest) Validate() error {
	if nil == this.Organisation {
		return github_com_mwitkow_go_proto_validators.FieldError("Organisation", fmt.Errorf("message must exist"))
	}
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *UpdateOrganisationResponse) Validate() error {
	if this.Organisation != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Organisation); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Organisation", err)
		}
	}
	return nil
}
func (this *DeleteOrganisationRequest) Validate() error {
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	return nil
}
func (this *DeleteOrganisationResponse) Validate() error {
	return nil
}
func (this *Role) Validate() error {
	return nil
}
func (this *ListRolesRequest) Validate() error {
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *ListRolesResponse) Validate() error {
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *GetRoleRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *GetRoleResponse) Validate() error {
	if nil == this.Role {
		return github_com_mwitkow_go_proto_validators.FieldError("Role", fmt.Errorf("message must exist"))
	}
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *CreateRoleRequest) Validate() error {
	if nil == this.Role {
		return github_com_mwitkow_go_proto_validators.FieldError("Role", fmt.Errorf("message must exist"))
	}
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *CreateRoleResponse) Validate() error {
	if nil == this.Role {
		return github_com_mwitkow_go_proto_validators.FieldError("Role", fmt.Errorf("message must exist"))
	}
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *UpdateRoleRequest) Validate() error {
	if nil == this.Role {
		return github_com_mwitkow_go_proto_validators.FieldError("Role", fmt.Errorf("message must exist"))
	}
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *UpdateRoleResponse) Validate() error {
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *DeleteRoleRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	return nil
}
func (this *DeleteRoleResponse) Validate() error {
	return nil
}
func (this *AddPolicyToRoleRequest) Validate() error {
	if !(this.PolicyId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("PolicyId", fmt.Errorf(`value '%v' must be greater than '0'`, this.PolicyId))
	}
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	return nil
}
func (this *AddPolicyToRoleResponse) Validate() error {
	return nil
}
func (this *RemovePolicyFromRoleRequest) Validate() error {
	if !(this.PolicyId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("PolicyId", fmt.Errorf(`value '%v' must be greater than '0'`, this.PolicyId))
	}
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	return nil
}
func (this *RemovePolicyFromRoleResponse) Validate() error {
	return nil
}
func (this *UserAccount) Validate() error {
	if this.DisplayName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("DisplayName", fmt.Errorf(`value '%v' must not be an empty string`, this.DisplayName))
	}
	return nil
}
func (this *ListUserAccountsRequest) Validate() error {
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *ListUserAccountsResponse) Validate() error {
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *GetUserAccountRequest) Validate() error {
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *GetUserAccountResponse) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *CreateUserAccountRequest) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *CreateUserAccountResponse) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *UpdateUserAccountRequest) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *UpdateUserAccountResponse) Validate() error {
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *DeleteUserAccountRequest) Validate() error {
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	return nil
}
func (this *DeleteUserAccountResponse) Validate() error {
	return nil
}
func (this *ServiceAccount) Validate() error {
	if this.CreationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTime", err)
		}
	}
	if this.ExpirationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ExpirationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ExpirationTime", err)
		}
	}
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	return nil
}
func (this *ListServiceAccountsRequest) Validate() error {
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *ListServiceAccountsResponse) Validate() error {
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *GetServiceAccountRequest) Validate() error {
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *GetServiceAccountResponse) Validate() error {
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}

var _regex_CreateServiceAccountRequest_Name = regexp.MustCompile(`^[a-zA-Z0-9_]{5,64}$`)
var _regex_CreateServiceAccountRequest_ClientId = regexp.MustCompile(`^[a-zA-Z0-9_]{1,30}$`)

func (this *CreateServiceAccountRequest) Validate() error {
	if !_regex_CreateServiceAccountRequest_Name.MatchString(this.Name) {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{5,64}$"`, this.Name))
	}
	if !_regex_CreateServiceAccountRequest_ClientId.MatchString(this.ClientId) {
		return github_com_mwitkow_go_proto_validators.FieldError("ClientId", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-zA-Z0-9_]{1,30}$"`, this.ClientId))
	}
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	if this.Lifetime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Lifetime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Lifetime", err)
		}
	}
	return nil
}
func (this *CreateServiceAccountResponse) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *UpdateServiceAccountRequest) Validate() error {
	if nil == this.Account {
		return github_com_mwitkow_go_proto_validators.FieldError("Account", fmt.Errorf("message must exist"))
	}
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *UpdateServiceAccountResponse) Validate() error {
	if this.Account != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Account); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Account", err)
		}
	}
	return nil
}
func (this *DeleteServiceAccountRequest) Validate() error {
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	return nil
}
func (this *DeleteServiceAccountResponse) Validate() error {
	return nil
}
func (this *AddRoleToUserAccountRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	return nil
}
func (this *AddRoleToUserAccountResponse) Validate() error {
	return nil
}
func (this *RemoveRoleFromUserAccountRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	return nil
}
func (this *RemoveRoleFromUserAccountResponse) Validate() error {
	return nil
}
func (this *AddRoleToServiceAccountRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	if !(this.OrganisationId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("OrganisationId", fmt.Errorf(`value '%v' must be greater than '0'`, this.OrganisationId))
	}
	return nil
}
func (this *AddRoleToServiceAccountResponse) Validate() error {
	return nil
}
func (this *RemoveRoleFromServiceAccountRequest) Validate() error {
	if !(this.RoleId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("RoleId", fmt.Errorf(`value '%v' must be greater than '0'`, this.RoleId))
	}
	if !(this.AccountId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("AccountId", fmt.Errorf(`value '%v' must be greater than '0'`, this.AccountId))
	}
	return nil
}
func (this *RemoveRoleFromServiceAccountResponse) Validate() error {
	return nil
}
func (this *ListPoliciesRequest) Validate() error {
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *ListPoliciesResponse) Validate() error {
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	return nil
}
func (this *GetPolicyRequest) Validate() error {
	if !(this.PolicyId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("PolicyId", fmt.Errorf(`value '%v' must be greater than '0'`, this.PolicyId))
	}
	if this.Mask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Mask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Mask", err)
		}
	}
	return nil
}
func (this *GetPolicyResponse) Validate() error {
	if nil == this.Policy {
		return github_com_mwitkow_go_proto_validators.FieldError("Policy", fmt.Errorf("message must exist"))
	}
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	return nil
}
func (this *CreatePolicyRequest) Validate() error {
	if nil == this.Policy {
		return github_com_mwitkow_go_proto_validators.FieldError("Policy", fmt.Errorf("message must exist"))
	}
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	return nil
}
func (this *CreatePolicyResponse) Validate() error {
	if nil == this.Policy {
		return github_com_mwitkow_go_proto_validators.FieldError("Policy", fmt.Errorf("message must exist"))
	}
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	return nil
}
func (this *UpdatePolicyRequest) Validate() error {
	if nil == this.Policy {
		return github_com_mwitkow_go_proto_validators.FieldError("Policy", fmt.Errorf("message must exist"))
	}
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	if this.UpdateMask != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdateMask); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdateMask", err)
		}
	}
	return nil
}
func (this *UpdatePolicyResponse) Validate() error {
	if this.Policy != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Policy); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Policy", err)
		}
	}
	return nil
}
func (this *DeletePolicyRequest) Validate() error {
	if !(this.PolicyId > 0) {
		return github_com_mwitkow_go_proto_validators.FieldError("PolicyId", fmt.Errorf(`value '%v' must be greater than '0'`, this.PolicyId))
	}
	return nil
}
func (this *DeletePolicyResponse) Validate() error {
	return nil
}
