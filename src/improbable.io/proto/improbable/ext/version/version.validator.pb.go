// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/ext/version/version.proto

package improbable_ext_version

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Version) Validate() error {
	return nil
}
func (this *VersionRange) Validate() error {
	if nil == this.MinVersion {
		return github_com_mwitkow_go_proto_validators.FieldError("MinVersion", fmt.Errorf("message must exist"))
	}
	if this.MinVersion != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MinVersion); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MinVersion", err)
		}
	}
	if nil == this.MaxVersion {
		return github_com_mwitkow_go_proto_validators.FieldError("MaxVersion", fmt.Errorf("message must exist"))
	}
	if this.MaxVersion != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MaxVersion); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MaxVersion", err)
		}
	}
	return nil
}
func (this *VersionSpecification) Validate() error {
	for _, item := range this.Versions {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Versions", err)
			}
		}
	}
	for _, item := range this.VersionRanges {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("VersionRanges", err)
			}
		}
	}
	return nil
}
