// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/platform/buildkite/scaler.proto

package improbable_int_platform_buildkite

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Label) Validate() error {
	return nil
}
func (this *Resource) Validate() error {
	for _, item := range this.Labels {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Labels", err)
			}
		}
	}
	if this.CreationTimestamp != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTimestamp); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTimestamp", err)
		}
	}
	return nil
}
func (this *Instance) Validate() error {
	if this.Group != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Group); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Group", err)
		}
	}
	return nil
}
func (this *Group) Validate() error {
	return nil
}
func (this *HealthCheck) Validate() error {
	if this.CreationTimestamp != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreationTimestamp); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreationTimestamp", err)
		}
	}
	return nil
}
func (this *CIContext) Validate() error {
	return nil
}
func (this *ListImagesRequest) Validate() error {
	for _, item := range this.FilterLabels {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("FilterLabels", err)
			}
		}
	}
	return nil
}
func (this *ListTemplatesRequest) Validate() error {
	for _, item := range this.FilterLabels {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("FilterLabels", err)
			}
		}
	}
	return nil
}
func (this *ListResourceResponse) Validate() error {
	for _, item := range this.Resources {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Resources", err)
			}
		}
	}
	return nil
}
func (this *KillAgentRequest) Validate() error {
	return nil
}
func (this *KillAgentResponse) Validate() error {
	if this.Instance != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Instance); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Instance", err)
		}
	}
	return nil
}
func (this *ValidateAndAddDefaultLabelsRequest) Validate() error {
	for _, item := range this.Labels {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Labels", err)
			}
		}
	}
	if this.JobContext != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.JobContext); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("JobContext", err)
		}
	}
	return nil
}
func (this *ValidateAndAddDefaultLabelsResponse) Validate() error {
	for _, item := range this.Labels {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Labels", err)
			}
		}
	}
	return nil
}
