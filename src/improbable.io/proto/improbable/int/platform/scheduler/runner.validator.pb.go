// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/platform/scheduler/runner.proto

package improbable_int_platform_scheduler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/improbable-io/go-proto-logfields"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *SubscribeRunnerRequest) Validate() error {
	if this.Id != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Id); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Id", err)
		}
	}
	return nil
}
func (this *SubscribeRunnerResponse) Validate() error {
	if this.JobId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.JobId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("JobId", err)
		}
	}
	if this.DockerParameters != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DockerParameters); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DockerParameters", err)
		}
	}
	return nil
}
func (this *UpdateRunnerAssignedJobRequest) Validate() error {
	if this.RunnerId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunnerId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunnerId", err)
		}
	}
	if this.JobId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.JobId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("JobId", err)
		}
	}
	return nil
}
func (this *UpdateRunnerAssignedJobResponse) Validate() error {
	return nil
}
func (this *LogRunnerErrorRequest) Validate() error {
	if this.RunnerId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunnerId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunnerId", err)
		}
	}
	if this.JobId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.JobId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("JobId", err)
		}
	}
	return nil
}
func (this *LogRunnerErrorResponse) Validate() error {
	return nil
}
func (this *ReportBootMetricsRequest) Validate() error {
	if this.RunnerId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunnerId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunnerId", err)
		}
	}
	if this.OsBootTimestamp != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.OsBootTimestamp); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("OsBootTimestamp", err)
		}
	}
	if this.RunnerBootTimestamp != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RunnerBootTimestamp); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RunnerBootTimestamp", err)
		}
	}
	return nil
}
func (this *ReportBootMetricsResponse) Validate() error {
	return nil
}
