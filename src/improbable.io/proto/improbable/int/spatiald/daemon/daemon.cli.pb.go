// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/spatiald/daemon/daemon.proto

package improbable_spatiald_daemon

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/improbable/protoc-gen-gocli"
	github_com_spf13_cobra "github.com/spf13/cobra"
	google_golang_org_grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NewDaemonService_HealthCheckCommand creates a *cobra.Command stub which will call GRPC service as defined
// in .proto file using protoc-gen-gocli annotations.
func NewDaemonService_HealthCheckCommand(
	connectionFactory func() (*google_golang_org_grpc.ClientConn, error),
	ctxFactory func() context.Context,
	callOptionsFactory func() []google_golang_org_grpc.CallOption,
	responseHandler func(*github_com_spf13_cobra.Command, *HealthCheckResponse) error,
) *github_com_spf13_cobra.Command {
	cmd := &github_com_spf13_cobra.Command{
		Use:        "health-check",
		Short:      "Does a health check of the local API service. The statuses are UNKNOWN, STARTING, RUNNING, STOPPING and UNHEALTHY.",
		Long:       "",
		Example:    "",
		Deprecated: "",
		Hidden:     false,
	}
	cmd.RunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		conn, err := connectionFactory()
		if err != nil {
			return err
		}
		c := NewDaemonServiceClient(conn)
		response, err := c.HealthCheck(ctxFactory(), HealthCheckRequest_createCliRequest(cmd), callOptionsFactory()...)
		if err != nil {
			return err
		}
		return responseHandler(cmd, response)
	}
	HealthCheckRequest_addCliFlags(cmd)
	return cmd
}

// NewDaemonService_GetProjectInfoCommand creates a *cobra.Command stub which will call GRPC service as defined
// in .proto file using protoc-gen-gocli annotations.
func NewDaemonService_GetProjectInfoCommand(
	connectionFactory func() (*google_golang_org_grpc.ClientConn, error),
	ctxFactory func() context.Context,
	callOptionsFactory func() []google_golang_org_grpc.CallOption,
	responseHandler func(*github_com_spf13_cobra.Command, *ProjectInfoResponse) error,
) *github_com_spf13_cobra.Command {
	cmd := &github_com_spf13_cobra.Command{
		Use:        "project-info",
		Short:      "Gets the project filepath that the local API service is running from.",
		Long:       "",
		Example:    "",
		Deprecated: "",
		Hidden:     false,
	}
	cmd.RunE = func(cmd *github_com_spf13_cobra.Command, args []string) error {
		conn, err := connectionFactory()
		if err != nil {
			return err
		}
		c := NewDaemonServiceClient(conn)
		response, err := c.GetProjectInfo(ctxFactory(), ProjectInfoRequest_createCliRequest(cmd), callOptionsFactory()...)
		if err != nil {
			return err
		}
		return responseHandler(cmd, response)
	}
	ProjectInfoRequest_addCliFlags(cmd)
	return cmd
}

// ShutdownRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ShutdownRequest message.
func ShutdownRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// ShutdownRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ShutdownRequest message.
func ShutdownRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *ShutdownRequest {
	req := &ShutdownRequest{}
	return req
}

// ShutdownResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ShutdownResponse message.
func ShutdownResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// ShutdownResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ShutdownResponse message.
func ShutdownResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *ShutdownResponse {
	req := &ShutdownResponse{}
	return req
}

// HealthCheckRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on HealthCheckRequest message.
func HealthCheckRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// HealthCheckRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the HealthCheckRequest message.
func HealthCheckRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *HealthCheckRequest {
	req := &HealthCheckRequest{}
	return req
}

// HealthCheckResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on HealthCheckResponse message.
func HealthCheckResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// HealthCheckResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the HealthCheckResponse message.
func HealthCheckResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *HealthCheckResponse {
	req := &HealthCheckResponse{}
	return req
}

// ProjectInfoRequest_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ProjectInfoRequest message.
func ProjectInfoRequest_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// ProjectInfoRequest_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ProjectInfoRequest message.
func ProjectInfoRequest_createCliRequest(cmd *github_com_spf13_cobra.Command) *ProjectInfoRequest {
	req := &ProjectInfoRequest{}
	return req
}

// ProjectInfoResponse_addCliFlags adds to given '*cobra.Command' all the CLI flags that
// are defined on ProjectInfoResponse message.
func ProjectInfoResponse_addCliFlags(cmd *github_com_spf13_cobra.Command) {}

// ProjectInfoResponse_createCliRequest creates a request message with field values populated according to CLI flag values
// on given 'cmd' cobra command, following flag definitions from .proto file for the ProjectInfoResponse message.
func ProjectInfoResponse_createCliRequest(cmd *github_com_spf13_cobra.Command) *ProjectInfoResponse {
	req := &ProjectInfoResponse{}
	return req
}
