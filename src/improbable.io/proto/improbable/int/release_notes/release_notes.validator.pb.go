// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/release_notes/release_notes.proto

package improbable_int_release_notes

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
	regexp "regexp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *ReleaseNotesToolConfig) Validate() error {
	if this.Major != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Major); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Major", err)
		}
	}
	return nil
}
func (this *ReleaseNotesToolConfig_Major) Validate() error {
	return nil
}

var _regex_ReleaseNote_Content = regexp.MustCompile(`.{10,}`)

func (this *ReleaseNote) Validate() error {
	if !_regex_ReleaseNote_Content.MatchString(this.Content) {
		return github_com_mwitkow_go_proto_validators.FieldError("Content", fmt.Errorf(`value '%v' must be a string conforming to regex ".{10,}"`, this.Content))
	}
	return nil
}
func (this *ReleaseNotesMetadata) Validate() error {
	for _, item := range this.Releases {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Releases", err)
			}
		}
	}
	for _, item := range this.CategoryHierarchy {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("CategoryHierarchy", err)
			}
		}
	}
	return nil
}

var _regex_ReleaseMetadata_Version = regexp.MustCompile(`^[0-9]+\.[0-9]+\.[0-9]+([-].*|[+].*){0,1}$`)

func (this *ReleaseMetadata) Validate() error {
	if !_regex_ReleaseMetadata_Version.MatchString(this.Version) {
		return github_com_mwitkow_go_proto_validators.FieldError("Version", fmt.Errorf(`value '%v' must be a string conforming to regex "^[0-9]+\\.[0-9]+\\.[0-9]+([-].*|[+].*){0,1}$"`, this.Version))
	}
	return nil
}
func (this *Category) Validate() error {
	for _, item := range this.Children {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Children", err)
			}
		}
	}
	return nil
}
