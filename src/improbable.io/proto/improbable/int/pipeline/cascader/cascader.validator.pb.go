// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/pipeline/cascader/cascader.proto

package improbable_int_pipeline_cascader

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GitBranch) Validate() error {
	return nil
}
func (this *GitRef) Validate() error {
	return nil
}
func (this *CascadingMergeStep) Validate() error {
	if this.TargetBranch != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TargetBranch); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TargetBranch", err)
		}
	}
	return nil
}
func (this *CascadingMergeRequest) Validate() error {
	return nil
}
func (this *CascadingMergeResponseV2) Validate() error {
	for _, item := range this.Steps {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Steps", err)
			}
		}
	}
	if this.ConflictingBranch != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ConflictingBranch); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ConflictingBranch", err)
		}
	}
	return nil
}
func (this *ValidateReleaseBranchRequest) Validate() error {
	if nil == this.ReleaseBranch {
		return github_com_mwitkow_go_proto_validators.FieldError("ReleaseBranch", fmt.Errorf("message must exist"))
	}
	if this.ReleaseBranch != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ReleaseBranch); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ReleaseBranch", err)
		}
	}
	return nil
}
func (this *ValidateReleaseBranchResponse) Validate() error {
	return nil
}
func (this *CreateReleaseBranchRequest) Validate() error {
	if nil == this.NewBranch {
		return github_com_mwitkow_go_proto_validators.FieldError("NewBranch", fmt.Errorf("message must exist"))
	}
	if this.NewBranch != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NewBranch); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NewBranch", err)
		}
	}
	if nil == this.SourceRef {
		return github_com_mwitkow_go_proto_validators.FieldError("SourceRef", fmt.Errorf("message must exist"))
	}
	if this.SourceRef != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.SourceRef); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("SourceRef", err)
		}
	}
	return nil
}
func (this *CreateReleaseBranchResponse) Validate() error {
	return nil
}
func (this *DeleteReleaseBranchRequest) Validate() error {
	if nil == this.Branch {
		return github_com_mwitkow_go_proto_validators.FieldError("Branch", fmt.Errorf("message must exist"))
	}
	if this.Branch != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Branch); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Branch", err)
		}
	}
	return nil
}
func (this *DeleteReleaseBranchResponse) Validate() error {
	return nil
}
