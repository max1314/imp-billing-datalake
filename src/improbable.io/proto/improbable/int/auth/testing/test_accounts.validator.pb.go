// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improbable/int/auth/testing/test_accounts.proto

package improbable_int_auth_testing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
	_ "improbable.io/proto/improbable/platform"
	_ "improbable.io/proto/infra/accounts"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *TestAccountId) Validate() error {
	return nil
}
func (this *Account) Validate() error {
	if this.TestAccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TestAccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TestAccountId", err)
		}
	}
	if this.AccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountId", err)
		}
	}
	if this.ExpirationTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ExpirationTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ExpirationTime", err)
		}
	}
	if this.CreatorId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CreatorId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CreatorId", err)
		}
	}
	return nil
}
func (this *CreateRequest) Validate() error {
	return nil
}
func (this *CreateResponse) Validate() error {
	if this.TestAccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TestAccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TestAccountId", err)
		}
	}
	if this.AccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountId", err)
		}
	}
	if this.AccountEmail != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AccountEmail); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AccountEmail", err)
		}
	}
	if this.ProjectName != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ProjectName); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ProjectName", err)
		}
	}
	return nil
}
func (this *ListRequest) Validate() error {
	return nil
}
func (this *ListResponse) Validate() error {
	for _, item := range this.Accounts {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Accounts", err)
			}
		}
	}
	return nil
}
func (this *DeleteRequest) Validate() error {
	if this.TestAccountId != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.TestAccountId); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("TestAccountId", err)
		}
	}
	return nil
}
func (this *DeleteResponse) Validate() error {
	return nil
}
